Package minijava;

Helpers
  all = [1 .. 127];
  digit = [ '0' .. '9' ];
  idbegin = [['a' .. 'z'] + ['A' .. 'Z']];
  nondigit = ['_' + [['a' .. 'z'] + ['A' .. 'Z']]];
  not_newline = [all - 10];
  not_star = [all - '*'];
  not_star_slash =  [not_star - '/'];

Tokens
  tclass = 'class';
  main = 'static void main';
  extends = 'extends';
  public = 'public';
  return = 'return';
  this = 'this';
  new = 'new';

  string_type = 'String';
  int_type = 'int';
  boolean_type = 'boolean';

  if = 'if';
  else = 'else';
  while = 'while';
  print = 'System.out.println';
  length = 'length';
  semicolon = ';';
  comma = ',';
  equal = '=';

  true = 'true';
  false = 'false';

  lsquare = '[';
  rsquare = ']';
  lcurly = '{';
  rcurly = '}';
  lparen = '(';
  rparen = ')';
  

  id = nondigit (digit|nondigit)*;
  integer = digit+;
  less = '<';
  and = '&&';
  plus = '+';
  minus = '-';
  mul = '*';
  dot = '.';
  not = '!';

  comment = '//' not_newline* 10 |
            '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
  blank = (' ' | 13 | 9 | 10)+;

Ignored Tokens
  blank,
  comment;


Productions

/*
Como fazer AST:

producao {-> objeto_gerado} = 
 decl1 decl2 token {-> new objeto_gerado(decl1.objeto decl2.objeto, token)}

 casos especificos:

 1)quando decl tiver um label, usar label.objeto, ao inves de decl.objeto
 2)se decl tiver repeticoes (decl*), usar [decl.objeto]
 3)se a producao tiver mais de um subtipo, criar objeto desse subtipo:
  -> new objeto_gerado.objeto_subtipo(decl1.objeto decl2.objeto)
*/

  program {-> program} = 
    main_class class_decl* 
	  {-> New program(main_class.main_class, [class_decl.class_decl])};
  
  main_class {-> main_class} = 
    tclass [name]:id 
	  [classlcurly]:lcurly 
	    public main lparen string_type lsquare rsquare [main_args]:id rparen
	      [mainlcurly]:lcurly 
	        statement 
	      [mainrcurly]:rcurly 
      [classrcurly]:rcurly
      {-> New main_class(name, main_args, statement.statement)};
  
  class_decl {-> class_decl} = 
    {simple_class} 
	tclass [classid]:id 
	  lcurly
        [vars]:var_decl* 
	    [methods]:method_decl* 
      rcurly 
      {-> New class_decl.class_decl_simple(classid, [vars.var_decl], [methods.method_decl])} |
    {extended_class} 
    tclass [classid]:id extends [superid]:id 
      lcurly
        [vars]:var_decl* [methods]:method_decl* 
      rcurly
      {-> New class_decl.class_decl_extends(classid, superid, [vars.var_decl], [methods.method_decl])};


  var_decl {-> var_decl} = 
    [vartype]:type [varid]:id semicolon
      {-> New var_decl(vartype.type, varid)};
  
  method_decl {-> method_decl} = 
    public [returntype]:type [methodid]:id lparen [formals]:formallist rparen 
      lcurly 
        [locals]:var_decl* 
        [body]:statement* 
        return [returnexp]:exp semicolon 
      rcurly
      {-> New method_decl( returntype.type, methodid, [formals.formal], [locals.var_decl], [body.statement], returnexp.exp)};
  
  formallist {-> formal*} =
    {notempty_formallist} formal formaltail*
      {-> [formal.formal, formaltail.formal]} |
    {empty_formallist}
      {-> []};
 
  formal {-> formal} =
    type id 
      {-> New formal(type.type, id)};

  formaltail {-> formal} =
    comma type id
      {-> New formal(type.type, id)};

  type {-> type} =
    {int_array_type} [int_array]:int_type lsquare rsquare {-> New type.int_array_type()} |
    {boolean_type} boolean_type {-> New type.boolean_type()} |
    {int_type} int_type {-> New type.integer_type()} |
    {id_type} id {-> New type.identifier_type(id)};

  statement {-> statement} =
    {stm_without_trailing_substm} stm_without_trailing_substm
      {-> stm_without_trailing_substm.statement} |
    {if} if lparen [condition]:exp rparen [stm]:statement
      {-> New statement.if(condition.exp, stm.statement)} |
    {if_else} if lparen [condition]:exp rparen [ifstm]:stm_no_short_if else [elsestm]:statement
      {-> New statement.if_else(condition.exp, ifstm.statement, elsestm.statement)} |
    {while} while lparen exp rparen statement
      {-> New statement.while(exp.exp, statement.statement)};

  stm_without_trailing_substm {-> statement} =
    {block} lcurly [statements]:statement* rcurly
      {-> New statement.block([statements.statement])} |
    {print} print lparen exp rparen semicolon
      {-> New statement.print(exp.exp)} |
    {assign} id equal [rightexp]:exp semicolon
      {-> New statement.assign(id, rightexp.exp)} |
    {arrayassign} [id]:id lsquare [indexexp]:exp rsquare equal [rightexp]:exp semicolon
      {-> New statement.array_assign(id, indexexp.exp, rightexp.exp)};

  stm_no_short_if {-> statement} =
    {stm_without_trailing_substm} stm_without_trailing_substm
      {-> stm_without_trailing_substm.statement} |
    {while_no_short_if} while lparen exp rparen stm_no_short_if
      {-> New statement.while(exp.exp, stm_no_short_if.statement)} |
    {if_else_no_short_if} if lparen [condition]:exp rparen [ifstm]:stm_no_short_if else [elsestm]:stm_no_short_if
      {-> New statement.if_else(condition.exp, ifstm.statement, elsestm.statement)};

  /**
   * Expressions
   * See precedence list at
   * @link http://www.cs.uwf.edu/~eelsheik/cop2253/resources/op_precedence.html
   *  &&  <  +  -  *  !  .  []  ()
   */
  exp {-> exp} =
    {and} exp and less_exp 
      {-> New exp.and(exp.exp, less_exp.exp)} |
    {less_exp} less_exp 
      {-> less_exp.exp};

  less_exp {-> exp} =
    {less} less_exp less addsub_exp
      {-> New exp.lessthan(less_exp.exp, addsub_exp.exp)} |
    {addsub_exp} addsub_exp
      {-> addsub_exp.exp};

  addsub_exp {-> exp} =
    {plus} addsub_exp plus mul_exp
      {-> New exp.plus(addsub_exp.exp, mul_exp.exp)} |
    {minus} addsub_exp minus mul_exp
      {-> New exp.minus(addsub_exp.exp, mul_exp.exp)} |
    {mul_exp} mul_exp
      {-> mul_exp.exp};

  mul_exp {-> exp} =
    {times} mul_exp mul not_exp 
      {-> New exp.times(mul_exp.exp, not_exp.exp)}|
    {not_exp} not_exp 
      {-> not_exp.exp};

  not_exp {-> exp} = 
    {not_exp} not not_exp
      {-> New exp.not(not_exp.exp)} |
    {dot_exp} dot_exp
      {-> dot_exp.exp};

  //ta certo isso aqui? to em duvida..
  dot_exp {-> exp} =
    {length} dot_exp dot length 
      {-> New exp.arraylength(dot_exp.exp)} |
    {call} dot_exp dot id lparen explist rparen 
      {-> New exp.call(dot_exp.exp, id, [explist.exp])} |
    {array_exp} array_exp
      {-> array_exp.exp}; 
  
  array_exp {-> exp} =
    {array} final_exp lsquare exp rsquare 
      {-> New exp.arraylookup(final_exp.exp, exp.exp)}|
    {final_exp} final_exp
      {-> final_exp.exp};

  final_exp {-> exp} =
    {integer_literal} integer 
      {-> New exp.integerliteral(integer)} |
    {true} true 
      {-> New exp.true()} |
    {false} false 
      {-> New exp.false()} |
    {id} id 
      {-> New exp.identifierexp(id)} |
    {this} this 
      {-> New exp.this()} |
    {new_int_array} new int_type lsquare exp rsquare 
      {-> New exp.newarray(exp.exp)} |
    {new_id} new id lparen rparen 
      {-> New exp.newobject(id)} |
    {paren_expr} lparen exp rparen
      {-> exp.exp};

  explist {-> exp*}=
    {explist} exp exprest* 
      {-> [exp.exp, exprest.exp]} |
    {blank_explist} 
      {-> []};
    
  exprest {-> exp} =
    comma exp
      {-> exp.exp}; 
  
Abstract Syntax Tree

  program =
    main_class class_decl*;
  

  main_class =
    [name]:id [main_args]:id statement;

  class_decl =
    {class_decl_simple} [classname]:id [vars]:var_decl* [methods]:method_decl* | 
    {class_decl_extends} [classname]:id [super]:id [vars]:var_decl* [methods]:method_decl*;

  var_decl =
    [vartype]:type [varid]:id;

  method_decl =
    [returntype]:type [methodid]:id [formals]:formal* [locals]:var_decl* [body]:statement* [returnexp]:exp;

  type =
    {int_array_type} |
    {boolean_type} |
    {integer_type} |
    {identifier_type} id;

  formal = 
    type id;

  statement = 
    {block} statement* |
    {while} exp statement |
    {if} [condition]:exp [stm]:statement |
    {if_else} [condition]:exp [ifstm]:statement [elsestm]:statement |
    {print} exp |
    {assign} id [rightexp]:exp |
    {array_assign} id [indexexp]:exp [rightexp]:exp;

  /* Expressions */
  exp =
    {and} [left]:exp [right]:exp |
    {lessthan} [left]:exp [right]:exp |
    {plus} [left]:exp [right]:exp |
    {minus} [left]:exp [right]:exp |
    {times} [left]:exp [right]:exp |
    {not} exp |
    {arraylength} exp |
    {call} [left]:exp [name]:id [args]:exp* |
    {arraylookup} [left]:exp [right]:exp |
    {integerliteral} integer |
    {true} |
    {false} |
    {identifierexp} id |
    {this} |
    {newarray} exp |
    {newobject} id;

