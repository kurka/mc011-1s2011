Package minijava;

Helpers
  all = [1 .. 127];
  digit = [ '0' .. '9' ];
  idbegin = [['a' .. 'z'] + ['A' .. 'Z']];
  nondigit = ['_' + [['a' .. 'z'] + ['A' .. 'Z']]];
  not_newline = [all - 10];
  not_star = [all - '*'];
  not_star_slash =  [not_star - '/'];

Tokens
  tclass = 'class';
  main = 'static void main';
  extends = 'extends';
  public = 'public';
  return = 'return';
  tok_this = 'this';
  tok_new = 'new';

  string_type = 'String';
  tok_int = 'int';
  tok_boolean = 'boolean';

  tok_if = 'if';
  else = 'else';
  tok_while = 'while';
  tok_print = 'System.out.println';
  tok_length = 'length';
  semicolon = ';';
  comma = ',';
  eq = '=';

  tok_true = 'true';
  tok_false = 'false';

  l_brack = '[';
  r_brack = ']';
  l_brace = '{';
  r_brace = '}';
  lparen = '(';
  rparen = ')';
  

  id = nondigit (digit|nondigit)*;
  integer_literal = digit+;
  lt = '<';
  and = '&&';
  plus = '+';
  minus = '-';
  times = '*';
  dot = '.';
  not = '!';

  comment = '//' not_newline* 10 |
            '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
  blank = (' ' | 13 | 9 | 10)+;

Ignored Tokens
  blank,
  comment;


Productions

/*
Como fazer AST:

producao {-> objeto_gerado} = 
 decl1 decl2 token {-> new objeto_gerado(decl1.objeto decl2.objeto, token)}

 casos especificos:

 1)quando decl tiver um label, usar label.objeto, ao inves de decl.objeto
 2)se decl tiver repeticoes (decl*), usar [decl.objeto]
 3)se a producao tiver mais de um subtipo, criar objeto desse subtipo:
  -> new objeto_gerado.objeto_subtipo(decl1.objeto decl2.objeto)
*/

  program {-> program} = 
    main_class class_decl* 
	  {-> New program(main_class.main_class, [class_decl.class_decl])};
  
  main_class {-> main_class} = 
    tclass [name]:id 
	  [classlcurly]:l_brace 
	    public main lparen string_type l_brack r_brack [main_args]:id rparen
	      [mainlcurly]:l_brace 
	        statement 
	      [mainrcurly]:r_brace 
      [classrcurly]:r_brace
      {-> New main_class(name, main_args, statement.statement)};
  
  class_decl {-> class_decl} = 
    {simple_class} 
	tclass [classid]:id 
	  l_brace
        [vars]:var_decl* 
	    [methods]:method_decl* 
      r_brace 
      {-> New class_decl(classid, Null, [vars.var_decl], [methods.method_decl])} |
    {extended_class} 
    tclass [classid]:id extends [superid]:id 
      l_brace
        [vars]:var_decl* [methods]:method_decl* 
      r_brace
      {-> New class_decl(classid, superid, [vars.var_decl], [methods.method_decl])};


  var_decl {-> var_decl} = 
    [vartype]:type [varid]:id semicolon
      {-> New var_decl(vartype.type, varid)};
  
  method_decl {-> method_decl} = 
    public [returntype]:type [methodid]:id lparen [formals]:formallist? rparen 
      l_brace 
        [locals]:var_decl* 
        [body]:statement* 
        return [returnexp]:exp semicolon 
      r_brace
      {-> New method_decl( returntype.type, methodid, [formals.formal], [locals.var_decl], [body.statement], returnexp.exp)};
  
  formallist {-> formal} =
    formal formaltail*
      {-> formal.formal};
 
  formal {-> formal} =
    type id 
      {-> New formal(type.type, id)};

  formaltail {-> formal} =
    comma formal
      {-> formal.formal};

  type {-> type} =
    {int_array_type} [int_array]:tok_int l_brack r_brack {-> New type.int_array_type()} |
    {boolean_type} tok_boolean {-> New type.boolean_type()} |
    {int_type} tok_int {-> New type.integer_type(tok_int)} |
    {id_type} id {-> New type.identifier_type(id)};

  statement {-> statement} =
    {stm_without_trailing_substm} stm_without_trailing_substm
      {-> stm_without_trailing_substm.statement} |
    {if} tok_if lparen [condition]:exp rparen [stm]:statement
      {-> New statement.if(condition.exp, stm.statement)} |
    {if_else} tok_if lparen [condition]:exp rparen [ifstm]:stm_no_short_if else [elsestm]:statement
      {-> New statement.if_else(condition.exp, ifstm.statement, elsestm.statement)} |
    {while} tok_while lparen exp rparen statement
      {-> New statement.while(exp.exp, statement.statement)};

  stm_without_trailing_substm {-> statement} =
    {block} l_brace [statements]:statement* r_brace
      {-> New statement.block([statements.statement])} |
    {print} tok_print lparen [value]:exp rparen semicolon
      {-> New statement.print(tok_print, value.exp)} |
    {assign} id eq [rightexp]:exp semicolon
      {-> New statement.assign(id, rightexp.exp)} |
    {arrayassign} [id]:id l_brack [indexexp]:exp r_brack eq [rightexp]:exp semicolon
      {-> New statement.array_assign(id, indexexp.exp, rightexp.exp)};

  stm_no_short_if {-> statement} =
    {stm_without_trailing_substm} stm_without_trailing_substm
      {-> stm_without_trailing_substm.statement} |
    {while_no_short_if} tok_while lparen exp rparen stm_no_short_if
      {-> New statement.while(exp.exp, stm_no_short_if.statement)} |
    {if_else_no_short_if} tok_if lparen [condition]:exp rparen [ifstm]:stm_no_short_if else [elsestm]:stm_no_short_if
      {-> New statement.if_else(condition.exp, ifstm.statement, elsestm.statement)};

  /**
   * Expressions
   * See precedence list at
   * @link http://www.cs.uwf.edu/~eelsheik/cop2253/resources/op_precedence.html
   *  &&  <  +  -  *  !  .  []  ()
   */
  exp {-> exp} =
    {and} exp and less_exp 
      {-> New exp.and(exp.exp, less_exp.exp)} |
    {less_exp} less_exp 
      {-> less_exp.exp};

  less_exp {-> exp} =
    {less} less_exp lt addsub_exp
      {-> New exp.lessthan(less_exp.exp, addsub_exp.exp)} |
    {addsub_exp} addsub_exp
      {-> addsub_exp.exp};

  addsub_exp {-> exp} =
    {plus} addsub_exp plus mul_exp
      {-> New exp.plus(addsub_exp.exp, mul_exp.exp)} |
    {minus} addsub_exp minus mul_exp
      {-> New exp.minus(addsub_exp.exp, mul_exp.exp)} |
    {mul_exp} mul_exp
      {-> mul_exp.exp};

  mul_exp {-> exp} =
    {times} mul_exp times not_exp 
      {-> New exp.times(mul_exp.exp, not_exp.exp)}|
    {not_exp} not_exp 
      {-> not_exp.exp};

  not_exp {-> exp} = 
    {not_exp} not not_exp
      {-> New exp.not(not_exp.exp)} |
    {dot_exp} dot_exp
      {-> dot_exp.exp};

  dot_exp {-> exp} =
    {length} dot_exp dot tok_length 
      {-> New exp.arraylength(dot_exp.exp)} |
    {call} [object]:dot_exp dot id lparen explist? rparen 
      {-> New exp.call(object.exp, id, [explist.exp])} |
    {array_exp} array_exp
      {-> array_exp.exp}; 
  
  array_exp {-> exp} =
    {array} final_exp l_brack exp r_brack 
      {-> New exp.arraylookup(final_exp.exp, exp.exp)}|
    {final_exp} final_exp
      {-> final_exp.exp};

  final_exp {-> exp} =
    {integer_literal} [value]:integer_literal 
      {-> New exp.integer_literal(value)} |
    {true} tok_true 
      {-> New exp.true()} |
    {false} tok_false 
      {-> New exp.false()} |
    {id} id 
      {-> New exp.identifierexp(id)} |
    {this} tok_this 
      {-> New exp.this()} |
    {new_int_array} tok_new tok_int l_brack exp r_brack 
      {-> New exp.newarray(exp.exp)} |
    {new_id} tok_new id lparen rparen 
      {-> New exp.newobject(id)} |
    {paren_expr} lparen exp rparen
      {-> exp.exp};

  explist {-> exp*}=
    exp exprest* 
      {-> [exp.exp, exprest.exp]};

  exprest {-> exp} =
    comma exp
      {-> exp.exp}; 
  
Abstract Syntax Tree

  program =
    main_class [classes]:class_decl*;

  main_class =
    [name]:id [main_args]:id statement;

  class_decl =
    //{class_decl_simple} [name]:id [attributes]:var_decl* [methods]:method_decl* | 
    //{class_decl_extends} [name]:id [super]:id [attributes]:var_decl* [methods]:method_decl*;
    [name]:id [super]:id? [attributes]:var_decl* [methods]:method_decl*;

  var_decl =
    type [name]:id;

  method_decl =
    [return_type]:type [name]:id [formals]:formal* [locals]:var_decl* [body]:statement* [return_exp]:exp;

  type =
    {int_array_type} |
    {boolean_type} |
    {integer_type} [token]:tok_int |
    {identifier_type} [name]:id;

  formal = 
    type [name]:id;

  statement = 
    {block} statement* |
    {while} exp statement |
    {if} [condition]:exp [stm]:statement |
    {if_else} [condition]:exp [ifstm]:statement [elsestm]:statement |
    {print} [token]:tok_print [value]:exp |
    {assign} id [rightexp]:exp |
    {array_assign} id [indexexp]:exp [rightexp]:exp;

  /* Expressions */
  exp =
    {and} [left]:exp [right]:exp |
    {lessthan} [left]:exp [right]:exp |
    {plus} [left]:exp [right]:exp |
    {minus} [left]:exp [right]:exp |
    {times} [left]:exp [right]:exp |
    {not} exp |
    {arraylength} exp |
    {call} [object]:exp [method]:id [actuals]:exp* |
    {arraylookup} [left]:exp [right]:exp |
    {integer_literal} [value]:integer_literal |
    {true} |
    {false} |
    {identifierexp} id |
    {this} |
    {newarray} exp |
    {newobject} id;

