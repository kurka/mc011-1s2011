Package minijava;

Helpers
  all = [1 .. 127];
  digit = [ '0' .. '9' ];
  idbegin = [['a' .. 'z'] + ['A' .. 'Z']];
  nondigit = ['_' + [['a' .. 'z'] + ['A' .. 'Z']]];
  not_newline = [all - 10];
  not_star = [all - '*'];
  not_star_slash =  [not_star - '/'];

Tokens
  tok_class = 'class';
  tok_main = 'main';
  tok_extends = 'extends';
  tok_public = 'public';
  tok_static = 'static';
  tok_void = 'void';
  tok_return = 'return';
  tok_this = 'this';
  tok_new = 'new';

  tok_string = 'String';
  tok_int = 'int';
  tok_boolean = 'boolean';

  tok_if = 'if';
  tok_else = 'else';
  tok_while = 'while';
  tok_print = 'System.out.println';
  tok_length = 'length';
  semi = ';';
  comma = ',';
  assign = '=';
  eq = '==';

  tok_true = 'true';
  tok_false = 'false';

  l_brack = '[';
  r_brack = ']';
  l_brace = '{';
  r_brace = '}';
  l_paren = '(';
  r_paren = ')';


  id = nondigit (digit|nondigit)*;
  integer_literal = digit+;
  lt = '<';
  and = '&&';
  plus = '+';
  minus = '-';
  times = '*';
  period = '.';
  not = '!';

  line_comment = '//' not_newline* 10;
  block_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
  tok_null = (' ' | 13 | 9 | 10)+;

Ignored Tokens
  tok_null,
  line_comment,
  block_comment;


Productions

/*
Como fazer AST:

producao {-> objeto_gerado} =
 decl1 decl2 token {-> new objeto_gerado(decl1.objeto decl2.objeto, token)}

 casos especificos:

 1)quando decl tiver um label, usar label.objeto, ao inves de decl.objeto
 2)se decl tiver repeticoes (decl*), usar [decl.objeto]
 3)se a producao tiver mais de um subtipo, criar objeto desse subtipo:
  -> new objeto_gerado.objeto_subtipo(decl1.objeto decl2.objeto)
*/

  program {-> program} =
    main_class class_decl*
	  {-> New program(main_class.main_class, [class_decl.class_decl])};

  main_class {-> main_class} =
    tok_class [name]:id
	  [classlcurly]:l_brace
	    tok_public tok_static tok_void tok_main l_paren tok_string l_brack r_brack [main_args]:id r_paren
	      [mainlcurly]:l_brace
	        statement
	      [mainrcurly]:r_brace
      [classrcurly]:r_brace
      {-> New main_class(name, main_args, statement.statement)};

  class_decl {-> class_decl} =
    {simple_class}
	tok_class [classid]:id
	  l_brace
        [vars]:var_decl*
	    [methods]:method_decl*
      r_brace
      {-> New class_decl(classid, Null, [vars.var_decl], [methods.method_decl])} |
    {extended_class}
    tok_class [classid]:id tok_extends [superid]:id
      l_brace
        [vars]:var_decl* [methods]:method_decl*
      r_brace
      {-> New class_decl(classid, superid, [vars.var_decl], [methods.method_decl])};


  var_decl {-> var_decl} =
    [vartype]:type [varid]:id semi
      {-> New var_decl(vartype.type, varid)};

  method_decl {-> method_decl} =
    tok_public [returntype]:type [methodid]:id l_paren [formals]:formallist? r_paren
      l_brace
        [locals]:var_decl*
        [body]:statement*
        tok_return [returnexp]:exp semi
      r_brace
      {-> New method_decl( returntype.type, methodid, [formals.formal], [locals.var_decl], [body.statement], returnexp.exp)};

  formallist {-> formal} =
    formal formaltail*
      {-> formal.formal};

  formal {-> formal} =
    type id
      {-> New formal(type.type, id)};

  formaltail {-> formal} =
    comma formal
      {-> formal.formal};

  type {-> type} =
    {int_array_type} tok_int l_brack r_brack {-> New type.array(tok_int)} |
    {boolean_type} tok_boolean {-> New type.boolean(tok_boolean)} |
    {int_type} tok_int {-> New type.int(tok_int)} |
    {id_type} id {-> New type.object(id)};

  statement {-> statement} =
    {stm_without_trailing_substm} stm_without_trailing_substm
      {-> stm_without_trailing_substm.statement} |
    {if} tok_if l_paren [condition]:exp r_paren [stm]:statement
      {-> New statement.if(condition.exp, tok_if, stm.statement, Null)} |
    {if_else} tok_if l_paren [condition]:exp r_paren [ifstm]:stm_no_short_if tok_else [elsestm]:statement
      {-> New statement.if(condition.exp, tok_if, ifstm.statement, elsestm.statement)} |
    {while} tok_while l_paren exp r_paren statement
      {-> New statement.while(tok_while, exp.exp, statement.statement)};

  stm_without_trailing_substm {-> statement} =
    {block} l_brace [statements]:statement* r_brace
      {-> New statement.block(l_brace, [statements.statement])} |
    {print} tok_print l_paren [value]:exp r_paren semi
      {-> New statement.print(tok_print, value.exp)} |
    {assign} id assign [rightexp]:exp semi
      {-> New statement.assign(id, rightexp.exp)} |
    {arrayassign} [id]:id l_brack [indexexp]:exp r_brack assign [rightexp]:exp semi
      {-> New statement.array_assign(id, indexexp.exp, rightexp.exp)};

  stm_no_short_if {-> statement} =
    {stm_without_trailing_substm} stm_without_trailing_substm
      {-> stm_without_trailing_substm.statement} |
    {while_no_short_if} tok_while l_paren exp r_paren stm_no_short_if
      {-> New statement.while(tok_while, exp.exp, stm_no_short_if.statement)} |
    {if_else_no_short_if} tok_if l_paren [condition]:exp r_paren [ifstm]:stm_no_short_if tok_else [elsestm]:stm_no_short_if
      {-> New statement.if(condition.exp, tok_if, ifstm.statement, elsestm.statement)};

  /**
   * Expressions
   * See precedence list at
   * @link http://www.cs.uwf.edu/~eelsheik/cop2253/resources/op_precedence.html
   *  &&  ==  <  +  -  *  !  .  []  ()
   */
  exp {-> exp} =
    {and} exp and equal_exp
      {-> New exp.and(exp.exp, and, equal_exp.exp)} |
    {equal_exp} equal_exp
      {-> equal_exp.exp};

  equal_exp {-> exp} =
    {equal} equal_exp eq less_exp
      {-> New exp.equal(equal_exp.exp, eq, less_exp.exp)} |
    {less_exp} less_exp
      {-> less_exp.exp};

  less_exp {-> exp} =
    {less} less_exp lt addsub_exp
      {-> New exp.less_than(less_exp.exp, lt, addsub_exp.exp)} |
    {addsub_exp} addsub_exp
      {-> addsub_exp.exp};

  addsub_exp {-> exp} =
    {plus} addsub_exp plus mul_exp
      {-> New exp.plus(addsub_exp.exp, plus, mul_exp.exp)} |
    {minus} addsub_exp minus mul_exp
      {-> New exp.minus(addsub_exp.exp, minus, mul_exp.exp)} |
    {mul_exp} mul_exp
      {-> mul_exp.exp};

  mul_exp {-> exp} =
    {times} mul_exp times not_exp
      {-> New exp.times(mul_exp.exp, times, not_exp.exp)}|
    {not_exp} not_exp
      {-> not_exp.exp};

  not_exp {-> exp} =
    {not_exp} not not_exp
      {-> New exp.not(not, not_exp.exp)} |
    {dot_exp} dot_exp
      {-> dot_exp.exp};

  dot_exp {-> exp} =
    {length} dot_exp period tok_length
      {-> New exp.array_length(dot_exp.exp, tok_length)} |
    {call} [object]:dot_exp period id l_paren explist? r_paren
      {-> New exp.call(object.exp, id, [explist.exp])} |
    {array_exp} array_exp
      {-> array_exp.exp};

  array_exp {-> exp} =
    {array} final_exp l_brack exp r_brack
      {-> New exp.array_lookup(final_exp.exp, l_brack, exp.exp)}|
    {final_exp} final_exp
      {-> final_exp.exp};

  final_exp {-> exp} =
    {integer_literal} [value]:integer_literal
      {-> New exp.integer_literal(value)} |
    {true} tok_true
      {-> New exp.true(tok_true)} |
    {false} tok_false
      {-> New exp.false(tok_false)} |
    {id} id
      {-> New exp.identifier(id)} |
    {this} tok_this
      {-> New exp.this(tok_this)} |
    {new_int_array} tok_new tok_int l_brack exp r_brack
      {-> New exp.new_array(tok_new, exp.exp)} |
    {new_id} tok_new id l_paren r_paren
      {-> New exp.new_object(id)} |
    {paren_expr} l_paren exp r_paren
      {-> exp.exp};

  explist {-> exp*}=
    exp exprest*
      {-> [exp.exp, exprest.exp]};

  exprest {-> exp} =
    comma exp
      {-> exp.exp};

Abstract Syntax Tree

  program =
    main_class [classes]:class_decl*;

  main_class =
    [name]:id [main_args]:id statement;

  class_decl =
    [name]:id [super]:id? [attributes]:var_decl* [methods]:method_decl*;

  var_decl =
    type [name]:id;

  method_decl =
    [return_type]:type [name]:id [formals]:formal* [locals]:var_decl* [body]:statement* [return_exp]:exp;

  type =
    {array} [token]:tok_int |
    {boolean} [token]:tok_boolean |
    {int} [token]:tok_int |
    {object} [name]:id;

  formal =
    type [name]:id;

  statement =
    {block} [token]:l_brace [statements]:statement* |
    {while} [token]:tok_while [condition]:exp [body]:statement |
    {if} [condition]:exp [token]:tok_if [then_clause]:statement [else_clause]:statement? |
    {print} [token]:tok_print [value]:exp |
    {assign} [target]:id [value]:exp |
    {array_assign} [target]:id [index]:exp [value]:exp;

  /* Expressions */
  exp =
    {and} [lhs]:exp [token]:and [rhs]:exp |
    {equal} [lhs]:exp [token]:eq [rhs]:exp |
    {less_than} [lhs]:exp [token]:lt [rhs]:exp |
    {plus} [lhs]:exp [token]:plus [rhs]:exp |
    {minus} [lhs]:exp [token]:minus [rhs]:exp |
    {times} [lhs]:exp [token]:times [rhs]:exp |
    {not} [token]:not [value]:exp |
    {array_length} [array]:exp [token]:tok_length |
    {call} [object]:exp [method]:id [actuals]:exp* |
    {array_lookup} [array]:exp [token]:l_brack [index]:exp |
    {integer_literal} [value]:integer_literal |
    {true} [token]:tok_true |
    {false} [token]:tok_false |
    {identifier} [name]:id |
    {this} [token]:tok_this |
    {new_array} [token]:tok_new [size]:exp |
    {new_object} [name]:id;

