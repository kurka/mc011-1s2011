!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AAndExp	minijava/node/AAndExp.java	/^    public AAndExp()$/;"	m	class:AAndExp
AAndExp	minijava/node/AAndExp.java	/^public final class AAndExp extends PExp$/;"	c
AArrayAssignStatement	minijava/node/AArrayAssignStatement.java	/^    public AArrayAssignStatement()$/;"	m	class:AArrayAssignStatement
AArrayAssignStatement	minijava/node/AArrayAssignStatement.java	/^public final class AArrayAssignStatement extends PStatement$/;"	c
AArraylengthExp	minijava/node/AArraylengthExp.java	/^    public AArraylengthExp()$/;"	m	class:AArraylengthExp
AArraylengthExp	minijava/node/AArraylengthExp.java	/^public final class AArraylengthExp extends PExp$/;"	c
AArraylookupExp	minijava/node/AArraylookupExp.java	/^    public AArraylookupExp()$/;"	m	class:AArraylookupExp
AArraylookupExp	minijava/node/AArraylookupExp.java	/^public final class AArraylookupExp extends PExp$/;"	c
AAssignStatement	minijava/node/AAssignStatement.java	/^    public AAssignStatement()$/;"	m	class:AAssignStatement
AAssignStatement	minijava/node/AAssignStatement.java	/^public final class AAssignStatement extends PStatement$/;"	c
ABlockStatement	minijava/node/ABlockStatement.java	/^    public ABlockStatement()$/;"	m	class:ABlockStatement
ABlockStatement	minijava/node/ABlockStatement.java	/^public final class ABlockStatement extends PStatement$/;"	c
ABooleanTypeType	minijava/node/ABooleanTypeType.java	/^    public ABooleanTypeType()$/;"	m	class:ABooleanTypeType
ABooleanTypeType	minijava/node/ABooleanTypeType.java	/^public final class ABooleanTypeType extends PType$/;"	c
ACCEPT	minijava/parser/Parser.java	/^    private final static int ACCEPT = 2;$/;"	f	class:Parser	file:
ACallExp	minijava/node/ACallExp.java	/^    public ACallExp()$/;"	m	class:ACallExp
ACallExp	minijava/node/ACallExp.java	/^public final class ACallExp extends PExp$/;"	c
AClassdeclextendsClassdecl	minijava/node/AClassdeclextendsClassdecl.java	/^    public AClassdeclextendsClassdecl()$/;"	m	class:AClassdeclextendsClassdecl
AClassdeclextendsClassdecl	minijava/node/AClassdeclextendsClassdecl.java	/^public final class AClassdeclextendsClassdecl extends PClassdecl$/;"	c
AClassdeclsimpleClassdecl	minijava/node/AClassdeclsimpleClassdecl.java	/^    public AClassdeclsimpleClassdecl()$/;"	m	class:AClassdeclsimpleClassdecl
AClassdeclsimpleClassdecl	minijava/node/AClassdeclsimpleClassdecl.java	/^public final class AClassdeclsimpleClassdecl extends PClassdecl$/;"	c
AFalseExp	minijava/node/AFalseExp.java	/^    public AFalseExp()$/;"	m	class:AFalseExp
AFalseExp	minijava/node/AFalseExp.java	/^public final class AFalseExp extends PExp$/;"	c
AFormal	minijava/node/AFormal.java	/^    public AFormal()$/;"	m	class:AFormal
AFormal	minijava/node/AFormal.java	/^public final class AFormal extends PFormal$/;"	c
AIdentifierTypeType	minijava/node/AIdentifierTypeType.java	/^    public AIdentifierTypeType()$/;"	m	class:AIdentifierTypeType
AIdentifierTypeType	minijava/node/AIdentifierTypeType.java	/^public final class AIdentifierTypeType extends PType$/;"	c
AIdentifierexpExp	minijava/node/AIdentifierexpExp.java	/^    public AIdentifierexpExp()$/;"	m	class:AIdentifierexpExp
AIdentifierexpExp	minijava/node/AIdentifierexpExp.java	/^public final class AIdentifierexpExp extends PExp$/;"	c
AIfStatement	minijava/node/AIfStatement.java	/^    public AIfStatement()$/;"	m	class:AIfStatement
AIfStatement	minijava/node/AIfStatement.java	/^public final class AIfStatement extends PStatement$/;"	c
AIntArrayTypeType	minijava/node/AIntArrayTypeType.java	/^    public AIntArrayTypeType()$/;"	m	class:AIntArrayTypeType
AIntArrayTypeType	minijava/node/AIntArrayTypeType.java	/^public final class AIntArrayTypeType extends PType$/;"	c
AIntegerTypeType	minijava/node/AIntegerTypeType.java	/^    public AIntegerTypeType()$/;"	m	class:AIntegerTypeType
AIntegerTypeType	minijava/node/AIntegerTypeType.java	/^public final class AIntegerTypeType extends PType$/;"	c
AIntegerliteralExp	minijava/node/AIntegerliteralExp.java	/^    public AIntegerliteralExp()$/;"	m	class:AIntegerliteralExp
AIntegerliteralExp	minijava/node/AIntegerliteralExp.java	/^public final class AIntegerliteralExp extends PExp$/;"	c
ALessthanExp	minijava/node/ALessthanExp.java	/^    public ALessthanExp()$/;"	m	class:ALessthanExp
ALessthanExp	minijava/node/ALessthanExp.java	/^public final class ALessthanExp extends PExp$/;"	c
AMainclass	minijava/node/AMainclass.java	/^    public AMainclass()$/;"	m	class:AMainclass
AMainclass	minijava/node/AMainclass.java	/^public final class AMainclass extends PMainclass$/;"	c
AMethoddecl	minijava/node/AMethoddecl.java	/^    public AMethoddecl()$/;"	m	class:AMethoddecl
AMethoddecl	minijava/node/AMethoddecl.java	/^public final class AMethoddecl extends PMethoddecl$/;"	c
AMinusExp	minijava/node/AMinusExp.java	/^    public AMinusExp()$/;"	m	class:AMinusExp
AMinusExp	minijava/node/AMinusExp.java	/^public final class AMinusExp extends PExp$/;"	c
AND	tree/BINOP.java	/^    public static final int AND = 4;$/;"	f	class:BINOP
ANewarrayExp	minijava/node/ANewarrayExp.java	/^    public ANewarrayExp()$/;"	m	class:ANewarrayExp
ANewarrayExp	minijava/node/ANewarrayExp.java	/^public final class ANewarrayExp extends PExp$/;"	c
ANewobjectExp	minijava/node/ANewobjectExp.java	/^    public ANewobjectExp()$/;"	m	class:ANewobjectExp
ANewobjectExp	minijava/node/ANewobjectExp.java	/^public final class ANewobjectExp extends PExp$/;"	c
ANotExp	minijava/node/ANotExp.java	/^    public ANotExp()$/;"	m	class:ANotExp
ANotExp	minijava/node/ANotExp.java	/^public final class ANotExp extends PExp$/;"	c
APlusExp	minijava/node/APlusExp.java	/^    public APlusExp()$/;"	m	class:APlusExp
APlusExp	minijava/node/APlusExp.java	/^public final class APlusExp extends PExp$/;"	c
APrintStatement	minijava/node/APrintStatement.java	/^    public APrintStatement()$/;"	m	class:APrintStatement
APrintStatement	minijava/node/APrintStatement.java	/^public final class APrintStatement extends PStatement$/;"	c
AProgram	minijava/node/AProgram.java	/^    public AProgram()$/;"	m	class:AProgram
AProgram	minijava/node/AProgram.java	/^public final class AProgram extends PProgram$/;"	c
ARSHIFT	tree/BINOP.java	/^    public static final int ARSHIFT = 8;$/;"	f	class:BINOP
AThisExp	minijava/node/AThisExp.java	/^    public AThisExp()$/;"	m	class:AThisExp
AThisExp	minijava/node/AThisExp.java	/^public final class AThisExp extends PExp$/;"	c
ATimesExp	minijava/node/ATimesExp.java	/^    public ATimesExp()$/;"	m	class:ATimesExp
ATimesExp	minijava/node/ATimesExp.java	/^public final class ATimesExp extends PExp$/;"	c
ATrueExp	minijava/node/ATrueExp.java	/^    public ATrueExp()$/;"	m	class:ATrueExp
ATrueExp	minijava/node/ATrueExp.java	/^public final class ATrueExp extends PExp$/;"	c
AVardecl	minijava/node/AVardecl.java	/^    public AVardecl()$/;"	m	class:AVardecl
AVardecl	minijava/node/AVardecl.java	/^public final class AVardecl extends PVardecl$/;"	c
AWhileStatement	minijava/node/AWhileStatement.java	/^    public AWhileStatement()$/;"	m	class:AWhileStatement
AWhileStatement	minijava/node/AWhileStatement.java	/^public final class AWhileStatement extends PStatement$/;"	c
Absyn	syntaxtree/Absyn.java	/^	public Absyn(int l, int r)$/;"	m	class:Absyn
Absyn	syntaxtree/Absyn.java	/^public abstract class Absyn implements Visitable$/;"	c
Access	frame/Access.java	/^    public Access()$/;"	m	class:Access
Access	frame/Access.java	/^public abstract class Access$/;"	c
Analysis	minijava/analysis/Analysis.java	/^public interface Analysis extends Switch$/;"	i
AnalysisAdapter	minijava/analysis/AnalysisAdapter.java	/^public class AnalysisAdapter implements Analysis$/;"	c
And	syntaxtree/And.java	/^	public And(int l, int r, Exp ll, Exp rr)$/;"	m	class:And
And	syntaxtree/And.java	/^public class And extends Exp$/;"	c
ArrayAssign	syntaxtree/ArrayAssign.java	/^	public ArrayAssign(int l, int r, Identifier v, Exp i, Exp vv)$/;"	m	class:ArrayAssign
ArrayAssign	syntaxtree/ArrayAssign.java	/^public class ArrayAssign extends Statement$/;"	c
ArrayLength	syntaxtree/ArrayLength.java	/^	public ArrayLength(int l, int r, Exp a)$/;"	m	class:ArrayLength
ArrayLength	syntaxtree/ArrayLength.java	/^public class ArrayLength extends Exp$/;"	c
ArrayLookup	syntaxtree/ArrayLookup.java	/^	public ArrayLookup(int l, int r, Exp a, Exp i) {$/;"	m	class:ArrayLookup
ArrayLookup	syntaxtree/ArrayLookup.java	/^public class ArrayLookup extends Exp$/;"	c
AssemFlowGraph	flow_graph/AssemFlowGraph.java	/^    public AssemFlowGraph(List<Instr> list)$/;"	m	class:AssemFlowGraph
AssemFlowGraph	flow_graph/AssemFlowGraph.java	/^public class AssemFlowGraph extends FlowGraph$/;"	c
Assign	syntaxtree/Assign.java	/^	public Assign(int l, int r, Identifier v, Exp e)$/;"	m	class:Assign
Assign	syntaxtree/Assign.java	/^public class Assign extends Statement$/;"	c
BINOP	tree/BINOP.java	/^    public BINOP(int b, Exp l, Exp r)$/;"	m	class:BINOP
BINOP	tree/BINOP.java	/^public class BINOP extends Exp$/;"	c
BasicBlocks	canon/BasicBlocks.java	/^    public BasicBlocks(List<tree.Stm> stms)$/;"	m	class:BasicBlocks
BasicBlocks	canon/BasicBlocks.java	/^public class BasicBlocks$/;"	c
Block	syntaxtree/Block.java	/^	public Block(int l, int r, List<Statement> b)$/;"	m	class:Block
Block	syntaxtree/Block.java	/^public class Block extends Statement$/;"	c
BooleanType	syntaxtree/BooleanType.java	/^	public BooleanType(int l, int r)$/;"	m	class:BooleanType
BooleanType	syntaxtree/BooleanType.java	/^public class BooleanType extends Type$/;"	c
BuildVTable	translate/VTableBuilder.java	/^    private void BuildVTable(ClassInfo info)$/;"	m	class:VTableBuilder	file:
CALL	tree/CALL.java	/^    public CALL(Exp f, List<Exp> a)$/;"	m	class:CALL
CALL	tree/CALL.java	/^public class CALL extends tree.Exp$/;"	c
CJUMP	tree/CJUMP.java	/^    public CJUMP(int o, Exp l, Exp r, Label t, Label f)$/;"	m	class:CJUMP
CJUMP	tree/CJUMP.java	/^public class CJUMP extends Stm$/;"	c
CONST	tree/CONST.java	/^    public CONST(long v)$/;"	m	class:CONST
CONST	tree/CONST.java	/^public class CONST extends Exp$/;"	c
Call	syntaxtree/Call.java	/^	public Call(int l, int r, Exp o, Identifier m, List<Exp> a)$/;"	m	class:Call
Call	syntaxtree/Call.java	/^public class Call extends Exp$/;"	c
Canon	canon/Canon.java	/^public class Canon$/;"	c
ClassDecl	syntaxtree/ClassDecl.java	/^	public ClassDecl(int l, int r, Identifier n, List<VarDecl> v, List<MethodDecl> m)$/;"	m	class:ClassDecl
ClassDecl	syntaxtree/ClassDecl.java	/^public abstract class ClassDecl extends Absyn$/;"	c
ClassDeclExtends	syntaxtree/ClassDeclExtends.java	/^	public ClassDeclExtends(int l, int r, Identifier n, Identifier s, List<VarDecl> vl, List<MethodDecl> ml)$/;"	m	class:ClassDeclExtends
ClassDeclExtends	syntaxtree/ClassDeclExtends.java	/^public class ClassDeclExtends extends ClassDecl$/;"	c
ClassDeclSimple	syntaxtree/ClassDeclSimple.java	/^	public ClassDeclSimple(int l, int r, Identifier n, List<VarDecl> vl, List<MethodDecl> ml)$/;"	m	class:ClassDeclSimple
ClassDeclSimple	syntaxtree/ClassDeclSimple.java	/^public class ClassDeclSimple extends ClassDecl$/;"	c
ClassHandler	util/conversor/ClassHandler.java	/^	private ClassHandler()$/;"	m	class:ClassHandler	file:
ClassHandler	util/conversor/ClassHandler.java	/^class ClassHandler extends AnalysisAdapter$/;"	c
ClassInfo	symbol/ClassInfo.java	/^	public ClassInfo(Symbol n)$/;"	m	class:ClassInfo
ClassInfo	symbol/ClassInfo.java	/^	public ClassInfo(Symbol n, ClassInfo b)$/;"	m	class:ClassInfo
ClassInfo	symbol/ClassInfo.java	/^public class ClassInfo$/;"	c
ClassListHandler	util/conversor/ClassListHandler.java	/^	private ClassListHandler()$/;"	m	class:ClassListHandler	file:
ClassListHandler	util/conversor/ClassListHandler.java	/^class ClassListHandler$/;"	c
CombineMap	temp/CombineMap.java	/^    public CombineMap(TempMap m1, TempMap m2)$/;"	m	class:CombineMap
CombineMap	temp/CombineMap.java	/^public class CombineMap implements TempMap$/;"	c
Cx	translate/Cx.java	/^public abstract class Cx extends Exp$/;"	c
DIV	tree/BINOP.java	/^    public static final int DIV = 3;$/;"	f	class:BINOP
DefaultMap	temp/DefaultMap.java	/^    public DefaultMap()$/;"	m	class:DefaultMap
DefaultMap	temp/DefaultMap.java	/^public class DefaultMap implements TempMap$/;"	c
DepthFirstAdapter	minijava/analysis/DepthFirstAdapter.java	/^public class DepthFirstAdapter extends AnalysisAdapter$/;"	c
EOF	minijava/node/EOF.java	/^    public EOF()$/;"	m	class:EOF
EOF	minijava/node/EOF.java	/^    public EOF(int line, int pos)$/;"	m	class:EOF
EOF	minijava/node/EOF.java	/^public final class EOF extends Token$/;"	c
EQ	tree/CJUMP.java	/^    public static final int EQ = 0;$/;"	f	class:CJUMP
ERROR	minijava/parser/Parser.java	/^    private final static int ERROR = 3;$/;"	f	class:Parser	file:
ESEQ	tree/ESEQ.java	/^    public ESEQ(Stm s, Exp e)$/;"	m	class:ESEQ
ESEQ	tree/ESEQ.java	/^public class ESEQ extends Exp$/;"	c
EXPSTM	tree/EXPSTM.java	/^    public EXPSTM(Exp e)$/;"	m	class:EXPSTM
EXPSTM	tree/EXPSTM.java	/^public class EXPSTM extends Stm$/;"	c
Env	semant/Env.java	/^	public Env(ErrorEchoer e)$/;"	m	class:Env
Env	semant/Env.java	/^public class Env$/;"	c
Equal	syntaxtree/Equal.java	/^	public Equal(int l, int r, Exp ll, Exp rr) {$/;"	m	class:Equal
Equal	syntaxtree/Equal.java	/^public class Equal extends Exp$/;"	c
Error	errors/ErrorEchoer.java	/^	public void Error(Absyn obj, Object[] msg);$/;"	m	interface:ErrorEchoer
Error	main/SimpleError.java	/^    public void Error(Absyn obj, Object[] msg)$/;"	m	class:SimpleError
ErrorCount	errors/ErrorEchoer.java	/^	public int ErrorCount();$/;"	m	interface:ErrorEchoer
ErrorCount	main/SimpleError.java	/^    public int ErrorCount()$/;"	m	class:SimpleError
ErrorEchoer	errors/ErrorEchoer.java	/^public interface ErrorEchoer$/;"	i
Ex	translate/Ex.java	/^    Ex(tree.Exp e)$/;"	m	class:Ex
Ex	translate/Ex.java	/^class Ex extends Exp$/;"	c
Exp	syntaxtree/Exp.java	/^	public Exp(int l, int r)$/;"	m	class:Exp
Exp	syntaxtree/Exp.java	/^public abstract class Exp extends Absyn$/;"	c
Exp	translate/Exp.java	/^    Exp()$/;"	m	class:Exp
Exp	translate/Exp.java	/^public abstract class Exp$/;"	c
Exp	tree/Exp.java	/^    public Exp()$/;"	m	class:Exp
Exp	tree/Exp.java	/^public abstract class Exp$/;"	c
ExpCall	canon/Canon.java	/^    ExpCall(tree.CALL c)$/;"	m	class:ExpCall
ExpCall	canon/Canon.java	/^class ExpCall extends tree.Stm$/;"	c
ExpHandler	translate/ExpHandler.java	/^    private ExpHandler(Frame f, Env e, ClassInfo c, MethodInfo m)$/;"	m	class:ExpHandler	file:
ExpHandler	translate/ExpHandler.java	/^class ExpHandler extends VisitorAdapter$/;"	c
ExpHandler	util/conversor/ExpHandler.java	/^	private ExpHandler()$/;"	m	class:ExpHandler	file:
ExpHandler	util/conversor/ExpHandler.java	/^class ExpHandler extends AnalysisAdapter$/;"	c
ExpListHandler	translate/ExpListHandler.java	/^    private ExpListHandler()$/;"	m	class:ExpListHandler	file:
ExpListHandler	translate/ExpListHandler.java	/^class ExpListHandler$/;"	c
ExpListHandler	util/conversor/ExpListHandler.java	/^	private ExpListHandler()$/;"	m	class:ExpListHandler	file:
ExpListHandler	util/conversor/ExpListHandler.java	/^class ExpListHandler$/;"	c
FP	frame/Frame.java	/^    public abstract Temp FP();$/;"	m	class:Frame
False	syntaxtree/False.java	/^	public False(int l, int r)$/;"	m	class:False
False	syntaxtree/False.java	/^public class False extends Exp$/;"	c
FlowGraph	flow_graph/FlowGraph.java	/^public abstract class FlowGraph extends graph.Graph$/;"	c
Formal	syntaxtree/Formal.java	/^	public Formal(int l, int r, Type t, Identifier n)$/;"	m	class:Formal
Formal	syntaxtree/Formal.java	/^public class Formal extends Absyn$/;"	c
FormalHandler	util/conversor/FormalHandler.java	/^	public FormalHandler()$/;"	m	class:FormalHandler
FormalHandler	util/conversor/FormalHandler.java	/^class FormalHandler extends AnalysisAdapter$/;"	c
FormalListHandler	util/conversor/FormalListHandler.java	/^	private FormalListHandler()$/;"	m	class:FormalListHandler	file:
FormalListHandler	util/conversor/FormalListHandler.java	/^class FormalListHandler$/;"	c
Frag	translate/Frag.java	/^    public Frag()$/;"	m	class:Frag
Frag	translate/Frag.java	/^public abstract class Frag$/;"	c
Frame	frame/Frame.java	/^    public Frame()$/;"	m	class:Frame
Frame	frame/Frame.java	/^public abstract class Frame implements TempMap$/;"	c
FrameBuilder	translate/FrameBuilder.java	/^    private FrameBuilder(Frame p, Env e)$/;"	m	class:FrameBuilder	file:
FrameBuilder	translate/FrameBuilder.java	/^class FrameBuilder extends VisitorAdapter$/;"	c
GE	tree/CJUMP.java	/^    public static final int GE = 5;$/;"	f	class:CJUMP
GT	tree/CJUMP.java	/^    public static final int GT = 4;$/;"	f	class:CJUMP
Graph	graph/Graph.java	/^public class Graph$/;"	c
INITIAL	minijava/lexer/Lexer.java	/^        public final static State INITIAL = new State(0);$/;"	f	class:Lexer.State
IRBuilder	translate/IRBuilder.java	/^    private IRBuilder(Env e, Frame f)$/;"	m	class:IRBuilder	file:
IRBuilder	translate/IRBuilder.java	/^class IRBuilder extends VisitorAdapter$/;"	c
Identifier	syntaxtree/Identifier.java	/^    public Identifier(int l, int r, String s)$/;"	m	class:Identifier
Identifier	syntaxtree/Identifier.java	/^public class Identifier extends Absyn$/;"	c
IdentifierExp	syntaxtree/IdentifierExp.java	/^	public IdentifierExp(int l, int r, Identifier n)$/;"	m	class:IdentifierExp
IdentifierExp	syntaxtree/IdentifierExp.java	/^public class IdentifierExp extends Exp$/;"	c
IdentifierType	syntaxtree/IdentifierType.java	/^	public IdentifierType(int l, int r, String n)$/;"	m	class:IdentifierType
IdentifierType	syntaxtree/IdentifierType.java	/^public class IdentifierType extends Type$/;"	c
If	syntaxtree/If.java	/^	public If(int l, int r, Exp c, Statement t)$/;"	m	class:If
If	syntaxtree/If.java	/^	public If(int l, int r, Exp c, Statement t, Statement e)$/;"	m	class:If
If	syntaxtree/If.java	/^public class If extends Statement$/;"	c
IfThenElseExp	translate/IfThenElseExp.java	/^    IfThenElseExp( Exp c, Exp ee1, Exp ee2)$/;"	m	class:IfThenElseExp
IfThenElseExp	translate/IfThenElseExp.java	/^class IfThenElseExp extends Cx$/;"	c
Instr	assem/Instr.java	/^public abstract class Instr$/;"	c
IntArrayType	syntaxtree/IntArrayType.java	/^	public IntArrayType(int l, int r)$/;"	m	class:IntArrayType
IntArrayType	syntaxtree/IntArrayType.java	/^public class IntArrayType extends Type$/;"	c
IntegerLiteral	syntaxtree/IntegerLiteral.java	/^	public IntegerLiteral(int l, int r, int v) {$/;"	m	class:IntegerLiteral
IntegerLiteral	syntaxtree/IntegerLiteral.java	/^public class IntegerLiteral extends Exp$/;"	c
IntegerType	syntaxtree/IntegerType.java	/^	public IntegerType(int l, int r)$/;"	m	class:IntegerType
IntegerType	syntaxtree/IntegerType.java	/^public class IntegerType extends Type$/;"	c
JUMP	tree/JUMP.java	/^    public JUMP(Exp e, List<Label> t)$/;"	m	class:JUMP
JUMP	tree/JUMP.java	/^    public JUMP(Label target)$/;"	m	class:JUMP
JUMP	tree/JUMP.java	/^public class JUMP extends Stm$/;"	c
LABEL	assem/LABEL.java	/^    public LABEL(String a, Label l)$/;"	m	class:LABEL
LABEL	assem/LABEL.java	/^public class LABEL extends Instr$/;"	c
LABEL	tree/LABEL.java	/^    public LABEL(Label l)$/;"	m	class:LABEL
LABEL	tree/LABEL.java	/^public class LABEL extends Stm$/;"	c
LE	tree/CJUMP.java	/^    public static final int LE = 3;$/;"	f	class:CJUMP
LSHIFT	tree/BINOP.java	/^    public static final int LSHIFT = 6;$/;"	f	class:BINOP
LT	tree/CJUMP.java	/^    public static final int LT = 2;$/;"	f	class:CJUMP
Label	temp/Label.java	/^    public Label()$/;"	m	class:Label
Label	temp/Label.java	/^    public Label(String l)$/;"	m	class:Label
Label	temp/Label.java	/^    public Label(Symbol s)$/;"	m	class:Label
Label	temp/Label.java	/^public class Label$/;"	c
LessThan	syntaxtree/LessThan.java	/^	public LessThan(int l, int r, Exp ll, Exp rr)$/;"	m	class:LessThan
LessThan	syntaxtree/LessThan.java	/^public class LessThan extends Exp$/;"	c
Lexer	minijava/lexer/Lexer.java	/^public class Lexer$/;"	c
LexerException	minijava/lexer/LexerException.java	/^    public LexerException(String message)$/;"	m	class:LexerException
LexerException	minijava/lexer/LexerException.java	/^public class LexerException extends Exception$/;"	c
List	util/List.java	/^	public List(E h, List<E> t)$/;"	m	class:List
List	util/List.java	/^public class List<E>$/;"	c
MEM	tree/MEM.java	/^    public MEM(Exp e)$/;"	m	class:MEM
MEM	tree/MEM.java	/^public class MEM extends Exp$/;"	c
MINUS	tree/BINOP.java	/^    public static final int MINUS = 1;$/;"	f	class:BINOP
MOVE	assem/MOVE.java	/^    public MOVE(String a, Temp d, Temp s)$/;"	m	class:MOVE
MOVE	assem/MOVE.java	/^public class MOVE extends Instr$/;"	c
MOVE	tree/MOVE.java	/^    public MOVE(Exp d, Exp s)$/;"	m	class:MOVE
MOVE	tree/MOVE.java	/^public class MOVE extends Stm$/;"	c
Main	main/Main.java	/^public final class Main$/;"	c
MainClass	syntaxtree/MainClass.java	/^    public MainClass(int l, int r, Identifier i1, Identifier i2, Statement s)$/;"	m	class:MainClass
MainClass	syntaxtree/MainClass.java	/^public class MainClass extends Absyn$/;"	c
MainClassHandler	util/conversor/MainClassHandler.java	/^	private MainClassHandler()$/;"	m	class:MainClassHandler	file:
MainClassHandler	util/conversor/MainClassHandler.java	/^class MainClassHandler extends AnalysisAdapter$/;"	c
MethodDecl	syntaxtree/MethodDecl.java	/^	public MethodDecl(int l, int r, Type rt, Identifier n, List<Formal> f, List<VarDecl> ll, List<Statement> sl, Exp rr)$/;"	m	class:MethodDecl
MethodDecl	syntaxtree/MethodDecl.java	/^public class MethodDecl extends Absyn$/;"	c
MethodDeclHandler	translate/MethodDeclHandler.java	/^    private MethodDeclHandler()$/;"	m	class:MethodDeclHandler	file:
MethodDeclHandler	translate/MethodDeclHandler.java	/^class MethodDeclHandler$/;"	c
MethodHandler	util/conversor/MethodHandler.java	/^	private MethodHandler()$/;"	m	class:MethodHandler	file:
MethodHandler	util/conversor/MethodHandler.java	/^class MethodHandler extends AnalysisAdapter$/;"	c
MethodInfo	symbol/MethodInfo.java	/^	public MethodInfo(Type t, Symbol n, Symbol p)$/;"	m	class:MethodInfo
MethodInfo	symbol/MethodInfo.java	/^public class MethodInfo$/;"	c
MethodListHandler	util/conversor/MethodListHandler.java	/^	private MethodListHandler()$/;"	m	class:MethodListHandler	file:
MethodListHandler	util/conversor/MethodListHandler.java	/^class MethodListHandler$/;"	c
Minus	syntaxtree/Minus.java	/^	public Minus(int l, int r, Exp ll, Exp rr)$/;"	m	class:Minus
Minus	syntaxtree/Minus.java	/^public class Minus extends Exp$/;"	c
MoveCall	canon/Canon.java	/^    MoveCall(tree.TEMP d, tree.CALL s)$/;"	m	class:MoveCall
MoveCall	canon/Canon.java	/^class MoveCall extends tree.Stm$/;"	c
NAME	tree/NAME.java	/^    public NAME(Label l)$/;"	m	class:NAME
NAME	tree/NAME.java	/^public class NAME extends Exp$/;"	c
NE	tree/CJUMP.java	/^    public static final int NE = 1;$/;"	f	class:CJUMP
NewArray	syntaxtree/NewArray.java	/^	public NewArray(int l, int r, Exp s)$/;"	m	class:NewArray
NewArray	syntaxtree/NewArray.java	/^public class NewArray extends Exp$/;"	c
NewObject	syntaxtree/NewObject.java	/^	public NewObject(int l, int r, Identifier c) {$/;"	m	class:NewObject
NewObject	syntaxtree/NewObject.java	/^public class NewObject extends Exp$/;"	c
Node	graph/Node.java	/^    private Node()$/;"	m	class:Node	file:
Node	graph/Node.java	/^    public Node(Graph g)$/;"	m	class:Node
Node	graph/Node.java	/^public class Node$/;"	c
Node	minijava/node/Node.java	/^public abstract class Node implements Switchable, Cloneable$/;"	c
Not	syntaxtree/Not.java	/^	public Not(int l, int r, Exp e) {$/;"	m	class:Not
Not	syntaxtree/Not.java	/^public class Not extends Exp$/;"	c
Nx	translate/Nx.java	/^    public Nx(Stm s)$/;"	m	class:Nx
Nx	translate/Nx.java	/^class Nx extends Exp$/;"	c
OPER	assem/OPER.java	/^    public OPER(String a, List<Temp> d, List<Temp> s)$/;"	m	class:OPER
OPER	assem/OPER.java	/^    public OPER(String a, List<Temp> d, List<Temp> s, List<Label> j)$/;"	m	class:OPER
OPER	assem/OPER.java	/^public class OPER extends Instr$/;"	c
OR	tree/BINOP.java	/^    public static final int OR = 5;$/;"	f	class:BINOP
PClassdecl	minijava/node/PClassdecl.java	/^public abstract class PClassdecl extends Node$/;"	c
PExp	minijava/node/PExp.java	/^public abstract class PExp extends Node$/;"	c
PFormal	minijava/node/PFormal.java	/^public abstract class PFormal extends Node$/;"	c
PLUS	tree/BINOP.java	/^    public static final int PLUS = 0;$/;"	f	class:BINOP
PMainclass	minijava/node/PMainclass.java	/^public abstract class PMainclass extends Node$/;"	c
PMethoddecl	minijava/node/PMethoddecl.java	/^public abstract class PMethoddecl extends Node$/;"	c
PProgram	minijava/node/PProgram.java	/^public abstract class PProgram extends Node$/;"	c
PStatement	minijava/node/PStatement.java	/^public abstract class PStatement extends Node$/;"	c
PType	minijava/node/PType.java	/^public abstract class PType extends Node$/;"	c
PVardecl	minijava/node/PVardecl.java	/^public abstract class PVardecl extends Node$/;"	c
Parser	minijava/parser/Parser.java	/^public class Parser$/;"	c
ParserException	minijava/parser/ParserException.java	/^public class ParserException extends Exception$/;"	c
Plus	syntaxtree/Plus.java	/^	public Plus(int l, int r, Exp ll, Exp rr) {$/;"	m	class:Plus
Plus	syntaxtree/Plus.java	/^public class Plus extends Exp$/;"	c
PrettyPrint	minijava/PrettyPrint.java	/^    public PrettyPrint()$/;"	m	class:PrettyPrint
PrettyPrint	minijava/PrettyPrint.java	/^    public PrettyPrint(PrintStream p)$/;"	m	class:PrettyPrint
PrettyPrint	minijava/PrettyPrint.java	/^public class PrettyPrint extends DepthFirstAdapter$/;"	c
PrettyPrint	syntaxtree/PrettyPrint.java	/^	public PrettyPrint(PrintStream p)$/;"	m	class:PrettyPrint
PrettyPrint	syntaxtree/PrettyPrint.java	/^    public PrettyPrint()$/;"	m	class:PrettyPrint
PrettyPrint	syntaxtree/PrettyPrint.java	/^public class PrettyPrint implements Visitor$/;"	c
Print	errors/ErrorEchoer.java	/^	public void Print(Object[] msg);$/;"	m	interface:ErrorEchoer
Print	main/SimpleError.java	/^    public void Print(Object[] msg)$/;"	m	class:SimpleError
Print	syntaxtree/Print.java	/^	public Print(int l, int r, Exp e)$/;"	m	class:Print
Print	syntaxtree/Print.java	/^public class Print extends Statement$/;"	c
PrintIR	tree/PrintIR.java	/^    public PrintIR(PrintStream o)$/;"	m	class:PrintIR
PrintIR	tree/PrintIR.java	/^public class PrintIR$/;"	c
Proc	frame/Proc.java	/^    public Proc()$/;"	m	class:Proc
Proc	frame/Proc.java	/^public abstract class Proc$/;"	c
ProcFrag	translate/ProcFrag.java	/^    public ProcFrag(Stm b, Frame f)$/;"	m	class:ProcFrag
ProcFrag	translate/ProcFrag.java	/^public class ProcFrag extends Frag$/;"	c
Program	syntaxtree/Program.java	/^	public Program(int l, int r, MainClass m, List<ClassDecl> cl)$/;"	m	class:Program
Program	syntaxtree/Program.java	/^public class Program extends Absyn$/;"	c
ProgramHandler	util/conversor/ProgramHandler.java	/^	private ProgramHandler()$/;"	m	class:ProgramHandler	file:
ProgramHandler	util/conversor/ProgramHandler.java	/^class ProgramHandler extends AnalysisAdapter$/;"	c
REDUCE	minijava/parser/Parser.java	/^    private final static int REDUCE = 1;$/;"	f	class:Parser	file:
RSHIFT	tree/BINOP.java	/^    public static final int RSHIFT = 7;$/;"	f	class:BINOP
RV	frame/Frame.java	/^    public abstract Temp RV();$/;"	m	class:Frame
RelCx	translate/RelCx.java	/^    RelCx(int o, Exp l, Exp r)$/;"	m	class:RelCx
RelCx	translate/RelCx.java	/^class RelCx extends Cx$/;"	c
Reset	errors/ErrorEchoer.java	/^	public void Reset();$/;"	m	interface:ErrorEchoer
Reset	main/SimpleError.java	/^    public void Reset()$/;"	m	class:SimpleError
ReversedDepthFirstAdapter	minijava/analysis/ReversedDepthFirstAdapter.java	/^public class ReversedDepthFirstAdapter extends AnalysisAdapter$/;"	c
SEQ	tree/SEQ.java	/^    public SEQ(Stm l, Stm r)$/;"	m	class:SEQ
SEQ	tree/SEQ.java	/^public class SEQ extends Stm$/;"	c
SHIFT	minijava/parser/Parser.java	/^    private final static int SHIFT = 0;$/;"	f	class:Parser	file:
SimpleError	main/SimpleError.java	/^    public SimpleError()$/;"	m	class:SimpleError
SimpleError	main/SimpleError.java	/^    public SimpleError(PrintStream e, String s)$/;"	m	class:SimpleError
SimpleError	main/SimpleError.java	/^    public SimpleError(PrintStream s)$/;"	m	class:SimpleError
SimpleError	main/SimpleError.java	/^    public SimpleError(String s)$/;"	m	class:SimpleError
SimpleError	main/SimpleError.java	/^class SimpleError implements ErrorEchoer$/;"	c
Start	minijava/node/Start.java	/^    public Start()$/;"	m	class:Start
Start	minijava/node/Start.java	/^public final class Start extends Node$/;"	c
State	minijava/lexer/Lexer.java	/^    public static class State$/;"	c	class:Lexer
State	minijava/parser/State.java	/^final class State$/;"	c
Statement	syntaxtree/Statement.java	/^	public Statement(int l, int r)$/;"	m	class:Statement
Statement	syntaxtree/Statement.java	/^public abstract class Statement extends Absyn$/;"	c
StatementHandler	translate/StatementHandler.java	/^    private StatementHandler(Frame f, Env e, ClassInfo c, MethodInfo m)$/;"	m	class:StatementHandler	file:
StatementHandler	translate/StatementHandler.java	/^class StatementHandler extends VisitorAdapter$/;"	c
StatementHandler	util/conversor/StatementHandler.java	/^	public StatementHandler()$/;"	m	class:StatementHandler
StatementHandler	util/conversor/StatementHandler.java	/^class StatementHandler extends AnalysisAdapter$/;"	c
StatementListHandler	translate/StatementListHandler.java	/^    private StatementListHandler()$/;"	m	class:StatementListHandler	file:
StatementListHandler	translate/StatementListHandler.java	/^class StatementListHandler$/;"	c
StatementListHandler	util/conversor/StatementListHandler.java	/^	private StatementListHandler()$/;"	m	class:StatementListHandler	file:
StatementListHandler	util/conversor/StatementListHandler.java	/^class StatementListHandler$/;"	c
Stm	tree/Stm.java	/^    public Stm()$/;"	m	class:Stm
Stm	tree/Stm.java	/^public abstract class Stm$/;"	c
StmExpList	canon/Canon.java	/^    StmExpList(tree.Stm s, List<tree.Exp> e)$/;"	m	class:StmExpList
StmExpList	canon/Canon.java	/^class StmExpList $/;"	c
Switch	minijava/node/Switch.java	/^public interface Switch$/;"	i
Switchable	minijava/node/Switchable.java	/^public interface Switchable$/;"	i
Symbol	symbol/Symbol.java	/^	private Symbol(String n)$/;"	m	class:Symbol	file:
Symbol	symbol/Symbol.java	/^public class Symbol$/;"	c
SyntaxTreeGenerator	util/conversor/SyntaxTreeGenerator.java	/^	private SyntaxTreeGenerator()$/;"	m	class:SyntaxTreeGenerator	file:
SyntaxTreeGenerator	util/conversor/SyntaxTreeGenerator.java	/^public final class SyntaxTreeGenerator$/;"	c
TAnd	minijava/node/TAnd.java	/^    public TAnd()$/;"	m	class:TAnd
TAnd	minijava/node/TAnd.java	/^    public TAnd(int line, int pos)$/;"	m	class:TAnd
TAnd	minijava/node/TAnd.java	/^public final class TAnd extends Token$/;"	c
TBlank	minijava/node/TBlank.java	/^    public TBlank(String text)$/;"	m	class:TBlank
TBlank	minijava/node/TBlank.java	/^    public TBlank(String text, int line, int pos)$/;"	m	class:TBlank
TBlank	minijava/node/TBlank.java	/^public final class TBlank extends Token$/;"	c
TBooleanType	minijava/node/TBooleanType.java	/^    public TBooleanType()$/;"	m	class:TBooleanType
TBooleanType	minijava/node/TBooleanType.java	/^    public TBooleanType(int line, int pos)$/;"	m	class:TBooleanType
TBooleanType	minijava/node/TBooleanType.java	/^public final class TBooleanType extends Token$/;"	c
TComma	minijava/node/TComma.java	/^    public TComma()$/;"	m	class:TComma
TComma	minijava/node/TComma.java	/^    public TComma(int line, int pos)$/;"	m	class:TComma
TComma	minijava/node/TComma.java	/^public final class TComma extends Token$/;"	c
TComment	minijava/node/TComment.java	/^    public TComment(String text)$/;"	m	class:TComment
TComment	minijava/node/TComment.java	/^    public TComment(String text, int line, int pos)$/;"	m	class:TComment
TComment	minijava/node/TComment.java	/^public final class TComment extends Token$/;"	c
TDot	minijava/node/TDot.java	/^    public TDot()$/;"	m	class:TDot
TDot	minijava/node/TDot.java	/^    public TDot(int line, int pos)$/;"	m	class:TDot
TDot	minijava/node/TDot.java	/^public final class TDot extends Token$/;"	c
TEMP	tree/TEMP.java	/^    public TEMP(Temp t)$/;"	m	class:TEMP
TEMP	tree/TEMP.java	/^public class TEMP extends Exp$/;"	c
TElse	minijava/node/TElse.java	/^    public TElse()$/;"	m	class:TElse
TElse	minijava/node/TElse.java	/^    public TElse(int line, int pos)$/;"	m	class:TElse
TElse	minijava/node/TElse.java	/^public final class TElse extends Token$/;"	c
TEqual	minijava/node/TEqual.java	/^    public TEqual()$/;"	m	class:TEqual
TEqual	minijava/node/TEqual.java	/^    public TEqual(int line, int pos)$/;"	m	class:TEqual
TEqual	minijava/node/TEqual.java	/^public final class TEqual extends Token$/;"	c
TExtends	minijava/node/TExtends.java	/^    public TExtends()$/;"	m	class:TExtends
TExtends	minijava/node/TExtends.java	/^    public TExtends(int line, int pos)$/;"	m	class:TExtends
TExtends	minijava/node/TExtends.java	/^public final class TExtends extends Token$/;"	c
TFalse	minijava/node/TFalse.java	/^    public TFalse()$/;"	m	class:TFalse
TFalse	minijava/node/TFalse.java	/^    public TFalse(int line, int pos)$/;"	m	class:TFalse
TFalse	minijava/node/TFalse.java	/^public final class TFalse extends Token$/;"	c
TIMES	tree/BINOP.java	/^    public static final int TIMES = 2;$/;"	f	class:BINOP
TId	minijava/node/TId.java	/^    public TId(String text)$/;"	m	class:TId
TId	minijava/node/TId.java	/^    public TId(String text, int line, int pos)$/;"	m	class:TId
TId	minijava/node/TId.java	/^public final class TId extends Token$/;"	c
TIf	minijava/node/TIf.java	/^    public TIf()$/;"	m	class:TIf
TIf	minijava/node/TIf.java	/^    public TIf(int line, int pos)$/;"	m	class:TIf
TIf	minijava/node/TIf.java	/^public final class TIf extends Token$/;"	c
TIntType	minijava/node/TIntType.java	/^    public TIntType()$/;"	m	class:TIntType
TIntType	minijava/node/TIntType.java	/^    public TIntType(int line, int pos)$/;"	m	class:TIntType
TIntType	minijava/node/TIntType.java	/^public final class TIntType extends Token$/;"	c
TInteger	minijava/node/TInteger.java	/^    public TInteger(String text)$/;"	m	class:TInteger
TInteger	minijava/node/TInteger.java	/^    public TInteger(String text, int line, int pos)$/;"	m	class:TInteger
TInteger	minijava/node/TInteger.java	/^public final class TInteger extends Token$/;"	c
TLcurly	minijava/node/TLcurly.java	/^    public TLcurly()$/;"	m	class:TLcurly
TLcurly	minijava/node/TLcurly.java	/^    public TLcurly(int line, int pos)$/;"	m	class:TLcurly
TLcurly	minijava/node/TLcurly.java	/^public final class TLcurly extends Token$/;"	c
TLength	minijava/node/TLength.java	/^    public TLength()$/;"	m	class:TLength
TLength	minijava/node/TLength.java	/^    public TLength(int line, int pos)$/;"	m	class:TLength
TLength	minijava/node/TLength.java	/^public final class TLength extends Token$/;"	c
TLess	minijava/node/TLess.java	/^    public TLess()$/;"	m	class:TLess
TLess	minijava/node/TLess.java	/^    public TLess(int line, int pos)$/;"	m	class:TLess
TLess	minijava/node/TLess.java	/^public final class TLess extends Token$/;"	c
TLparen	minijava/node/TLparen.java	/^    public TLparen()$/;"	m	class:TLparen
TLparen	minijava/node/TLparen.java	/^    public TLparen(int line, int pos)$/;"	m	class:TLparen
TLparen	minijava/node/TLparen.java	/^public final class TLparen extends Token$/;"	c
TLsquare	minijava/node/TLsquare.java	/^    public TLsquare()$/;"	m	class:TLsquare
TLsquare	minijava/node/TLsquare.java	/^    public TLsquare(int line, int pos)$/;"	m	class:TLsquare
TLsquare	minijava/node/TLsquare.java	/^public final class TLsquare extends Token$/;"	c
TMain	minijava/node/TMain.java	/^    public TMain()$/;"	m	class:TMain
TMain	minijava/node/TMain.java	/^    public TMain(int line, int pos)$/;"	m	class:TMain
TMain	minijava/node/TMain.java	/^public final class TMain extends Token$/;"	c
TMinus	minijava/node/TMinus.java	/^    public TMinus()$/;"	m	class:TMinus
TMinus	minijava/node/TMinus.java	/^    public TMinus(int line, int pos)$/;"	m	class:TMinus
TMinus	minijava/node/TMinus.java	/^public final class TMinus extends Token$/;"	c
TMul	minijava/node/TMul.java	/^    public TMul()$/;"	m	class:TMul
TMul	minijava/node/TMul.java	/^    public TMul(int line, int pos)$/;"	m	class:TMul
TMul	minijava/node/TMul.java	/^public final class TMul extends Token$/;"	c
TNew	minijava/node/TNew.java	/^    public TNew()$/;"	m	class:TNew
TNew	minijava/node/TNew.java	/^    public TNew(int line, int pos)$/;"	m	class:TNew
TNew	minijava/node/TNew.java	/^public final class TNew extends Token$/;"	c
TNot	minijava/node/TNot.java	/^    public TNot()$/;"	m	class:TNot
TNot	minijava/node/TNot.java	/^    public TNot(int line, int pos)$/;"	m	class:TNot
TNot	minijava/node/TNot.java	/^public final class TNot extends Token$/;"	c
TPlus	minijava/node/TPlus.java	/^    public TPlus()$/;"	m	class:TPlus
TPlus	minijava/node/TPlus.java	/^    public TPlus(int line, int pos)$/;"	m	class:TPlus
TPlus	minijava/node/TPlus.java	/^public final class TPlus extends Token$/;"	c
TPrint	minijava/node/TPrint.java	/^    public TPrint()$/;"	m	class:TPrint
TPrint	minijava/node/TPrint.java	/^    public TPrint(int line, int pos)$/;"	m	class:TPrint
TPrint	minijava/node/TPrint.java	/^public final class TPrint extends Token$/;"	c
TPublic	minijava/node/TPublic.java	/^    public TPublic()$/;"	m	class:TPublic
TPublic	minijava/node/TPublic.java	/^    public TPublic(int line, int pos)$/;"	m	class:TPublic
TPublic	minijava/node/TPublic.java	/^public final class TPublic extends Token$/;"	c
TRcurly	minijava/node/TRcurly.java	/^    public TRcurly()$/;"	m	class:TRcurly
TRcurly	minijava/node/TRcurly.java	/^    public TRcurly(int line, int pos)$/;"	m	class:TRcurly
TRcurly	minijava/node/TRcurly.java	/^public final class TRcurly extends Token$/;"	c
TReturn	minijava/node/TReturn.java	/^    public TReturn()$/;"	m	class:TReturn
TReturn	minijava/node/TReturn.java	/^    public TReturn(int line, int pos)$/;"	m	class:TReturn
TReturn	minijava/node/TReturn.java	/^public final class TReturn extends Token$/;"	c
TRparen	minijava/node/TRparen.java	/^    public TRparen()$/;"	m	class:TRparen
TRparen	minijava/node/TRparen.java	/^    public TRparen(int line, int pos)$/;"	m	class:TRparen
TRparen	minijava/node/TRparen.java	/^public final class TRparen extends Token$/;"	c
TRsquare	minijava/node/TRsquare.java	/^    public TRsquare()$/;"	m	class:TRsquare
TRsquare	minijava/node/TRsquare.java	/^    public TRsquare(int line, int pos)$/;"	m	class:TRsquare
TRsquare	minijava/node/TRsquare.java	/^public final class TRsquare extends Token$/;"	c
TSemicolon	minijava/node/TSemicolon.java	/^    public TSemicolon()$/;"	m	class:TSemicolon
TSemicolon	minijava/node/TSemicolon.java	/^    public TSemicolon(int line, int pos)$/;"	m	class:TSemicolon
TSemicolon	minijava/node/TSemicolon.java	/^public final class TSemicolon extends Token$/;"	c
TStringType	minijava/node/TStringType.java	/^    public TStringType()$/;"	m	class:TStringType
TStringType	minijava/node/TStringType.java	/^    public TStringType(int line, int pos)$/;"	m	class:TStringType
TStringType	minijava/node/TStringType.java	/^public final class TStringType extends Token$/;"	c
TTclass	minijava/node/TTclass.java	/^    public TTclass()$/;"	m	class:TTclass
TTclass	minijava/node/TTclass.java	/^    public TTclass(int line, int pos)$/;"	m	class:TTclass
TTclass	minijava/node/TTclass.java	/^public final class TTclass extends Token$/;"	c
TThis	minijava/node/TThis.java	/^    public TThis()$/;"	m	class:TThis
TThis	minijava/node/TThis.java	/^    public TThis(int line, int pos)$/;"	m	class:TThis
TThis	minijava/node/TThis.java	/^public final class TThis extends Token$/;"	c
TTrue	minijava/node/TTrue.java	/^    public TTrue()$/;"	m	class:TTrue
TTrue	minijava/node/TTrue.java	/^    public TTrue(int line, int pos)$/;"	m	class:TTrue
TTrue	minijava/node/TTrue.java	/^public final class TTrue extends Token$/;"	c
TWhile	minijava/node/TWhile.java	/^    public TWhile()$/;"	m	class:TWhile
TWhile	minijava/node/TWhile.java	/^    public TWhile(int line, int pos)$/;"	m	class:TWhile
TWhile	minijava/node/TWhile.java	/^public final class TWhile extends Token$/;"	c
Table	symbol/Table.java	/^	public Table()$/;"	m	class:Table
Table	symbol/Table.java	/^public class Table<B>$/;"	c
Targets	assem/Targets.java	/^    public Targets(List<Label> l)$/;"	m	class:Targets
Targets	assem/Targets.java	/^public class Targets$/;"	c
Temp	temp/Temp.java	/^    public Temp()$/;"	m	class:Temp
Temp	temp/Temp.java	/^public class Temp$/;"	c
TempMap	temp/TempMap.java	/^public interface TempMap$/;"	i
TestAst	minijava/TestAst.java	/^public class TestAst { $/;"	c
TestLexer	minijava/TestLexer.java	/^public class TestLexer{ $/;"	c
TestParser	minijava/TestParser.java	/^public class TestParser { $/;"	c
This	syntaxtree/This.java	/^	public This(int l, int r) $/;"	m	class:This
This	syntaxtree/This.java	/^public class This extends Exp$/;"	c
Times	syntaxtree/Times.java	/^	public Times(int l, int r, Exp ll, Exp rr)$/;"	m	class:Times
Times	syntaxtree/Times.java	/^public class Times extends Exp$/;"	c
Token	minijava/node/Token.java	/^public abstract class Token extends Node$/;"	c
TokenIndex	minijava/parser/TokenIndex.java	/^class TokenIndex extends AnalysisAdapter$/;"	c
TraceSchedule	canon/TraceSchedule.java	/^    public TraceSchedule(BasicBlocks b)$/;"	m	class:TraceSchedule
TraceSchedule	canon/TraceSchedule.java	/^public class TraceSchedule$/;"	c
Translate	translate/Translate.java	/^    private Translate()$/;"	m	class:Translate	file:
Translate	translate/Translate.java	/^public class Translate$/;"	c
Translation	minijava/Translation.java	/^class Translation extends DepthFirstAdapter { $/;"	c
True	syntaxtree/True.java	/^	public True(int l, int r)$/;"	m	class:True
True	syntaxtree/True.java	/^public class True extends Exp$/;"	c
Type	syntaxtree/Type.java	/^	public Type(int l, int r)$/;"	m	class:Type
Type	syntaxtree/Type.java	/^public abstract class Type extends Absyn$/;"	c
TypeCheck	semant/TypeChecker.java	/^    public static Env TypeCheck(ErrorEchoer err, Program p)$/;"	m	class:TypeChecker
TypeChecker	semant/TypeChecker.java	/^    private TypeChecker()$/;"	m	class:TypeChecker	file:
TypeChecker	semant/TypeChecker.java	/^public class TypeChecker$/;"	c
TypeHandler	util/conversor/TypeHandler.java	/^	private TypeHandler()$/;"	m	class:TypeHandler	file:
TypeHandler	util/conversor/TypeHandler.java	/^class TypeHandler extends AnalysisAdapter$/;"	c
TypeVisitor	visitor/TypeVisitor.java	/^public interface TypeVisitor$/;"	i
TypeVisitorAdapter	syntaxtree/TypeVisitorAdapter.java	/^	public TypeVisitorAdapter()$/;"	m	class:TypeVisitorAdapter
TypeVisitorAdapter	syntaxtree/TypeVisitorAdapter.java	/^public class TypeVisitorAdapter implements TypeVisitor$/;"	c
UGE	tree/CJUMP.java	/^    public static final int UGE = 9;$/;"	f	class:CJUMP
UGT	tree/CJUMP.java	/^    public static final int UGT = 8;$/;"	f	class:CJUMP
ULE	tree/CJUMP.java	/^    public static final int ULE = 7;$/;"	f	class:CJUMP
ULT	tree/CJUMP.java	/^    public static final int ULT = 6;$/;"	f	class:CJUMP
UglyPrint	minijava/UglyPrint.java	/^	public UglyPrint()$/;"	m	class:UglyPrint
UglyPrint	minijava/UglyPrint.java	/^public class UglyPrint extends DepthFirstAdapter$/;"	c
VTableBuilder	translate/VTableBuilder.java	/^    private VTableBuilder(Env e)$/;"	m	class:VTableBuilder	file:
VTableBuilder	translate/VTableBuilder.java	/^class VTableBuilder extends VisitorAdapter$/;"	c
VarDecl	syntaxtree/VarDecl.java	/^	public VarDecl(int l, int r, Type t, Identifier n)$/;"	m	class:VarDecl
VarDecl	syntaxtree/VarDecl.java	/^public class VarDecl extends Absyn$/;"	c
VarHandler	util/conversor/VarHandler.java	/^	private VarHandler()$/;"	m	class:VarHandler	file:
VarHandler	util/conversor/VarHandler.java	/^class VarHandler extends AnalysisAdapter$/;"	c
VarInfo	symbol/VarInfo.java	/^	public VarInfo(Type t, Symbol s)$/;"	m	class:VarInfo
VarInfo	symbol/VarInfo.java	/^public class VarInfo$/;"	c
VarListHandler	util/conversor/VarListHandler.java	/^	private VarListHandler()$/;"	m	class:VarListHandler	file:
VarListHandler	util/conversor/VarListHandler.java	/^class VarListHandler$/;"	c
Visitable	visitor/Visitable.java	/^public interface Visitable$/;"	i
Visitor	visitor/Visitor.java	/^public interface Visitor$/;"	i
VisitorAdapter	syntaxtree/VisitorAdapter.java	/^	public VisitorAdapter()$/;"	m	class:VisitorAdapter
VisitorAdapter	syntaxtree/VisitorAdapter.java	/^public class VisitorAdapter implements Visitor$/;"	c
VtableFrag	translate/VtableFrag.java	/^    public VtableFrag(String n, String[] v)$/;"	m	class:VtableFrag
VtableFrag	translate/VtableFrag.java	/^public class VtableFrag extends Frag$/;"	c
Warning	errors/ErrorEchoer.java	/^	public void Warning(Absyn obj, Object[] msg);$/;"	m	interface:ErrorEchoer
Warning	main/SimpleError.java	/^    public void Warning(Absyn obj, Object[] msg)$/;"	m	class:SimpleError
WarningCount	errors/ErrorEchoer.java	/^	public int WarningCount();$/;"	m	interface:ErrorEchoer
WarningCount	main/SimpleError.java	/^    public int WarningCount()$/;"	m	class:SimpleError
While	syntaxtree/While.java	/^	public While(int l, int r, Exp c, Statement b)$/;"	m	class:While
While	syntaxtree/While.java	/^public class While extends Statement$/;"	c
XOR	tree/BINOP.java	/^    public static final int XOR = 9;$/;"	f	class:BINOP
_argid_	minijava/node/AMainclass.java	/^    private TId _argid_;$/;"	f	class:AMainclass	file:
_args_	minijava/node/ACallExp.java	/^    private final LinkedList<PExp> _args_ = new LinkedList<PExp>();$/;"	f	class:ACallExp	file:
_body_	minijava/node/AMethoddecl.java	/^    private final LinkedList<PStatement> _body_ = new LinkedList<PStatement>();$/;"	f	class:AMethoddecl	file:
_classdecl_	minijava/node/AProgram.java	/^    private final LinkedList<PClassdecl> _classdecl_ = new LinkedList<PClassdecl>();$/;"	f	class:AProgram	file:
_classid_	minijava/node/AMainclass.java	/^    private TId _classid_;$/;"	f	class:AMainclass	file:
_classname_	minijava/node/AClassdeclextendsClassdecl.java	/^    private TId _classname_;$/;"	f	class:AClassdeclextendsClassdecl	file:
_classname_	minijava/node/AClassdeclsimpleClassdecl.java	/^    private TId _classname_;$/;"	f	class:AClassdeclsimpleClassdecl	file:
_condition_	minijava/node/AIfStatement.java	/^    private PExp _condition_;$/;"	f	class:AIfStatement	file:
_elsestm_	minijava/node/AIfStatement.java	/^    private PStatement _elsestm_;$/;"	f	class:AIfStatement	file:
_eof_	minijava/node/Start.java	/^    private EOF _eof_;$/;"	f	class:Start	file:
_exp_	minijava/node/AArraylengthExp.java	/^    private PExp _exp_;$/;"	f	class:AArraylengthExp	file:
_exp_	minijava/node/ANewarrayExp.java	/^    private PExp _exp_;$/;"	f	class:ANewarrayExp	file:
_exp_	minijava/node/ANotExp.java	/^    private PExp _exp_;$/;"	f	class:ANotExp	file:
_exp_	minijava/node/APrintStatement.java	/^    private PExp _exp_;$/;"	f	class:APrintStatement	file:
_exp_	minijava/node/AWhileStatement.java	/^    private PExp _exp_;$/;"	f	class:AWhileStatement	file:
_formals_	minijava/node/AMethoddecl.java	/^    private final LinkedList<PFormal> _formals_ = new LinkedList<PFormal>();$/;"	f	class:AMethoddecl	file:
_id_	minijava/node/AArrayAssignStatement.java	/^    private TId _id_;$/;"	f	class:AArrayAssignStatement	file:
_id_	minijava/node/AAssignStatement.java	/^    private TId _id_;$/;"	f	class:AAssignStatement	file:
_id_	minijava/node/AFormal.java	/^    private TId _id_;$/;"	f	class:AFormal	file:
_id_	minijava/node/AIdentifierTypeType.java	/^    private TId _id_;$/;"	f	class:AIdentifierTypeType	file:
_id_	minijava/node/AIdentifierexpExp.java	/^    private TId _id_;$/;"	f	class:AIdentifierexpExp	file:
_id_	minijava/node/ANewobjectExp.java	/^    private TId _id_;$/;"	f	class:ANewobjectExp	file:
_ifstm_	minijava/node/AIfStatement.java	/^    private PStatement _ifstm_;$/;"	f	class:AIfStatement	file:
_indexexp_	minijava/node/AArrayAssignStatement.java	/^    private PExp _indexexp_;$/;"	f	class:AArrayAssignStatement	file:
_integer_	minijava/node/AIntegerliteralExp.java	/^    private TInteger _integer_;$/;"	f	class:AIntegerliteralExp	file:
_left_	minijava/node/AAndExp.java	/^    private PExp _left_;$/;"	f	class:AAndExp	file:
_left_	minijava/node/AArraylookupExp.java	/^    private PExp _left_;$/;"	f	class:AArraylookupExp	file:
_left_	minijava/node/ACallExp.java	/^    private PExp _left_;$/;"	f	class:ACallExp	file:
_left_	minijava/node/ALessthanExp.java	/^    private PExp _left_;$/;"	f	class:ALessthanExp	file:
_left_	minijava/node/AMinusExp.java	/^    private PExp _left_;$/;"	f	class:AMinusExp	file:
_left_	minijava/node/APlusExp.java	/^    private PExp _left_;$/;"	f	class:APlusExp	file:
_left_	minijava/node/ATimesExp.java	/^    private PExp _left_;$/;"	f	class:ATimesExp	file:
_locals_	minijava/node/AMethoddecl.java	/^    private final LinkedList<PVardecl> _locals_ = new LinkedList<PVardecl>();$/;"	f	class:AMethoddecl	file:
_mainclass_	minijava/node/AProgram.java	/^    private PMainclass _mainclass_;$/;"	f	class:AProgram	file:
_methodid_	minijava/node/AMethoddecl.java	/^    private TId _methodid_;$/;"	f	class:AMethoddecl	file:
_methods_	minijava/node/AClassdeclextendsClassdecl.java	/^    private final LinkedList<PMethoddecl> _methods_ = new LinkedList<PMethoddecl>();$/;"	f	class:AClassdeclextendsClassdecl	file:
_methods_	minijava/node/AClassdeclsimpleClassdecl.java	/^    private final LinkedList<PMethoddecl> _methods_ = new LinkedList<PMethoddecl>();$/;"	f	class:AClassdeclsimpleClassdecl	file:
_name_	minijava/node/ACallExp.java	/^    private TId _name_;$/;"	f	class:ACallExp	file:
_pProgram_	minijava/node/Start.java	/^    private PProgram _pProgram_;$/;"	f	class:Start	file:
_returnexp_	minijava/node/AMethoddecl.java	/^    private PExp _returnexp_;$/;"	f	class:AMethoddecl	file:
_returntype_	minijava/node/AMethoddecl.java	/^    private PType _returntype_;$/;"	f	class:AMethoddecl	file:
_right_	minijava/node/AAndExp.java	/^    private PExp _right_;$/;"	f	class:AAndExp	file:
_right_	minijava/node/AArraylookupExp.java	/^    private PExp _right_;$/;"	f	class:AArraylookupExp	file:
_right_	minijava/node/ALessthanExp.java	/^    private PExp _right_;$/;"	f	class:ALessthanExp	file:
_right_	minijava/node/AMinusExp.java	/^    private PExp _right_;$/;"	f	class:AMinusExp	file:
_right_	minijava/node/APlusExp.java	/^    private PExp _right_;$/;"	f	class:APlusExp	file:
_right_	minijava/node/ATimesExp.java	/^    private PExp _right_;$/;"	f	class:ATimesExp	file:
_rightexp_	minijava/node/AArrayAssignStatement.java	/^    private PExp _rightexp_;$/;"	f	class:AArrayAssignStatement	file:
_rightexp_	minijava/node/AAssignStatement.java	/^    private PExp _rightexp_;$/;"	f	class:AAssignStatement	file:
_statement_	minijava/node/ABlockStatement.java	/^    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();$/;"	f	class:ABlockStatement	file:
_statement_	minijava/node/AWhileStatement.java	/^    private PStatement _statement_;$/;"	f	class:AWhileStatement	file:
_stm_	minijava/node/AMainclass.java	/^    private PStatement _stm_;$/;"	f	class:AMainclass	file:
_super_	minijava/node/AClassdeclextendsClassdecl.java	/^    private TId _super_;$/;"	f	class:AClassdeclextendsClassdecl	file:
_type_	minijava/node/AFormal.java	/^    private PType _type_;$/;"	f	class:AFormal	file:
_varid_	minijava/node/AVardecl.java	/^    private TId _varid_;$/;"	f	class:AVardecl	file:
_vars_	minijava/node/AClassdeclextendsClassdecl.java	/^    private final LinkedList<PVardecl> _vars_ = new LinkedList<PVardecl>();$/;"	f	class:AClassdeclextendsClassdecl	file:
_vars_	minijava/node/AClassdeclsimpleClassdecl.java	/^    private final LinkedList<PVardecl> _vars_ = new LinkedList<PVardecl>();$/;"	f	class:AClassdeclsimpleClassdecl	file:
_vartype_	minijava/node/AVardecl.java	/^    private PType _vartype_;$/;"	f	class:AVardecl	file:
accept	minijava/lexer/Lexer.java	/^    private static int[][] accept;$/;"	f	class:Lexer	file:
accept	syntaxtree/Absyn.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Absyn
accept	syntaxtree/Absyn.java	/^	public void accept(Visitor v)$/;"	m	class:Absyn
accept	syntaxtree/And.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:And
accept	syntaxtree/And.java	/^	public void accept(Visitor v)$/;"	m	class:And
accept	syntaxtree/ArrayAssign.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:ArrayAssign
accept	syntaxtree/ArrayAssign.java	/^	public void accept(Visitor v)$/;"	m	class:ArrayAssign
accept	syntaxtree/ArrayLength.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:ArrayLength
accept	syntaxtree/ArrayLength.java	/^	public void accept(Visitor v)$/;"	m	class:ArrayLength
accept	syntaxtree/ArrayLookup.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:ArrayLookup
accept	syntaxtree/ArrayLookup.java	/^	public void accept(Visitor v)$/;"	m	class:ArrayLookup
accept	syntaxtree/Assign.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Assign
accept	syntaxtree/Assign.java	/^	public void accept(Visitor v)$/;"	m	class:Assign
accept	syntaxtree/Block.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Block
accept	syntaxtree/Block.java	/^	public void accept(Visitor v)$/;"	m	class:Block
accept	syntaxtree/BooleanType.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:BooleanType
accept	syntaxtree/BooleanType.java	/^	public void accept(Visitor v)$/;"	m	class:BooleanType
accept	syntaxtree/Call.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Call
accept	syntaxtree/Call.java	/^	public void accept(Visitor v)$/;"	m	class:Call
accept	syntaxtree/ClassDeclExtends.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:ClassDeclExtends
accept	syntaxtree/ClassDeclExtends.java	/^	public void accept(Visitor v)$/;"	m	class:ClassDeclExtends
accept	syntaxtree/ClassDeclSimple.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:ClassDeclSimple
accept	syntaxtree/ClassDeclSimple.java	/^	public void accept(Visitor v)$/;"	m	class:ClassDeclSimple
accept	syntaxtree/Equal.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Equal
accept	syntaxtree/Equal.java	/^	public void accept(Visitor v)$/;"	m	class:Equal
accept	syntaxtree/False.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:False
accept	syntaxtree/False.java	/^	public void accept(Visitor v)$/;"	m	class:False
accept	syntaxtree/Formal.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Formal
accept	syntaxtree/Formal.java	/^	public void accept(Visitor v)$/;"	m	class:Formal
accept	syntaxtree/Identifier.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Identifier
accept	syntaxtree/Identifier.java	/^	public void accept(Visitor v)$/;"	m	class:Identifier
accept	syntaxtree/IdentifierExp.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:IdentifierExp
accept	syntaxtree/IdentifierExp.java	/^	public void accept(Visitor v)$/;"	m	class:IdentifierExp
accept	syntaxtree/IdentifierType.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:IdentifierType
accept	syntaxtree/IdentifierType.java	/^	public void accept(Visitor v)$/;"	m	class:IdentifierType
accept	syntaxtree/If.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:If
accept	syntaxtree/If.java	/^	public void accept(Visitor v)$/;"	m	class:If
accept	syntaxtree/IntArrayType.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:IntArrayType
accept	syntaxtree/IntArrayType.java	/^	public void accept(Visitor v)$/;"	m	class:IntArrayType
accept	syntaxtree/IntegerLiteral.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:IntegerLiteral
accept	syntaxtree/IntegerLiteral.java	/^	public void accept(Visitor v)$/;"	m	class:IntegerLiteral
accept	syntaxtree/IntegerType.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:IntegerType
accept	syntaxtree/IntegerType.java	/^	public void accept(Visitor v)$/;"	m	class:IntegerType
accept	syntaxtree/LessThan.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:LessThan
accept	syntaxtree/LessThan.java	/^	public void accept(Visitor v)$/;"	m	class:LessThan
accept	syntaxtree/MainClass.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:MainClass
accept	syntaxtree/MainClass.java	/^	public void accept(Visitor v)$/;"	m	class:MainClass
accept	syntaxtree/MethodDecl.java	/^	public void accept(Visitor v)$/;"	m	class:MethodDecl
accept	syntaxtree/MethodDecl.java	/^    public Type accept(TypeVisitor v)$/;"	m	class:MethodDecl
accept	syntaxtree/Minus.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Minus
accept	syntaxtree/Minus.java	/^	public void accept(Visitor v)$/;"	m	class:Minus
accept	syntaxtree/NewArray.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:NewArray
accept	syntaxtree/NewArray.java	/^	public void accept(Visitor v)$/;"	m	class:NewArray
accept	syntaxtree/NewObject.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:NewObject
accept	syntaxtree/NewObject.java	/^	public void accept(Visitor v)$/;"	m	class:NewObject
accept	syntaxtree/Not.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Not
accept	syntaxtree/Not.java	/^	public void accept(Visitor v)$/;"	m	class:Not
accept	syntaxtree/Plus.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Plus
accept	syntaxtree/Plus.java	/^	public void accept(Visitor v)$/;"	m	class:Plus
accept	syntaxtree/Print.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Print
accept	syntaxtree/Print.java	/^	public void accept(Visitor v)$/;"	m	class:Print
accept	syntaxtree/Program.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Program
accept	syntaxtree/Program.java	/^	public void accept(Visitor v)$/;"	m	class:Program
accept	syntaxtree/This.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:This
accept	syntaxtree/This.java	/^	public void accept(Visitor v)$/;"	m	class:This
accept	syntaxtree/Times.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:Times
accept	syntaxtree/Times.java	/^	public void accept(Visitor v)$/;"	m	class:Times
accept	syntaxtree/True.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:True
accept	syntaxtree/True.java	/^	public void accept(Visitor v)$/;"	m	class:True
accept	syntaxtree/VarDecl.java	/^	public void accept(Visitor v)$/;"	m	class:VarDecl
accept	syntaxtree/VarDecl.java	/^    public Type accept(TypeVisitor v)$/;"	m	class:VarDecl
accept	syntaxtree/While.java	/^	public Type accept(TypeVisitor v)$/;"	m	class:While
accept	syntaxtree/While.java	/^	public void accept(Visitor v)$/;"	m	class:While
accept	visitor/Visitable.java	/^	public Type accept(TypeVisitor v);$/;"	m	interface:Visitable
accept	visitor/Visitable.java	/^	public void accept(Visitor v);$/;"	m	interface:Visitable
access	symbol/VarInfo.java	/^    public Access access;$/;"	f	class:VarInfo
action	minijava/parser/Parser.java	/^    private final int[] action = new int[2];$/;"	f	class:Parser	file:
actionTable	minijava/parser/Parser.java	/^    private static int[][][] actionTable;$/;"	f	class:Parser	file:
actuals	syntaxtree/Call.java	/^	public List<Exp> actuals;$/;"	f	class:Call
addAttribute	symbol/ClassInfo.java	/^	public boolean addAttribute(VarInfo var)$/;"	m	class:ClassInfo
addEdge	graph/Graph.java	/^    public void addEdge(Node from, Node to)$/;"	m	class:Graph
addFormal	symbol/MethodInfo.java	/^	public boolean addFormal(VarInfo formal)$/;"	m	class:MethodInfo
addFrag	translate/IRBuilder.java	/^    private void addFrag(Frag f)$/;"	m	class:IRBuilder	file:
addFrag	translate/VTableBuilder.java	/^    private void addFrag(Frag f)$/;"	m	class:VTableBuilder	file:
addLocal	symbol/MethodInfo.java	/^	public boolean addLocal(VarInfo local)$/;"	m	class:MethodInfo
addMethod	symbol/ClassInfo.java	/^	public boolean addMethod(MethodInfo method)$/;"	m	class:ClassInfo
addStm	canon/BasicBlocks.java	/^    private void addStm(tree.Stm s)$/;"	m	class:BasicBlocks	file:
adj	graph/Node.java	/^    public List<Node> adj()$/;"	m	class:Node
adj	graph/Node.java	/^    public boolean adj(Node n)$/;"	m	class:Node
allocLocal	frame/Frame.java	/^    public abstract Access allocLocal(boolean escapes);$/;"	m	class:Frame
apply	minijava/node/AAndExp.java	/^    public void apply(Switch sw)$/;"	m	class:AAndExp
apply	minijava/node/AArrayAssignStatement.java	/^    public void apply(Switch sw)$/;"	m	class:AArrayAssignStatement
apply	minijava/node/AArraylengthExp.java	/^    public void apply(Switch sw)$/;"	m	class:AArraylengthExp
apply	minijava/node/AArraylookupExp.java	/^    public void apply(Switch sw)$/;"	m	class:AArraylookupExp
apply	minijava/node/AAssignStatement.java	/^    public void apply(Switch sw)$/;"	m	class:AAssignStatement
apply	minijava/node/ABlockStatement.java	/^    public void apply(Switch sw)$/;"	m	class:ABlockStatement
apply	minijava/node/ABooleanTypeType.java	/^    public void apply(Switch sw)$/;"	m	class:ABooleanTypeType
apply	minijava/node/ACallExp.java	/^    public void apply(Switch sw)$/;"	m	class:ACallExp
apply	minijava/node/AClassdeclextendsClassdecl.java	/^    public void apply(Switch sw)$/;"	m	class:AClassdeclextendsClassdecl
apply	minijava/node/AClassdeclsimpleClassdecl.java	/^    public void apply(Switch sw)$/;"	m	class:AClassdeclsimpleClassdecl
apply	minijava/node/AFalseExp.java	/^    public void apply(Switch sw)$/;"	m	class:AFalseExp
apply	minijava/node/AFormal.java	/^    public void apply(Switch sw)$/;"	m	class:AFormal
apply	minijava/node/AIdentifierTypeType.java	/^    public void apply(Switch sw)$/;"	m	class:AIdentifierTypeType
apply	minijava/node/AIdentifierexpExp.java	/^    public void apply(Switch sw)$/;"	m	class:AIdentifierexpExp
apply	minijava/node/AIfStatement.java	/^    public void apply(Switch sw)$/;"	m	class:AIfStatement
apply	minijava/node/AIntArrayTypeType.java	/^    public void apply(Switch sw)$/;"	m	class:AIntArrayTypeType
apply	minijava/node/AIntegerTypeType.java	/^    public void apply(Switch sw)$/;"	m	class:AIntegerTypeType
apply	minijava/node/AIntegerliteralExp.java	/^    public void apply(Switch sw)$/;"	m	class:AIntegerliteralExp
apply	minijava/node/ALessthanExp.java	/^    public void apply(Switch sw)$/;"	m	class:ALessthanExp
apply	minijava/node/AMainclass.java	/^    public void apply(Switch sw)$/;"	m	class:AMainclass
apply	minijava/node/AMethoddecl.java	/^    public void apply(Switch sw)$/;"	m	class:AMethoddecl
apply	minijava/node/AMinusExp.java	/^    public void apply(Switch sw)$/;"	m	class:AMinusExp
apply	minijava/node/ANewarrayExp.java	/^    public void apply(Switch sw)$/;"	m	class:ANewarrayExp
apply	minijava/node/ANewobjectExp.java	/^    public void apply(Switch sw)$/;"	m	class:ANewobjectExp
apply	minijava/node/ANotExp.java	/^    public void apply(Switch sw)$/;"	m	class:ANotExp
apply	minijava/node/APlusExp.java	/^    public void apply(Switch sw)$/;"	m	class:APlusExp
apply	minijava/node/APrintStatement.java	/^    public void apply(Switch sw)$/;"	m	class:APrintStatement
apply	minijava/node/AProgram.java	/^    public void apply(Switch sw)$/;"	m	class:AProgram
apply	minijava/node/AThisExp.java	/^    public void apply(Switch sw)$/;"	m	class:AThisExp
apply	minijava/node/ATimesExp.java	/^    public void apply(Switch sw)$/;"	m	class:ATimesExp
apply	minijava/node/ATrueExp.java	/^    public void apply(Switch sw)$/;"	m	class:ATrueExp
apply	minijava/node/AVardecl.java	/^    public void apply(Switch sw)$/;"	m	class:AVardecl
apply	minijava/node/AWhileStatement.java	/^    public void apply(Switch sw)$/;"	m	class:AWhileStatement
apply	minijava/node/EOF.java	/^    public void apply(Switch sw)$/;"	m	class:EOF
apply	minijava/node/Start.java	/^    public void apply(Switch sw)$/;"	m	class:Start
apply	minijava/node/Switchable.java	/^    void apply(Switch sw);$/;"	m	interface:Switchable
apply	minijava/node/TAnd.java	/^    public void apply(Switch sw)$/;"	m	class:TAnd
apply	minijava/node/TBlank.java	/^    public void apply(Switch sw)$/;"	m	class:TBlank
apply	minijava/node/TBooleanType.java	/^    public void apply(Switch sw)$/;"	m	class:TBooleanType
apply	minijava/node/TComma.java	/^    public void apply(Switch sw)$/;"	m	class:TComma
apply	minijava/node/TComment.java	/^    public void apply(Switch sw)$/;"	m	class:TComment
apply	minijava/node/TDot.java	/^    public void apply(Switch sw)$/;"	m	class:TDot
apply	minijava/node/TElse.java	/^    public void apply(Switch sw)$/;"	m	class:TElse
apply	minijava/node/TEqual.java	/^    public void apply(Switch sw)$/;"	m	class:TEqual
apply	minijava/node/TExtends.java	/^    public void apply(Switch sw)$/;"	m	class:TExtends
apply	minijava/node/TFalse.java	/^    public void apply(Switch sw)$/;"	m	class:TFalse
apply	minijava/node/TId.java	/^    public void apply(Switch sw)$/;"	m	class:TId
apply	minijava/node/TIf.java	/^    public void apply(Switch sw)$/;"	m	class:TIf
apply	minijava/node/TIntType.java	/^    public void apply(Switch sw)$/;"	m	class:TIntType
apply	minijava/node/TInteger.java	/^    public void apply(Switch sw)$/;"	m	class:TInteger
apply	minijava/node/TLcurly.java	/^    public void apply(Switch sw)$/;"	m	class:TLcurly
apply	minijava/node/TLength.java	/^    public void apply(Switch sw)$/;"	m	class:TLength
apply	minijava/node/TLess.java	/^    public void apply(Switch sw)$/;"	m	class:TLess
apply	minijava/node/TLparen.java	/^    public void apply(Switch sw)$/;"	m	class:TLparen
apply	minijava/node/TLsquare.java	/^    public void apply(Switch sw)$/;"	m	class:TLsquare
apply	minijava/node/TMain.java	/^    public void apply(Switch sw)$/;"	m	class:TMain
apply	minijava/node/TMinus.java	/^    public void apply(Switch sw)$/;"	m	class:TMinus
apply	minijava/node/TMul.java	/^    public void apply(Switch sw)$/;"	m	class:TMul
apply	minijava/node/TNew.java	/^    public void apply(Switch sw)$/;"	m	class:TNew
apply	minijava/node/TNot.java	/^    public void apply(Switch sw)$/;"	m	class:TNot
apply	minijava/node/TPlus.java	/^    public void apply(Switch sw)$/;"	m	class:TPlus
apply	minijava/node/TPrint.java	/^    public void apply(Switch sw)$/;"	m	class:TPrint
apply	minijava/node/TPublic.java	/^    public void apply(Switch sw)$/;"	m	class:TPublic
apply	minijava/node/TRcurly.java	/^    public void apply(Switch sw)$/;"	m	class:TRcurly
apply	minijava/node/TReturn.java	/^    public void apply(Switch sw)$/;"	m	class:TReturn
apply	minijava/node/TRparen.java	/^    public void apply(Switch sw)$/;"	m	class:TRparen
apply	minijava/node/TRsquare.java	/^    public void apply(Switch sw)$/;"	m	class:TRsquare
apply	minijava/node/TSemicolon.java	/^    public void apply(Switch sw)$/;"	m	class:TSemicolon
apply	minijava/node/TStringType.java	/^    public void apply(Switch sw)$/;"	m	class:TStringType
apply	minijava/node/TTclass.java	/^    public void apply(Switch sw)$/;"	m	class:TTclass
apply	minijava/node/TThis.java	/^    public void apply(Switch sw)$/;"	m	class:TThis
apply	minijava/node/TTrue.java	/^    public void apply(Switch sw)$/;"	m	class:TTrue
apply	minijava/node/TWhile.java	/^    public void apply(Switch sw)$/;"	m	class:TWhile
args	tree/CALL.java	/^    public List<Exp> args;$/;"	f	class:CALL
array	syntaxtree/ArrayLength.java	/^	public Exp array;$/;"	f	class:ArrayLength
array	syntaxtree/ArrayLookup.java	/^	public Exp array;$/;"	f	class:ArrayLookup
assem	assem/Instr.java	/^    public String assem;$/;"	f	class:Instr
assem	assem/Instr.java	/^package assem;$/;"	p
assem	assem/LABEL.java	/^package assem;$/;"	p
assem	assem/MOVE.java	/^package assem;$/;"	p
assem	assem/OPER.java	/^package assem;$/;"	p
assem	assem/Targets.java	/^package assem;$/;"	p
attributes	symbol/ClassInfo.java	/^	public Hashtable<Symbol, VarInfo> attributes;$/;"	f	class:ClassInfo
attributesNames	symbol/ClassInfo.java	/^	private HashSet<Symbol> attributesNames;$/;"	f	class:ClassInfo	file:
attributesOrder	symbol/ClassInfo.java	/^    public Vector<Symbol> attributesOrder;$/;"	f	class:ClassInfo
base	symbol/ClassInfo.java	/^	public ClassInfo base;$/;"	f	class:ClassInfo
beginNest	syntaxtree/PrettyPrint.java	/^	private void beginNest()$/;"	m	class:PrettyPrint	file:
beginScope	symbol/Table.java	/^	public void beginScope()$/;"	m	class:Table
binop	tree/BINOP.java	/^    public int binop;$/;"	f	class:BINOP
blocks	canon/BasicBlocks.java	/^    public List<List<tree.Stm>> blocks;$/;"	f	class:BasicBlocks
body	syntaxtree/Block.java	/^	public List<Statement> body;$/;"	f	class:Block
body	syntaxtree/MethodDecl.java	/^	public List<Statement> body;$/;"	f	class:MethodDecl
body	syntaxtree/While.java	/^	public Statement body;$/;"	f	class:While
body	translate/ProcFrag.java	/^    public Stm body;$/;"	f	class:ProcFrag
build	canon/Canon.java	/^    public tree.Stm build(List<tree.Exp> kids)$/;"	m	class:ExpCall
build	canon/Canon.java	/^    public tree.Stm build(List<tree.Exp> kids)$/;"	m	class:MoveCall
build	translate/IRBuilder.java	/^    static Frag build(Env e, Program p, Frame f)$/;"	m	class:IRBuilder
build	translate/VTableBuilder.java	/^    public static Frag build(Env e, Program p)$/;"	m	class:VTableBuilder
build	tree/BINOP.java	/^    public Exp build(List<Exp> kids)$/;"	m	class:BINOP
build	tree/CALL.java	/^    public Exp build(List<Exp> kids)$/;"	m	class:CALL
build	tree/CJUMP.java	/^    public Stm build(List<Exp> kids)$/;"	m	class:CJUMP
build	tree/CONST.java	/^    public Exp build(List<Exp> kids)$/;"	m	class:CONST
build	tree/ESEQ.java	/^    public Exp build(List<Exp> kids)$/;"	m	class:ESEQ
build	tree/EXPSTM.java	/^    public Stm build(List<Exp> kids)$/;"	m	class:EXPSTM
build	tree/Exp.java	/^    abstract public Exp build(List<Exp> kids);$/;"	m	class:Exp
build	tree/JUMP.java	/^    public Stm build(List<Exp> kids)$/;"	m	class:JUMP
build	tree/LABEL.java	/^    public Stm build(List<Exp> kids)$/;"	m	class:LABEL
build	tree/MEM.java	/^    public Exp build(List<Exp> kids)$/;"	m	class:MEM
build	tree/MOVE.java	/^    public Stm build(List<Exp> kids)$/;"	m	class:MOVE
build	tree/NAME.java	/^    public Exp build(List<Exp> kids)$/;"	m	class:NAME
build	tree/SEQ.java	/^    public Stm build(List<Exp> kids)$/;"	m	class:SEQ
build	tree/Stm.java	/^    abstract public Stm build(List<Exp> kids);$/;"	m	class:Stm
build	tree/TEMP.java	/^    public Exp build(List<Exp> kids)$/;"	m	class:TEMP
buildGraph	flow_graph/AssemFlowGraph.java	/^    private void buildGraph(List<Instr> ilist)$/;"	m	class:AssemFlowGraph	file:
call	canon/Canon.java	/^    tree.CALL call;$/;"	f	class:ExpCall
canon	canon/BasicBlocks.java	/^package canon;$/;"	p
canon	canon/Canon.java	/^package canon;$/;"	p
canon	canon/TraceSchedule.java	/^package canon;$/;"	p
caseAAndExp	minijava/PrettyPrint.java	/^    public void caseAAndExp(AAndExp node)$/;"	m	class:PrettyPrint
caseAAndExp	minijava/analysis/Analysis.java	/^    void caseAAndExp(AAndExp node);$/;"	m	interface:Analysis
caseAAndExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAAndExp(AAndExp node)$/;"	m	class:AnalysisAdapter
caseAAndExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAAndExp(AAndExp node)$/;"	m	class:DepthFirstAdapter
caseAAndExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAAndExp(AAndExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAAndExp	util/conversor/ExpHandler.java	/^	public void caseAAndExp(AAndExp node)$/;"	m	class:ExpHandler
caseAArrayAssignStatement	minijava/PrettyPrint.java	/^    public void caseAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:PrettyPrint
caseAArrayAssignStatement	minijava/analysis/Analysis.java	/^    void caseAArrayAssignStatement(AArrayAssignStatement node);$/;"	m	interface:Analysis
caseAArrayAssignStatement	minijava/analysis/AnalysisAdapter.java	/^    public void caseAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:AnalysisAdapter
caseAArrayAssignStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:DepthFirstAdapter
caseAArrayAssignStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:ReversedDepthFirstAdapter
caseAArrayAssignStatement	util/conversor/StatementHandler.java	/^	public void caseAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:StatementHandler
caseAArrayLengthExp	util/conversor/ExpHandler.java	/^	public void caseAArrayLengthExp(AArrayLengthExp node)$/;"	m	class:ExpHandler
caseAArrayLookupExp	util/conversor/ExpHandler.java	/^	public void caseAArrayLookupExp(AArrayLookupExp node)$/;"	m	class:ExpHandler
caseAArrayType	util/conversor/TypeHandler.java	/^	public void caseAArrayType(AArrayType node)$/;"	m	class:TypeHandler
caseAArraylengthExp	minijava/PrettyPrint.java	/^    public void caseAArraylengthExp(AArraylengthExp node)$/;"	m	class:PrettyPrint
caseAArraylengthExp	minijava/analysis/Analysis.java	/^    void caseAArraylengthExp(AArraylengthExp node);$/;"	m	interface:Analysis
caseAArraylengthExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAArraylengthExp(AArraylengthExp node)$/;"	m	class:AnalysisAdapter
caseAArraylengthExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAArraylengthExp(AArraylengthExp node)$/;"	m	class:DepthFirstAdapter
caseAArraylengthExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAArraylengthExp(AArraylengthExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAArraylookupExp	minijava/PrettyPrint.java	/^    public void caseAArraylookupExp(AArraylookupExp node)$/;"	m	class:PrettyPrint
caseAArraylookupExp	minijava/analysis/Analysis.java	/^    void caseAArraylookupExp(AArraylookupExp node);$/;"	m	interface:Analysis
caseAArraylookupExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAArraylookupExp(AArraylookupExp node)$/;"	m	class:AnalysisAdapter
caseAArraylookupExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAArraylookupExp(AArraylookupExp node)$/;"	m	class:DepthFirstAdapter
caseAArraylookupExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAArraylookupExp(AArraylookupExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAAssignStatement	minijava/PrettyPrint.java	/^    public void caseAAssignStatement(AAssignStatement node)$/;"	m	class:PrettyPrint
caseAAssignStatement	minijava/analysis/Analysis.java	/^    void caseAAssignStatement(AAssignStatement node);$/;"	m	interface:Analysis
caseAAssignStatement	minijava/analysis/AnalysisAdapter.java	/^    public void caseAAssignStatement(AAssignStatement node)$/;"	m	class:AnalysisAdapter
caseAAssignStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAAssignStatement(AAssignStatement node)$/;"	m	class:DepthFirstAdapter
caseAAssignStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAAssignStatement(AAssignStatement node)$/;"	m	class:ReversedDepthFirstAdapter
caseAAssignStatement	util/conversor/StatementHandler.java	/^	public void caseAAssignStatement(AAssignStatement node)$/;"	m	class:StatementHandler
caseABlockStatement	minijava/analysis/Analysis.java	/^    void caseABlockStatement(ABlockStatement node);$/;"	m	interface:Analysis
caseABlockStatement	minijava/analysis/AnalysisAdapter.java	/^    public void caseABlockStatement(ABlockStatement node)$/;"	m	class:AnalysisAdapter
caseABlockStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void caseABlockStatement(ABlockStatement node)$/;"	m	class:DepthFirstAdapter
caseABlockStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseABlockStatement(ABlockStatement node)$/;"	m	class:ReversedDepthFirstAdapter
caseABlockStatement	util/conversor/StatementHandler.java	/^	public void caseABlockStatement(ABlockStatement node)$/;"	m	class:StatementHandler
caseABooleanType	util/conversor/TypeHandler.java	/^	public void caseABooleanType(ABooleanType node)$/;"	m	class:TypeHandler
caseABooleanTypeType	minijava/analysis/Analysis.java	/^    void caseABooleanTypeType(ABooleanTypeType node);$/;"	m	interface:Analysis
caseABooleanTypeType	minijava/analysis/AnalysisAdapter.java	/^    public void caseABooleanTypeType(ABooleanTypeType node)$/;"	m	class:AnalysisAdapter
caseABooleanTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void caseABooleanTypeType(ABooleanTypeType node)$/;"	m	class:DepthFirstAdapter
caseABooleanTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseABooleanTypeType(ABooleanTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
caseACallExp	minijava/PrettyPrint.java	/^    public void caseACallExp(ACallExp node)$/;"	m	class:PrettyPrint
caseACallExp	minijava/analysis/Analysis.java	/^    void caseACallExp(ACallExp node);$/;"	m	interface:Analysis
caseACallExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseACallExp(ACallExp node)$/;"	m	class:AnalysisAdapter
caseACallExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseACallExp(ACallExp node)$/;"	m	class:DepthFirstAdapter
caseACallExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseACallExp(ACallExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseACallExp	util/conversor/ExpHandler.java	/^	public void caseACallExp(ACallExp node)$/;"	m	class:ExpHandler
caseAClassDecl	util/conversor/ClassHandler.java	/^	public void caseAClassDecl(AClassDecl node)$/;"	m	class:ClassHandler
caseAClassdeclextendsClassdecl	minijava/PrettyPrint.java	/^    public void caseAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node)$/;"	m	class:PrettyPrint
caseAClassdeclextendsClassdecl	minijava/analysis/Analysis.java	/^    void caseAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node);$/;"	m	interface:Analysis
caseAClassdeclextendsClassdecl	minijava/analysis/AnalysisAdapter.java	/^    public void caseAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node)$/;"	m	class:AnalysisAdapter
caseAClassdeclextendsClassdecl	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node)$/;"	m	class:DepthFirstAdapter
caseAClassdeclextendsClassdecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node)$/;"	m	class:ReversedDepthFirstAdapter
caseAClassdeclsimpleClassdecl	minijava/PrettyPrint.java	/^    public void caseAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node)$/;"	m	class:PrettyPrint
caseAClassdeclsimpleClassdecl	minijava/analysis/Analysis.java	/^    void caseAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node);$/;"	m	interface:Analysis
caseAClassdeclsimpleClassdecl	minijava/analysis/AnalysisAdapter.java	/^    public void caseAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node)$/;"	m	class:AnalysisAdapter
caseAClassdeclsimpleClassdecl	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node)$/;"	m	class:DepthFirstAdapter
caseAClassdeclsimpleClassdecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node)$/;"	m	class:ReversedDepthFirstAdapter
caseAEqualExp	util/conversor/ExpHandler.java	/^	public void caseAEqualExp(AEqualExp node)$/;"	m	class:ExpHandler
caseAFalseExp	minijava/analysis/Analysis.java	/^    void caseAFalseExp(AFalseExp node);$/;"	m	interface:Analysis
caseAFalseExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAFalseExp(AFalseExp node)$/;"	m	class:AnalysisAdapter
caseAFalseExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAFalseExp(AFalseExp node)$/;"	m	class:DepthFirstAdapter
caseAFalseExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAFalseExp(AFalseExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAFalseExp	util/conversor/ExpHandler.java	/^	public void caseAFalseExp(AFalseExp node)$/;"	m	class:ExpHandler
caseAFormal	minijava/analysis/Analysis.java	/^    void caseAFormal(AFormal node);$/;"	m	interface:Analysis
caseAFormal	minijava/analysis/AnalysisAdapter.java	/^    public void caseAFormal(AFormal node)$/;"	m	class:AnalysisAdapter
caseAFormal	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAFormal(AFormal node)$/;"	m	class:DepthFirstAdapter
caseAFormal	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAFormal(AFormal node)$/;"	m	class:ReversedDepthFirstAdapter
caseAFormal	util/conversor/FormalHandler.java	/^	public void caseAFormal(AFormal node)$/;"	m	class:FormalHandler
caseAIdentifierExp	util/conversor/ExpHandler.java	/^	public void caseAIdentifierExp(AIdentifierExp node)$/;"	m	class:ExpHandler
caseAIdentifierTypeType	minijava/analysis/Analysis.java	/^    void caseAIdentifierTypeType(AIdentifierTypeType node);$/;"	m	interface:Analysis
caseAIdentifierTypeType	minijava/analysis/AnalysisAdapter.java	/^    public void caseAIdentifierTypeType(AIdentifierTypeType node)$/;"	m	class:AnalysisAdapter
caseAIdentifierTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAIdentifierTypeType(AIdentifierTypeType node)$/;"	m	class:DepthFirstAdapter
caseAIdentifierTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAIdentifierTypeType(AIdentifierTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
caseAIdentifierexpExp	minijava/analysis/Analysis.java	/^    void caseAIdentifierexpExp(AIdentifierexpExp node);$/;"	m	interface:Analysis
caseAIdentifierexpExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAIdentifierexpExp(AIdentifierexpExp node)$/;"	m	class:AnalysisAdapter
caseAIdentifierexpExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAIdentifierexpExp(AIdentifierexpExp node)$/;"	m	class:DepthFirstAdapter
caseAIdentifierexpExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAIdentifierexpExp(AIdentifierexpExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAIfStatement	minijava/PrettyPrint.java	/^    public void caseAIfStatement(AIfStatement node)$/;"	m	class:PrettyPrint
caseAIfStatement	minijava/analysis/Analysis.java	/^    void caseAIfStatement(AIfStatement node);$/;"	m	interface:Analysis
caseAIfStatement	minijava/analysis/AnalysisAdapter.java	/^    public void caseAIfStatement(AIfStatement node)$/;"	m	class:AnalysisAdapter
caseAIfStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAIfStatement(AIfStatement node)$/;"	m	class:DepthFirstAdapter
caseAIfStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAIfStatement(AIfStatement node)$/;"	m	class:ReversedDepthFirstAdapter
caseAIfStatement	util/conversor/StatementHandler.java	/^	public void caseAIfStatement(AIfStatement node)$/;"	m	class:StatementHandler
caseAIntArrayTypeType	minijava/analysis/Analysis.java	/^    void caseAIntArrayTypeType(AIntArrayTypeType node);$/;"	m	interface:Analysis
caseAIntArrayTypeType	minijava/analysis/AnalysisAdapter.java	/^    public void caseAIntArrayTypeType(AIntArrayTypeType node)$/;"	m	class:AnalysisAdapter
caseAIntArrayTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAIntArrayTypeType(AIntArrayTypeType node)$/;"	m	class:DepthFirstAdapter
caseAIntArrayTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAIntArrayTypeType(AIntArrayTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
caseAIntType	util/conversor/TypeHandler.java	/^	public void caseAIntType(AIntType node)$/;"	m	class:TypeHandler
caseAIntegerLiteralExp	util/conversor/ExpHandler.java	/^	public void caseAIntegerLiteralExp(AIntegerLiteralExp node)$/;"	m	class:ExpHandler
caseAIntegerTypeType	minijava/analysis/Analysis.java	/^    void caseAIntegerTypeType(AIntegerTypeType node);$/;"	m	interface:Analysis
caseAIntegerTypeType	minijava/analysis/AnalysisAdapter.java	/^    public void caseAIntegerTypeType(AIntegerTypeType node)$/;"	m	class:AnalysisAdapter
caseAIntegerTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAIntegerTypeType(AIntegerTypeType node)$/;"	m	class:DepthFirstAdapter
caseAIntegerTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAIntegerTypeType(AIntegerTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
caseAIntegerliteralExp	minijava/analysis/Analysis.java	/^    void caseAIntegerliteralExp(AIntegerliteralExp node);$/;"	m	interface:Analysis
caseAIntegerliteralExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAIntegerliteralExp(AIntegerliteralExp node)$/;"	m	class:AnalysisAdapter
caseAIntegerliteralExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAIntegerliteralExp(AIntegerliteralExp node)$/;"	m	class:DepthFirstAdapter
caseAIntegerliteralExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAIntegerliteralExp(AIntegerliteralExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseALessThanExp	util/conversor/ExpHandler.java	/^	public void caseALessThanExp(ALessThanExp node)$/;"	m	class:ExpHandler
caseALessthanExp	minijava/PrettyPrint.java	/^    public void caseALessthanExp(ALessthanExp node)$/;"	m	class:PrettyPrint
caseALessthanExp	minijava/analysis/Analysis.java	/^    void caseALessthanExp(ALessthanExp node);$/;"	m	interface:Analysis
caseALessthanExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseALessthanExp(ALessthanExp node)$/;"	m	class:AnalysisAdapter
caseALessthanExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseALessthanExp(ALessthanExp node)$/;"	m	class:DepthFirstAdapter
caseALessthanExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseALessthanExp(ALessthanExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAMainClass	util/conversor/MainClassHandler.java	/^	public void caseAMainClass(AMainClass node)$/;"	m	class:MainClassHandler
caseAMainclass	minijava/analysis/Analysis.java	/^    void caseAMainclass(AMainclass node);$/;"	m	interface:Analysis
caseAMainclass	minijava/analysis/AnalysisAdapter.java	/^    public void caseAMainclass(AMainclass node)$/;"	m	class:AnalysisAdapter
caseAMainclass	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAMainclass(AMainclass node)$/;"	m	class:DepthFirstAdapter
caseAMainclass	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAMainclass(AMainclass node)$/;"	m	class:ReversedDepthFirstAdapter
caseAMethodDecl	util/conversor/MethodHandler.java	/^	public void caseAMethodDecl(AMethodDecl node)$/;"	m	class:MethodHandler
caseAMethoddecl	minijava/PrettyPrint.java	/^    public void caseAMethoddecl(AMethoddecl node)$/;"	m	class:PrettyPrint
caseAMethoddecl	minijava/analysis/Analysis.java	/^    void caseAMethoddecl(AMethoddecl node);$/;"	m	interface:Analysis
caseAMethoddecl	minijava/analysis/AnalysisAdapter.java	/^    public void caseAMethoddecl(AMethoddecl node)$/;"	m	class:AnalysisAdapter
caseAMethoddecl	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAMethoddecl(AMethoddecl node)$/;"	m	class:DepthFirstAdapter
caseAMethoddecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAMethoddecl(AMethoddecl node)$/;"	m	class:ReversedDepthFirstAdapter
caseAMinusExp	minijava/PrettyPrint.java	/^    public void caseAMinusExp(AMinusExp node)$/;"	m	class:PrettyPrint
caseAMinusExp	minijava/analysis/Analysis.java	/^    void caseAMinusExp(AMinusExp node);$/;"	m	interface:Analysis
caseAMinusExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAMinusExp(AMinusExp node)$/;"	m	class:AnalysisAdapter
caseAMinusExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAMinusExp(AMinusExp node)$/;"	m	class:DepthFirstAdapter
caseAMinusExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAMinusExp(AMinusExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAMinusExp	util/conversor/ExpHandler.java	/^	public void caseAMinusExp(AMinusExp node)$/;"	m	class:ExpHandler
caseANewArrayExp	util/conversor/ExpHandler.java	/^	public void caseANewArrayExp(ANewArrayExp node)$/;"	m	class:ExpHandler
caseANewObjectExp	util/conversor/ExpHandler.java	/^	public void caseANewObjectExp(ANewObjectExp node)$/;"	m	class:ExpHandler
caseANewarrayExp	minijava/analysis/Analysis.java	/^    void caseANewarrayExp(ANewarrayExp node);$/;"	m	interface:Analysis
caseANewarrayExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseANewarrayExp(ANewarrayExp node)$/;"	m	class:AnalysisAdapter
caseANewarrayExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseANewarrayExp(ANewarrayExp node)$/;"	m	class:DepthFirstAdapter
caseANewarrayExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseANewarrayExp(ANewarrayExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseANewobjectExp	minijava/analysis/Analysis.java	/^    void caseANewobjectExp(ANewobjectExp node);$/;"	m	interface:Analysis
caseANewobjectExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseANewobjectExp(ANewobjectExp node)$/;"	m	class:AnalysisAdapter
caseANewobjectExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseANewobjectExp(ANewobjectExp node)$/;"	m	class:DepthFirstAdapter
caseANewobjectExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseANewobjectExp(ANewobjectExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseANotExp	minijava/analysis/Analysis.java	/^    void caseANotExp(ANotExp node);$/;"	m	interface:Analysis
caseANotExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseANotExp(ANotExp node)$/;"	m	class:AnalysisAdapter
caseANotExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseANotExp(ANotExp node)$/;"	m	class:DepthFirstAdapter
caseANotExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseANotExp(ANotExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseANotExp	util/conversor/ExpHandler.java	/^	public void caseANotExp(ANotExp node)$/;"	m	class:ExpHandler
caseAObjectType	util/conversor/TypeHandler.java	/^	public void caseAObjectType(AObjectType node)$/;"	m	class:TypeHandler
caseAPlusExp	minijava/PrettyPrint.java	/^    public void caseAPlusExp(APlusExp node)$/;"	m	class:PrettyPrint
caseAPlusExp	minijava/analysis/Analysis.java	/^    void caseAPlusExp(APlusExp node);$/;"	m	interface:Analysis
caseAPlusExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAPlusExp(APlusExp node)$/;"	m	class:AnalysisAdapter
caseAPlusExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAPlusExp(APlusExp node)$/;"	m	class:DepthFirstAdapter
caseAPlusExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAPlusExp(APlusExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAPlusExp	util/conversor/ExpHandler.java	/^	public void caseAPlusExp(APlusExp node)$/;"	m	class:ExpHandler
caseAPrintStatement	minijava/PrettyPrint.java	/^    public void caseAPrintStatement(APrintStatement node)$/;"	m	class:PrettyPrint
caseAPrintStatement	minijava/analysis/Analysis.java	/^    void caseAPrintStatement(APrintStatement node);$/;"	m	interface:Analysis
caseAPrintStatement	minijava/analysis/AnalysisAdapter.java	/^    public void caseAPrintStatement(APrintStatement node)$/;"	m	class:AnalysisAdapter
caseAPrintStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAPrintStatement(APrintStatement node)$/;"	m	class:DepthFirstAdapter
caseAPrintStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAPrintStatement(APrintStatement node)$/;"	m	class:ReversedDepthFirstAdapter
caseAPrintStatement	util/conversor/StatementHandler.java	/^	public void caseAPrintStatement(APrintStatement node)$/;"	m	class:StatementHandler
caseAProgram	minijava/analysis/Analysis.java	/^    void caseAProgram(AProgram node);$/;"	m	interface:Analysis
caseAProgram	minijava/analysis/AnalysisAdapter.java	/^    public void caseAProgram(AProgram node)$/;"	m	class:AnalysisAdapter
caseAProgram	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAProgram(AProgram node)$/;"	m	class:DepthFirstAdapter
caseAProgram	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAProgram(AProgram node)$/;"	m	class:ReversedDepthFirstAdapter
caseAProgram	util/conversor/ProgramHandler.java	/^	public void caseAProgram(AProgram node)$/;"	m	class:ProgramHandler
caseAThisExp	minijava/analysis/Analysis.java	/^    void caseAThisExp(AThisExp node);$/;"	m	interface:Analysis
caseAThisExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseAThisExp(AThisExp node)$/;"	m	class:AnalysisAdapter
caseAThisExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAThisExp(AThisExp node)$/;"	m	class:DepthFirstAdapter
caseAThisExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAThisExp(AThisExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseAThisExp	util/conversor/ExpHandler.java	/^	public void caseAThisExp(AThisExp node)$/;"	m	class:ExpHandler
caseATimesExp	minijava/PrettyPrint.java	/^    public void caseATimesExp(ATimesExp node)$/;"	m	class:PrettyPrint
caseATimesExp	minijava/analysis/Analysis.java	/^    void caseATimesExp(ATimesExp node);$/;"	m	interface:Analysis
caseATimesExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseATimesExp(ATimesExp node)$/;"	m	class:AnalysisAdapter
caseATimesExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseATimesExp(ATimesExp node)$/;"	m	class:DepthFirstAdapter
caseATimesExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseATimesExp(ATimesExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseATimesExp	util/conversor/ExpHandler.java	/^	public void caseATimesExp(ATimesExp node)$/;"	m	class:ExpHandler
caseATrueExp	minijava/analysis/Analysis.java	/^    void caseATrueExp(ATrueExp node);$/;"	m	interface:Analysis
caseATrueExp	minijava/analysis/AnalysisAdapter.java	/^    public void caseATrueExp(ATrueExp node)$/;"	m	class:AnalysisAdapter
caseATrueExp	minijava/analysis/DepthFirstAdapter.java	/^    public void caseATrueExp(ATrueExp node)$/;"	m	class:DepthFirstAdapter
caseATrueExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseATrueExp(ATrueExp node)$/;"	m	class:ReversedDepthFirstAdapter
caseATrueExp	util/conversor/ExpHandler.java	/^	public void caseATrueExp(ATrueExp node)$/;"	m	class:ExpHandler
caseAVarDecl	util/conversor/VarHandler.java	/^	public void caseAVarDecl(AVarDecl node)$/;"	m	class:VarHandler
caseAVardecl	minijava/analysis/Analysis.java	/^    void caseAVardecl(AVardecl node);$/;"	m	interface:Analysis
caseAVardecl	minijava/analysis/AnalysisAdapter.java	/^    public void caseAVardecl(AVardecl node)$/;"	m	class:AnalysisAdapter
caseAVardecl	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAVardecl(AVardecl node)$/;"	m	class:DepthFirstAdapter
caseAVardecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAVardecl(AVardecl node)$/;"	m	class:ReversedDepthFirstAdapter
caseAWhileStatement	minijava/PrettyPrint.java	/^    public void caseAWhileStatement(AWhileStatement node)$/;"	m	class:PrettyPrint
caseAWhileStatement	minijava/analysis/Analysis.java	/^    void caseAWhileStatement(AWhileStatement node);$/;"	m	interface:Analysis
caseAWhileStatement	minijava/analysis/AnalysisAdapter.java	/^    public void caseAWhileStatement(AWhileStatement node)$/;"	m	class:AnalysisAdapter
caseAWhileStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void caseAWhileStatement(AWhileStatement node)$/;"	m	class:DepthFirstAdapter
caseAWhileStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseAWhileStatement(AWhileStatement node)$/;"	m	class:ReversedDepthFirstAdapter
caseAWhileStatement	util/conversor/StatementHandler.java	/^	public void caseAWhileStatement(AWhileStatement node)$/;"	m	class:StatementHandler
caseEOF	minijava/analysis/Analysis.java	/^    void caseEOF(EOF node);$/;"	m	interface:Analysis
caseEOF	minijava/analysis/AnalysisAdapter.java	/^    public void caseEOF(EOF node)$/;"	m	class:AnalysisAdapter
caseStart	minijava/analysis/Analysis.java	/^    void caseStart(Start node);$/;"	m	interface:Analysis
caseStart	minijava/analysis/AnalysisAdapter.java	/^    public void caseStart(Start node)$/;"	m	class:AnalysisAdapter
caseStart	minijava/analysis/DepthFirstAdapter.java	/^    public void caseStart(Start node)$/;"	m	class:DepthFirstAdapter
caseStart	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void caseStart(Start node)$/;"	m	class:ReversedDepthFirstAdapter
caseTAnd	minijava/analysis/Analysis.java	/^    void caseTAnd(TAnd node);$/;"	m	interface:Analysis
caseTAnd	minijava/analysis/AnalysisAdapter.java	/^    public void caseTAnd(TAnd node)$/;"	m	class:AnalysisAdapter
caseTBlank	minijava/analysis/Analysis.java	/^    void caseTBlank(TBlank node);$/;"	m	interface:Analysis
caseTBlank	minijava/analysis/AnalysisAdapter.java	/^    public void caseTBlank(TBlank node)$/;"	m	class:AnalysisAdapter
caseTBooleanType	minijava/analysis/Analysis.java	/^    void caseTBooleanType(TBooleanType node);$/;"	m	interface:Analysis
caseTBooleanType	minijava/analysis/AnalysisAdapter.java	/^    public void caseTBooleanType(TBooleanType node)$/;"	m	class:AnalysisAdapter
caseTComma	minijava/analysis/Analysis.java	/^    void caseTComma(TComma node);$/;"	m	interface:Analysis
caseTComma	minijava/analysis/AnalysisAdapter.java	/^    public void caseTComma(TComma node)$/;"	m	class:AnalysisAdapter
caseTComment	minijava/analysis/Analysis.java	/^    void caseTComment(TComment node);$/;"	m	interface:Analysis
caseTComment	minijava/analysis/AnalysisAdapter.java	/^    public void caseTComment(TComment node)$/;"	m	class:AnalysisAdapter
caseTDot	minijava/analysis/Analysis.java	/^    void caseTDot(TDot node);$/;"	m	interface:Analysis
caseTDot	minijava/analysis/AnalysisAdapter.java	/^    public void caseTDot(TDot node)$/;"	m	class:AnalysisAdapter
caseTElse	minijava/analysis/Analysis.java	/^    void caseTElse(TElse node);$/;"	m	interface:Analysis
caseTElse	minijava/analysis/AnalysisAdapter.java	/^    public void caseTElse(TElse node)$/;"	m	class:AnalysisAdapter
caseTEqual	minijava/analysis/Analysis.java	/^    void caseTEqual(TEqual node);$/;"	m	interface:Analysis
caseTEqual	minijava/analysis/AnalysisAdapter.java	/^    public void caseTEqual(TEqual node)$/;"	m	class:AnalysisAdapter
caseTExtends	minijava/analysis/Analysis.java	/^    void caseTExtends(TExtends node);$/;"	m	interface:Analysis
caseTExtends	minijava/analysis/AnalysisAdapter.java	/^    public void caseTExtends(TExtends node)$/;"	m	class:AnalysisAdapter
caseTFalse	minijava/analysis/Analysis.java	/^    void caseTFalse(TFalse node);$/;"	m	interface:Analysis
caseTFalse	minijava/analysis/AnalysisAdapter.java	/^    public void caseTFalse(TFalse node)$/;"	m	class:AnalysisAdapter
caseTId	minijava/analysis/Analysis.java	/^    void caseTId(TId node);$/;"	m	interface:Analysis
caseTId	minijava/analysis/AnalysisAdapter.java	/^    public void caseTId(TId node)$/;"	m	class:AnalysisAdapter
caseTIf	minijava/analysis/Analysis.java	/^    void caseTIf(TIf node);$/;"	m	interface:Analysis
caseTIf	minijava/analysis/AnalysisAdapter.java	/^    public void caseTIf(TIf node)$/;"	m	class:AnalysisAdapter
caseTIntType	minijava/analysis/Analysis.java	/^    void caseTIntType(TIntType node);$/;"	m	interface:Analysis
caseTIntType	minijava/analysis/AnalysisAdapter.java	/^    public void caseTIntType(TIntType node)$/;"	m	class:AnalysisAdapter
caseTInteger	minijava/analysis/Analysis.java	/^    void caseTInteger(TInteger node);$/;"	m	interface:Analysis
caseTInteger	minijava/analysis/AnalysisAdapter.java	/^    public void caseTInteger(TInteger node)$/;"	m	class:AnalysisAdapter
caseTLcurly	minijava/analysis/Analysis.java	/^    void caseTLcurly(TLcurly node);$/;"	m	interface:Analysis
caseTLcurly	minijava/analysis/AnalysisAdapter.java	/^    public void caseTLcurly(TLcurly node)$/;"	m	class:AnalysisAdapter
caseTLength	minijava/analysis/Analysis.java	/^    void caseTLength(TLength node);$/;"	m	interface:Analysis
caseTLength	minijava/analysis/AnalysisAdapter.java	/^    public void caseTLength(TLength node)$/;"	m	class:AnalysisAdapter
caseTLess	minijava/analysis/Analysis.java	/^    void caseTLess(TLess node);$/;"	m	interface:Analysis
caseTLess	minijava/analysis/AnalysisAdapter.java	/^    public void caseTLess(TLess node)$/;"	m	class:AnalysisAdapter
caseTLparen	minijava/analysis/Analysis.java	/^    void caseTLparen(TLparen node);$/;"	m	interface:Analysis
caseTLparen	minijava/analysis/AnalysisAdapter.java	/^    public void caseTLparen(TLparen node)$/;"	m	class:AnalysisAdapter
caseTLsquare	minijava/analysis/Analysis.java	/^    void caseTLsquare(TLsquare node);$/;"	m	interface:Analysis
caseTLsquare	minijava/analysis/AnalysisAdapter.java	/^    public void caseTLsquare(TLsquare node)$/;"	m	class:AnalysisAdapter
caseTMain	minijava/analysis/Analysis.java	/^    void caseTMain(TMain node);$/;"	m	interface:Analysis
caseTMain	minijava/analysis/AnalysisAdapter.java	/^    public void caseTMain(TMain node)$/;"	m	class:AnalysisAdapter
caseTMinus	minijava/analysis/Analysis.java	/^    void caseTMinus(TMinus node);$/;"	m	interface:Analysis
caseTMinus	minijava/analysis/AnalysisAdapter.java	/^    public void caseTMinus(TMinus node)$/;"	m	class:AnalysisAdapter
caseTMul	minijava/analysis/Analysis.java	/^    void caseTMul(TMul node);$/;"	m	interface:Analysis
caseTMul	minijava/analysis/AnalysisAdapter.java	/^    public void caseTMul(TMul node)$/;"	m	class:AnalysisAdapter
caseTNew	minijava/analysis/Analysis.java	/^    void caseTNew(TNew node);$/;"	m	interface:Analysis
caseTNew	minijava/analysis/AnalysisAdapter.java	/^    public void caseTNew(TNew node)$/;"	m	class:AnalysisAdapter
caseTNot	minijava/analysis/Analysis.java	/^    void caseTNot(TNot node);$/;"	m	interface:Analysis
caseTNot	minijava/analysis/AnalysisAdapter.java	/^    public void caseTNot(TNot node)$/;"	m	class:AnalysisAdapter
caseTNumber	minijava/Translation.java	/^  public void caseTNumber(TNumber node) {$/;"	m	class:Translation
caseTPlus	minijava/analysis/Analysis.java	/^    void caseTPlus(TPlus node);$/;"	m	interface:Analysis
caseTPlus	minijava/analysis/AnalysisAdapter.java	/^    public void caseTPlus(TPlus node)$/;"	m	class:AnalysisAdapter
caseTPrint	minijava/analysis/Analysis.java	/^    void caseTPrint(TPrint node);$/;"	m	interface:Analysis
caseTPrint	minijava/analysis/AnalysisAdapter.java	/^    public void caseTPrint(TPrint node)$/;"	m	class:AnalysisAdapter
caseTPublic	minijava/analysis/Analysis.java	/^    void caseTPublic(TPublic node);$/;"	m	interface:Analysis
caseTPublic	minijava/analysis/AnalysisAdapter.java	/^    public void caseTPublic(TPublic node)$/;"	m	class:AnalysisAdapter
caseTRcurly	minijava/analysis/Analysis.java	/^    void caseTRcurly(TRcurly node);$/;"	m	interface:Analysis
caseTRcurly	minijava/analysis/AnalysisAdapter.java	/^    public void caseTRcurly(TRcurly node)$/;"	m	class:AnalysisAdapter
caseTReturn	minijava/analysis/Analysis.java	/^    void caseTReturn(TReturn node);$/;"	m	interface:Analysis
caseTReturn	minijava/analysis/AnalysisAdapter.java	/^    public void caseTReturn(TReturn node)$/;"	m	class:AnalysisAdapter
caseTRparen	minijava/analysis/Analysis.java	/^    void caseTRparen(TRparen node);$/;"	m	interface:Analysis
caseTRparen	minijava/analysis/AnalysisAdapter.java	/^    public void caseTRparen(TRparen node)$/;"	m	class:AnalysisAdapter
caseTRsquare	minijava/analysis/Analysis.java	/^    void caseTRsquare(TRsquare node);$/;"	m	interface:Analysis
caseTRsquare	minijava/analysis/AnalysisAdapter.java	/^    public void caseTRsquare(TRsquare node)$/;"	m	class:AnalysisAdapter
caseTSemicolon	minijava/analysis/Analysis.java	/^    void caseTSemicolon(TSemicolon node);$/;"	m	interface:Analysis
caseTSemicolon	minijava/analysis/AnalysisAdapter.java	/^    public void caseTSemicolon(TSemicolon node)$/;"	m	class:AnalysisAdapter
caseTStringType	minijava/analysis/Analysis.java	/^    void caseTStringType(TStringType node);$/;"	m	interface:Analysis
caseTStringType	minijava/analysis/AnalysisAdapter.java	/^    public void caseTStringType(TStringType node)$/;"	m	class:AnalysisAdapter
caseTTclass	minijava/analysis/Analysis.java	/^    void caseTTclass(TTclass node);$/;"	m	interface:Analysis
caseTTclass	minijava/analysis/AnalysisAdapter.java	/^    public void caseTTclass(TTclass node)$/;"	m	class:AnalysisAdapter
caseTThis	minijava/analysis/Analysis.java	/^    void caseTThis(TThis node);$/;"	m	interface:Analysis
caseTThis	minijava/analysis/AnalysisAdapter.java	/^    public void caseTThis(TThis node)$/;"	m	class:AnalysisAdapter
caseTTrue	minijava/analysis/Analysis.java	/^    void caseTTrue(TTrue node);$/;"	m	interface:Analysis
caseTTrue	minijava/analysis/AnalysisAdapter.java	/^    public void caseTTrue(TTrue node)$/;"	m	class:AnalysisAdapter
caseTWhile	minijava/analysis/Analysis.java	/^    void caseTWhile(TWhile node);$/;"	m	interface:Analysis
caseTWhile	minijava/analysis/AnalysisAdapter.java	/^    public void caseTWhile(TWhile node)$/;"	m	class:AnalysisAdapter
cat	graph/Node.java	/^    List<Node> cat(List<Node> a, List<Node> b)$/;"	m	class:Node
check	graph/Graph.java	/^    void check(Node n)$/;"	m	class:Graph
cinfo	translate/ExpHandler.java	/^    private ClassInfo cinfo;$/;"	f	class:ExpHandler	file:
cinfo	translate/FrameBuilder.java	/^    private ClassInfo cinfo;$/;"	f	class:FrameBuilder	file:
cinfo	translate/IRBuilder.java	/^    private ClassInfo cinfo;$/;"	f	class:IRBuilder	file:
cinfo	translate/StatementHandler.java	/^    private ClassInfo cinfo;$/;"	f	class:StatementHandler	file:
classList	syntaxtree/Program.java	/^	public List<ClassDecl> classList;$/;"	f	class:Program
className	syntaxtree/MainClass.java	/^    public Identifier className;$/;"	f	class:MainClass
className	syntaxtree/NewObject.java	/^	public Identifier className;$/;"	f	class:NewObject
classes	semant/Env.java	/^	public Table<ClassInfo> classes; $/;"	f	class:Env
clone	minijava/node/AAndExp.java	/^    public Object clone()$/;"	m	class:AAndExp
clone	minijava/node/AArrayAssignStatement.java	/^    public Object clone()$/;"	m	class:AArrayAssignStatement
clone	minijava/node/AArraylengthExp.java	/^    public Object clone()$/;"	m	class:AArraylengthExp
clone	minijava/node/AArraylookupExp.java	/^    public Object clone()$/;"	m	class:AArraylookupExp
clone	minijava/node/AAssignStatement.java	/^    public Object clone()$/;"	m	class:AAssignStatement
clone	minijava/node/ABlockStatement.java	/^    public Object clone()$/;"	m	class:ABlockStatement
clone	minijava/node/ABooleanTypeType.java	/^    public Object clone()$/;"	m	class:ABooleanTypeType
clone	minijava/node/ACallExp.java	/^    public Object clone()$/;"	m	class:ACallExp
clone	minijava/node/AClassdeclextendsClassdecl.java	/^    public Object clone()$/;"	m	class:AClassdeclextendsClassdecl
clone	minijava/node/AClassdeclsimpleClassdecl.java	/^    public Object clone()$/;"	m	class:AClassdeclsimpleClassdecl
clone	minijava/node/AFalseExp.java	/^    public Object clone()$/;"	m	class:AFalseExp
clone	minijava/node/AFormal.java	/^    public Object clone()$/;"	m	class:AFormal
clone	minijava/node/AIdentifierTypeType.java	/^    public Object clone()$/;"	m	class:AIdentifierTypeType
clone	minijava/node/AIdentifierexpExp.java	/^    public Object clone()$/;"	m	class:AIdentifierexpExp
clone	minijava/node/AIfStatement.java	/^    public Object clone()$/;"	m	class:AIfStatement
clone	minijava/node/AIntArrayTypeType.java	/^    public Object clone()$/;"	m	class:AIntArrayTypeType
clone	minijava/node/AIntegerTypeType.java	/^    public Object clone()$/;"	m	class:AIntegerTypeType
clone	minijava/node/AIntegerliteralExp.java	/^    public Object clone()$/;"	m	class:AIntegerliteralExp
clone	minijava/node/ALessthanExp.java	/^    public Object clone()$/;"	m	class:ALessthanExp
clone	minijava/node/AMainclass.java	/^    public Object clone()$/;"	m	class:AMainclass
clone	minijava/node/AMethoddecl.java	/^    public Object clone()$/;"	m	class:AMethoddecl
clone	minijava/node/AMinusExp.java	/^    public Object clone()$/;"	m	class:AMinusExp
clone	minijava/node/ANewarrayExp.java	/^    public Object clone()$/;"	m	class:ANewarrayExp
clone	minijava/node/ANewobjectExp.java	/^    public Object clone()$/;"	m	class:ANewobjectExp
clone	minijava/node/ANotExp.java	/^    public Object clone()$/;"	m	class:ANotExp
clone	minijava/node/APlusExp.java	/^    public Object clone()$/;"	m	class:APlusExp
clone	minijava/node/APrintStatement.java	/^    public Object clone()$/;"	m	class:APrintStatement
clone	minijava/node/AProgram.java	/^    public Object clone()$/;"	m	class:AProgram
clone	minijava/node/AThisExp.java	/^    public Object clone()$/;"	m	class:AThisExp
clone	minijava/node/ATimesExp.java	/^    public Object clone()$/;"	m	class:ATimesExp
clone	minijava/node/ATrueExp.java	/^    public Object clone()$/;"	m	class:ATrueExp
clone	minijava/node/AVardecl.java	/^    public Object clone()$/;"	m	class:AVardecl
clone	minijava/node/AWhileStatement.java	/^    public Object clone()$/;"	m	class:AWhileStatement
clone	minijava/node/EOF.java	/^    public Object clone()$/;"	m	class:EOF
clone	minijava/node/Node.java	/^    public abstract Object clone();$/;"	m	class:Node
clone	minijava/node/Start.java	/^    public Object clone()$/;"	m	class:Start
clone	minijava/node/TAnd.java	/^    public Object clone()$/;"	m	class:TAnd
clone	minijava/node/TBlank.java	/^    public Object clone()$/;"	m	class:TBlank
clone	minijava/node/TBooleanType.java	/^    public Object clone()$/;"	m	class:TBooleanType
clone	minijava/node/TComma.java	/^    public Object clone()$/;"	m	class:TComma
clone	minijava/node/TComment.java	/^    public Object clone()$/;"	m	class:TComment
clone	minijava/node/TDot.java	/^    public Object clone()$/;"	m	class:TDot
clone	minijava/node/TElse.java	/^    public Object clone()$/;"	m	class:TElse
clone	minijava/node/TEqual.java	/^    public Object clone()$/;"	m	class:TEqual
clone	minijava/node/TExtends.java	/^    public Object clone()$/;"	m	class:TExtends
clone	minijava/node/TFalse.java	/^    public Object clone()$/;"	m	class:TFalse
clone	minijava/node/TId.java	/^    public Object clone()$/;"	m	class:TId
clone	minijava/node/TIf.java	/^    public Object clone()$/;"	m	class:TIf
clone	minijava/node/TIntType.java	/^    public Object clone()$/;"	m	class:TIntType
clone	minijava/node/TInteger.java	/^    public Object clone()$/;"	m	class:TInteger
clone	minijava/node/TLcurly.java	/^    public Object clone()$/;"	m	class:TLcurly
clone	minijava/node/TLength.java	/^    public Object clone()$/;"	m	class:TLength
clone	minijava/node/TLess.java	/^    public Object clone()$/;"	m	class:TLess
clone	minijava/node/TLparen.java	/^    public Object clone()$/;"	m	class:TLparen
clone	minijava/node/TLsquare.java	/^    public Object clone()$/;"	m	class:TLsquare
clone	minijava/node/TMain.java	/^    public Object clone()$/;"	m	class:TMain
clone	minijava/node/TMinus.java	/^    public Object clone()$/;"	m	class:TMinus
clone	minijava/node/TMul.java	/^    public Object clone()$/;"	m	class:TMul
clone	minijava/node/TNew.java	/^    public Object clone()$/;"	m	class:TNew
clone	minijava/node/TNot.java	/^    public Object clone()$/;"	m	class:TNot
clone	minijava/node/TPlus.java	/^    public Object clone()$/;"	m	class:TPlus
clone	minijava/node/TPrint.java	/^    public Object clone()$/;"	m	class:TPrint
clone	minijava/node/TPublic.java	/^    public Object clone()$/;"	m	class:TPublic
clone	minijava/node/TRcurly.java	/^    public Object clone()$/;"	m	class:TRcurly
clone	minijava/node/TReturn.java	/^    public Object clone()$/;"	m	class:TReturn
clone	minijava/node/TRparen.java	/^    public Object clone()$/;"	m	class:TRparen
clone	minijava/node/TRsquare.java	/^    public Object clone()$/;"	m	class:TRsquare
clone	minijava/node/TSemicolon.java	/^    public Object clone()$/;"	m	class:TSemicolon
clone	minijava/node/TStringType.java	/^    public Object clone()$/;"	m	class:TStringType
clone	minijava/node/TTclass.java	/^    public Object clone()$/;"	m	class:TTclass
clone	minijava/node/TThis.java	/^    public Object clone()$/;"	m	class:TThis
clone	minijava/node/TTrue.java	/^    public Object clone()$/;"	m	class:TTrue
clone	minijava/node/TWhile.java	/^    public Object clone()$/;"	m	class:TWhile
cloneList	minijava/node/Node.java	/^    protected <T> List<T> cloneList(List<T> list)$/;"	m	class:Node
cloneNode	minijava/node/Node.java	/^    protected <T extends Node> T cloneNode(T node)$/;"	m	class:Node
codegen	frame/Frame.java	/^    public abstract List<Instr> codegen(List<Stm> body);$/;"	m	class:Frame
comesFrom	graph/Node.java	/^    public boolean comesFrom(Node n)$/;"	m	class:Node
commute	canon/Canon.java	/^    static boolean commute(tree.Stm a, tree.Exp b)$/;"	m	class:Canon
cond	translate/IfThenElseExp.java	/^    Exp cond;$/;"	f	class:IfThenElseExp
condition	syntaxtree/If.java	/^	public Exp condition;$/;"	f	class:If
condition	syntaxtree/While.java	/^	public Exp condition;$/;"	f	class:While
convert	util/conversor/ClassHandler.java	/^	static ClassDecl convert(PClassDecl node)$/;"	m	class:ClassHandler
convert	util/conversor/ClassListHandler.java	/^	static List<ClassDecl> convert(LinkedList<PClassDecl> nodes)$/;"	m	class:ClassListHandler
convert	util/conversor/ExpHandler.java	/^	static Exp convert(PExp node)$/;"	m	class:ExpHandler
convert	util/conversor/ExpListHandler.java	/^	static List<Exp> convert(LinkedList<PExp> nodes)$/;"	m	class:ExpListHandler
convert	util/conversor/FormalHandler.java	/^	static Formal convert(PFormal node)$/;"	m	class:FormalHandler
convert	util/conversor/FormalListHandler.java	/^	static List<Formal> convert(LinkedList<PFormal> nodes)$/;"	m	class:FormalListHandler
convert	util/conversor/MainClassHandler.java	/^	static MainClass convert(PMainClass node)$/;"	m	class:MainClassHandler
convert	util/conversor/MethodHandler.java	/^	static MethodDecl convert(PMethodDecl node)$/;"	m	class:MethodHandler
convert	util/conversor/MethodListHandler.java	/^	static List<MethodDecl> convert(LinkedList<PMethodDecl> nodes)$/;"	m	class:MethodListHandler
convert	util/conversor/ProgramHandler.java	/^	static Program convert(PProgram node)$/;"	m	class:ProgramHandler
convert	util/conversor/StatementHandler.java	/^	static Statement convert(PStatement node)$/;"	m	class:StatementHandler
convert	util/conversor/StatementListHandler.java	/^	static List<Statement> convert(LinkedList<PStatement> nodes)$/;"	m	class:StatementListHandler
convert	util/conversor/SyntaxTreeGenerator.java	/^	public static Program convert(PProgram node)$/;"	m	class:SyntaxTreeGenerator
convert	util/conversor/SyntaxTreeGenerator.java	/^	public static Program convert(Start node)$/;"	m	class:SyntaxTreeGenerator
convert	util/conversor/TypeHandler.java	/^	static Type convert(PType node)$/;"	m	class:TypeHandler
convert	util/conversor/VarHandler.java	/^	static VarDecl convert(PVarDecl node)$/;"	m	class:VarHandler
convert	util/conversor/VarListHandler.java	/^	static List<VarDecl> convert(LinkedList<PVarDecl> nodes)$/;"	m	class:VarListHandler
converter	minijava/parser/Parser.java	/^    private final TokenIndex converter = new TokenIndex();$/;"	f	class:Parser	file:
count	temp/Label.java	/^    private static long count = 0;$/;"	f	class:Label	file:
count	temp/Temp.java	/^    private static long count = 0;$/;"	f	class:Temp	file:
cr	minijava/lexer/Lexer.java	/^    private boolean cr;$/;"	f	class:Lexer	file:
decorateName	symbol/MethodInfo.java	/^    public String decorateName()$/;"	m	class:MethodInfo
def	assem/Instr.java	/^    public abstract List<Temp> def();$/;"	m	class:Instr
def	assem/LABEL.java	/^    public List<Temp> def()$/;"	m	class:LABEL
def	assem/MOVE.java	/^    public List<Temp> def()$/;"	m	class:MOVE
def	assem/OPER.java	/^    public List<Temp> def()$/;"	m	class:OPER
def	flow_graph/AssemFlowGraph.java	/^    public List<Temp> def(Node node)$/;"	m	class:AssemFlowGraph
def	flow_graph/FlowGraph.java	/^    public abstract List<Temp> def(Node node);$/;"	m	class:FlowGraph
defaultIn	minijava/UglyPrint.java	/^	public void defaultIn(Node node)$/;"	m	class:UglyPrint
defaultOut	minijava/UglyPrint.java	/^	public void defaultOut(Node node)$/;"	m	class:UglyPrint
degree	graph/Node.java	/^    public int degree()$/;"	m	class:Node
delete	graph/Graph.java	/^    List<Node> delete(Node a, List<Node> l)$/;"	m	class:Graph
dict	symbol/Symbol.java	/^	private static Hashtable<String, Symbol> dict = new Hashtable<String, Symbol>();$/;"	f	class:Symbol	file:
doStms	canon/BasicBlocks.java	/^    private void doStms(List<tree.Stm> l)$/;"	m	class:BasicBlocks	file:
do_exp	canon/Canon.java	/^    static tree.ESEQ do_exp (tree.Exp e)$/;"	m	class:Canon
do_exp	canon/Canon.java	/^    static tree.ESEQ do_exp(tree.ESEQ e)$/;"	m	class:Canon
do_stm	canon/Canon.java	/^    static tree.Stm do_stm(tree.EXPSTM s)$/;"	m	class:Canon
do_stm	canon/Canon.java	/^    static tree.Stm do_stm(tree.MOVE s)$/;"	m	class:Canon
do_stm	canon/Canon.java	/^    static tree.Stm do_stm(tree.SEQ s)$/;"	m	class:Canon
do_stm	canon/Canon.java	/^    static tree.Stm do_stm(tree.Stm s)$/;"	m	class:Canon
done	canon/BasicBlocks.java	/^    public temp.Label done;$/;"	f	class:BasicBlocks
dst	assem/MOVE.java	/^    public List<Temp> dst;   $/;"	f	class:MOVE
dst	assem/OPER.java	/^    public List<Temp> dst;   $/;"	f	class:OPER
dst	canon/Canon.java	/^    tree.TEMP dst;$/;"	f	class:MoveCall
dst	tree/MOVE.java	/^    public Exp dst;$/;"	f	class:MOVE
e1	translate/IfThenElseExp.java	/^    Exp e1;$/;"	f	class:IfThenElseExp
e2	translate/IfThenElseExp.java	/^    Exp e2;$/;"	f	class:IfThenElseExp
ec	main/SimpleError.java	/^    private int ec;$/;"	f	class:SimpleError	file:
elseClause	syntaxtree/If.java	/^	public Statement elseClause;$/;"	f	class:If
endNest	syntaxtree/PrettyPrint.java	/^	private void endNest()$/;"	m	class:PrettyPrint	file:
endScope	symbol/Table.java	/^	public void endScope()$/;"	m	class:Table
env	symbol/Table.java	/^	private Stack<Hashtable<Symbol,B>> env;$/;"	f	class:Table	file:
env	translate/ExpHandler.java	/^    private Env env;$/;"	f	class:ExpHandler	file:
env	translate/FrameBuilder.java	/^    private Env env;$/;"	f	class:FrameBuilder	file:
env	translate/IRBuilder.java	/^    private Env env;$/;"	f	class:IRBuilder	file:
env	translate/StatementHandler.java	/^    private Env env;$/;"	f	class:StatementHandler	file:
env	translate/VTableBuilder.java	/^    private Env env;$/;"	f	class:VTableBuilder	file:
eof	minijava/lexer/Lexer.java	/^    private boolean eof;$/;"	f	class:Lexer	file:
err	main/SimpleError.java	/^    private PrintStream err;$/;"	f	class:SimpleError	file:
err	semant/Env.java	/^	public ErrorEchoer err;$/;"	f	class:Env
errorMessages	minijava/parser/Parser.java	/^    private static String[] errorMessages;$/;"	f	class:Parser	file:
errors	errors/ErrorEchoer.java	/^package errors;$/;"	p
errors	minijava/parser/Parser.java	/^    private static int[] errors;$/;"	f	class:Parser	file:
exp	frame/Access.java	/^    public abstract Exp exp(Exp framePtr);$/;"	m	class:Access
exp	syntaxtree/Assign.java	/^	public Exp exp;$/;"	f	class:Assign
exp	syntaxtree/Not.java	/^	public Exp exp;$/;"	f	class:Not
exp	syntaxtree/Print.java	/^	public Exp exp;$/;"	f	class:Print
exp	translate/Ex.java	/^    tree.Exp exp;$/;"	f	class:Ex
exp	tree/ESEQ.java	/^    public Exp exp;$/;"	f	class:ESEQ
exp	tree/EXPSTM.java	/^    public Exp exp;$/;"	f	class:EXPSTM
exp	tree/JUMP.java	/^    public Exp exp;$/;"	f	class:JUMP
exp	tree/MEM.java	/^    public Exp exp;$/;"	f	class:MEM
exps	canon/Canon.java	/^    List<tree.Exp> exps;$/;"	f	class:StmExpList
externalCall	frame/Frame.java	/^    public abstract Exp externalCall(String s, List<Exp> args);$/;"	m	class:Frame
f	translate/IfThenElseExp.java	/^    Label f;$/;"	f	class:IfThenElseExp
filter	minijava/lexer/Lexer.java	/^    protected void filter() throws LexerException, IOException$/;"	m	class:Lexer
flow_graph	flow_graph/AssemFlowGraph.java	/^package flow_graph;$/;"	p
flow_graph	flow_graph/FlowGraph.java	/^package flow_graph;$/;"	p
formals	frame/Frame.java	/^    public List<Access> formals;$/;"	f	class:Frame
formals	symbol/MethodInfo.java	/^	public List<VarInfo> formals;$/;"	f	class:MethodInfo
formals	syntaxtree/MethodDecl.java	/^	public List<Formal> formals;$/;"	f	class:MethodDecl
formalsNames	symbol/MethodInfo.java	/^	private HashSet<Symbol> formalsNames;$/;"	f	class:MethodInfo	file:
formalsTable	symbol/MethodInfo.java	/^    public Hashtable<Symbol, VarInfo> formalsTable;$/;"	f	class:MethodInfo
formalsTail	symbol/MethodInfo.java	/^    private List<VarInfo> formalsTail;$/;"	f	class:MethodInfo	file:
format	assem/Instr.java	/^    public String format(TempMap m)$/;"	m	class:Instr
frame	frame/Access.java	/^package frame;$/;"	p
frame	frame/Frame.java	/^package frame;$/;"	p
frame	frame/Proc.java	/^package frame;$/;"	p
frame	symbol/MethodInfo.java	/^    public Frame frame;$/;"	f	class:MethodInfo
frame	translate/ExpHandler.java	/^    private Frame frame;$/;"	f	class:ExpHandler	file:
frame	translate/IRBuilder.java	/^    private Frame frame;$/;"	f	class:IRBuilder	file:
frame	translate/ProcFrag.java	/^    public Frame frame;$/;"	f	class:ProcFrag
frame	translate/StatementHandler.java	/^    private Frame frame;$/;"	f	class:StatementHandler	file:
func	tree/CALL.java	/^    public Exp func;$/;"	f	class:CALL
get	symbol/Table.java	/^	public B get(Symbol key)$/;"	m	class:Table
getArgid	minijava/node/AMainclass.java	/^    public TId getArgid()$/;"	m	class:AMainclass
getArgs	minijava/node/ACallExp.java	/^    public LinkedList<PExp> getArgs()$/;"	m	class:ACallExp
getAttributeOffset	symbol/ClassInfo.java	/^    public int getAttributeOffset(Symbol name)$/;"	m	class:ClassInfo
getBody	frame/Proc.java	/^    public abstract List<Instr> getBody();$/;"	m	class:Proc
getBody	minijava/node/AMethoddecl.java	/^    public LinkedList<PStatement> getBody()$/;"	m	class:AMethoddecl
getChar	minijava/lexer/Lexer.java	/^    private int getChar() throws IOException$/;"	m	class:Lexer	file:
getClassdecl	minijava/node/AProgram.java	/^    public LinkedList<PClassdecl> getClassdecl()$/;"	m	class:AProgram
getClassid	minijava/node/AMainclass.java	/^    public TId getClassid()$/;"	m	class:AMainclass
getClassname	minijava/node/AClassdeclextendsClassdecl.java	/^    public TId getClassname()$/;"	m	class:AClassdeclextendsClassdecl
getClassname	minijava/node/AClassdeclsimpleClassdecl.java	/^    public TId getClassname()$/;"	m	class:AClassdeclsimpleClassdecl
getCondition	minijava/node/AIfStatement.java	/^    public PExp getCondition()$/;"	m	class:AIfStatement
getEOF	minijava/node/Start.java	/^    public EOF getEOF()$/;"	m	class:Start
getElsestm	minijava/node/AIfStatement.java	/^    public PStatement getElsestm()$/;"	m	class:AIfStatement
getEpilogue	frame/Proc.java	/^    public abstract List<Instr> getEpilogue();$/;"	m	class:Proc
getExp	minijava/node/AArraylengthExp.java	/^    public PExp getExp()$/;"	m	class:AArraylengthExp
getExp	minijava/node/ANewarrayExp.java	/^    public PExp getExp()$/;"	m	class:ANewarrayExp
getExp	minijava/node/ANotExp.java	/^    public PExp getExp()$/;"	m	class:ANotExp
getExp	minijava/node/APrintStatement.java	/^    public PExp getExp()$/;"	m	class:APrintStatement
getExp	minijava/node/AWhileStatement.java	/^    public PExp getExp()$/;"	m	class:AWhileStatement
getFooter	frame/Proc.java	/^    public abstract String getFooter();$/;"	m	class:Proc
getFormals	minijava/node/AMethoddecl.java	/^    public LinkedList<PFormal> getFormals()$/;"	m	class:AMethoddecl
getHeader	frame/Proc.java	/^    public abstract String getHeader();$/;"	m	class:Proc
getId	minijava/node/AArrayAssignStatement.java	/^    public TId getId()$/;"	m	class:AArrayAssignStatement
getId	minijava/node/AAssignStatement.java	/^    public TId getId()$/;"	m	class:AAssignStatement
getId	minijava/node/AFormal.java	/^    public TId getId()$/;"	m	class:AFormal
getId	minijava/node/AIdentifierTypeType.java	/^    public TId getId()$/;"	m	class:AIdentifierTypeType
getId	minijava/node/AIdentifierexpExp.java	/^    public TId getId()$/;"	m	class:AIdentifierexpExp
getId	minijava/node/ANewobjectExp.java	/^    public TId getId()$/;"	m	class:ANewobjectExp
getIfstm	minijava/node/AIfStatement.java	/^    public PStatement getIfstm()$/;"	m	class:AIfStatement
getIn	minijava/analysis/Analysis.java	/^    Object getIn(Node node);$/;"	m	interface:Analysis
getIn	minijava/analysis/AnalysisAdapter.java	/^    public Object getIn(Node node)$/;"	m	class:AnalysisAdapter
getIndexexp	minijava/node/AArrayAssignStatement.java	/^    public PExp getIndexexp()$/;"	m	class:AArrayAssignStatement
getInteger	minijava/node/AIntegerliteralExp.java	/^    public TInteger getInteger()$/;"	m	class:AIntegerliteralExp
getLast	canon/TraceSchedule.java	/^    List<tree.Stm> getLast(List<tree.Stm> block)$/;"	m	class:TraceSchedule
getLeft	minijava/node/AAndExp.java	/^    public PExp getLeft()$/;"	m	class:AAndExp
getLeft	minijava/node/AArraylookupExp.java	/^    public PExp getLeft()$/;"	m	class:AArraylookupExp
getLeft	minijava/node/ACallExp.java	/^    public PExp getLeft()$/;"	m	class:ACallExp
getLeft	minijava/node/ALessthanExp.java	/^    public PExp getLeft()$/;"	m	class:ALessthanExp
getLeft	minijava/node/AMinusExp.java	/^    public PExp getLeft()$/;"	m	class:AMinusExp
getLeft	minijava/node/APlusExp.java	/^    public PExp getLeft()$/;"	m	class:APlusExp
getLeft	minijava/node/ATimesExp.java	/^    public PExp getLeft()$/;"	m	class:ATimesExp
getLine	minijava/node/Token.java	/^    public int getLine()$/;"	m	class:Token
getLocals	minijava/node/AMethoddecl.java	/^    public LinkedList<PVardecl> getLocals()$/;"	m	class:AMethoddecl
getMainclass	minijava/node/AProgram.java	/^    public PMainclass getMainclass()$/;"	m	class:AProgram
getMethod	translate/ExpHandler.java	/^    private tree.Exp getMethod(tree.Exp obj, Call node, ClassInfo c, MethodInfo m, List<tree.Exp> args)$/;"	m	class:ExpHandler	file:
getMethodOffset	symbol/ClassInfo.java	/^    public int getMethodOffset(Symbol name)$/;"	m	class:ClassInfo
getMethodid	minijava/node/AMethoddecl.java	/^    public TId getMethodid()$/;"	m	class:AMethoddecl
getMethods	minijava/node/AClassdeclextendsClassdecl.java	/^    public LinkedList<PMethoddecl> getMethods()$/;"	m	class:AClassdeclextendsClassdecl
getMethods	minijava/node/AClassdeclsimpleClassdecl.java	/^    public LinkedList<PMethoddecl> getMethods()$/;"	m	class:AClassdeclsimpleClassdecl
getName	minijava/node/ACallExp.java	/^    public TId getName()$/;"	m	class:ACallExp
getNext	canon/TraceSchedule.java	/^    List<tree.Stm> getNext()$/;"	m	class:TraceSchedule
getOut	minijava/analysis/Analysis.java	/^    Object getOut(Node node);$/;"	m	interface:Analysis
getOut	minijava/analysis/AnalysisAdapter.java	/^    public Object getOut(Node node)$/;"	m	class:AnalysisAdapter
getPProgram	minijava/node/Start.java	/^    public PProgram getPProgram()$/;"	m	class:Start
getPos	minijava/node/Token.java	/^    public int getPos()$/;"	m	class:Token
getPrev	translate/StatementListHandler.java	/^    static List<Statement> getPrev(List<Statement> ls, List<Statement> actual)$/;"	m	class:StatementListHandler
getPrologue	frame/Proc.java	/^    public abstract List<Instr> getPrologue();$/;"	m	class:Proc
getReturnexp	minijava/node/AMethoddecl.java	/^    public PExp getReturnexp()$/;"	m	class:AMethoddecl
getReturntype	minijava/node/AMethoddecl.java	/^    public PType getReturntype()$/;"	m	class:AMethoddecl
getRight	minijava/node/AAndExp.java	/^    public PExp getRight()$/;"	m	class:AAndExp
getRight	minijava/node/AArraylookupExp.java	/^    public PExp getRight()$/;"	m	class:AArraylookupExp
getRight	minijava/node/ALessthanExp.java	/^    public PExp getRight()$/;"	m	class:ALessthanExp
getRight	minijava/node/AMinusExp.java	/^    public PExp getRight()$/;"	m	class:AMinusExp
getRight	minijava/node/APlusExp.java	/^    public PExp getRight()$/;"	m	class:APlusExp
getRight	minijava/node/ATimesExp.java	/^    public PExp getRight()$/;"	m	class:ATimesExp
getRightexp	minijava/node/AArrayAssignStatement.java	/^    public PExp getRightexp()$/;"	m	class:AArrayAssignStatement
getRightexp	minijava/node/AAssignStatement.java	/^    public PExp getRightexp()$/;"	m	class:AAssignStatement
getStatement	minijava/node/ABlockStatement.java	/^    public LinkedList<PStatement> getStatement()$/;"	m	class:ABlockStatement
getStatement	minijava/node/AWhileStatement.java	/^    public PStatement getStatement()$/;"	m	class:AWhileStatement
getStm	minijava/node/AMainclass.java	/^    public PStatement getStm()$/;"	m	class:AMainclass
getSuper	minijava/node/AClassdeclextendsClassdecl.java	/^    public TId getSuper()$/;"	m	class:AClassdeclextendsClassdecl
getText	minijava/lexer/Lexer.java	/^    private String getText(int acceptLength)$/;"	m	class:Lexer	file:
getText	minijava/node/Token.java	/^    public String getText()$/;"	m	class:Token
getToken	minijava/lexer/Lexer.java	/^    protected Token getToken() throws IOException, LexerException$/;"	m	class:Lexer
getToken	minijava/parser/ParserException.java	/^    public Token getToken()$/;"	m	class:ParserException
getType	minijava/node/AFormal.java	/^    public PType getType()$/;"	m	class:AFormal
getVariable	translate/ExpHandler.java	/^    private tree.Exp getVariable(Symbol name)$/;"	m	class:ExpHandler	file:
getVariable	translate/StatementHandler.java	/^    private tree.Exp getVariable(Symbol name)$/;"	m	class:StatementHandler	file:
getVarid	minijava/node/AVardecl.java	/^    public TId getVarid()$/;"	m	class:AVardecl
getVars	minijava/node/AClassdeclextendsClassdecl.java	/^    public LinkedList<PVardecl> getVars()$/;"	m	class:AClassdeclextendsClassdecl
getVars	minijava/node/AClassdeclsimpleClassdecl.java	/^    public LinkedList<PVardecl> getVars()$/;"	m	class:AClassdeclsimpleClassdecl
getVartype	minijava/node/AVardecl.java	/^    public PType getVartype()$/;"	m	class:AVardecl
goTo	minijava/parser/Parser.java	/^    private int goTo(int index)$/;"	m	class:Parser	file:
goesTo	graph/Node.java	/^    public boolean goesTo(Node n)$/;"	m	class:Node
gotoTable	minijava/lexer/Lexer.java	/^    private static int[][][][] gotoTable;$/;"	f	class:Lexer	file:
gotoTable	minijava/parser/Parser.java	/^    private static int[][][] gotoTable;$/;"	f	class:Parser	file:
graph	graph/Graph.java	/^package graph;$/;"	p
graph	graph/Node.java	/^package graph;$/;"	p
head	util/List.java	/^	public E head;$/;"	f	class:List
id	minijava/lexer/Lexer.java	/^        private int id;$/;"	f	class:Lexer.State	file:
id	minijava/lexer/Lexer.java	/^        public int id()$/;"	m	class:Lexer.State
ident	minijava/PrettyPrint.java	/^    private int ident;$/;"	f	class:PrettyPrint	file:
ident	minijava/UglyPrint.java	/^    private int ident;$/;"	f	class:UglyPrint	file:
ident	syntaxtree/PrettyPrint.java	/^	private int ident;$/;"	f	class:PrettyPrint	file:
ident	tree/PrintIR.java	/^    private void ident(int i)$/;"	m	class:PrintIR	file:
identLeft	minijava/PrettyPrint.java	/^    private void identLeft()$/;"	m	class:PrettyPrint	file:
identLeft	minijava/UglyPrint.java	/^    private void identLeft()$/;"	m	class:UglyPrint	file:
identRight	minijava/PrettyPrint.java	/^    private void identRight()$/;"	m	class:PrettyPrint	file:
identRight	minijava/UglyPrint.java	/^    private void identRight()$/;"	m	class:UglyPrint	file:
ifFalse	tree/CJUMP.java	/^    public Label ifFalse;$/;"	f	class:CJUMP
ifTrue	tree/CJUMP.java	/^    public Label ifTrue;$/;"	f	class:CJUMP
ignoredTokens	minijava/parser/Parser.java	/^    public final Analysis ignoredTokens = new AnalysisAdapter();$/;"	f	class:Parser
in	minijava/analysis/AnalysisAdapter.java	/^    private Hashtable<Node,Object> in;$/;"	f	class:AnalysisAdapter	file:
in	minijava/lexer/Lexer.java	/^    private PushbackReader in;$/;"	f	class:Lexer	file:
inAAndExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAAndExp(AAndExp node)$/;"	m	class:DepthFirstAdapter
inAAndExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAAndExp(AAndExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAArrayAssignStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void inAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:DepthFirstAdapter
inAArrayAssignStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:ReversedDepthFirstAdapter
inAArraylengthExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAArraylengthExp(AArraylengthExp node)$/;"	m	class:DepthFirstAdapter
inAArraylengthExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAArraylengthExp(AArraylengthExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAArraylookupExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAArraylookupExp(AArraylookupExp node)$/;"	m	class:DepthFirstAdapter
inAArraylookupExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAArraylookupExp(AArraylookupExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAAssignStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void inAAssignStatement(AAssignStatement node)$/;"	m	class:DepthFirstAdapter
inAAssignStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAAssignStatement(AAssignStatement node)$/;"	m	class:ReversedDepthFirstAdapter
inABlockStatement	minijava/PrettyPrint.java	/^    public void inABlockStatement(ABlockStatement node)$/;"	m	class:PrettyPrint
inABlockStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void inABlockStatement(ABlockStatement node)$/;"	m	class:DepthFirstAdapter
inABlockStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inABlockStatement(ABlockStatement node)$/;"	m	class:ReversedDepthFirstAdapter
inABooleanTypeType	minijava/PrettyPrint.java	/^    public void inABooleanTypeType(ABooleanTypeType node)$/;"	m	class:PrettyPrint
inABooleanTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void inABooleanTypeType(ABooleanTypeType node)$/;"	m	class:DepthFirstAdapter
inABooleanTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inABooleanTypeType(ABooleanTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
inACallExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inACallExp(ACallExp node)$/;"	m	class:DepthFirstAdapter
inACallExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inACallExp(ACallExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAClassdeclextendsClassdecl	minijava/analysis/DepthFirstAdapter.java	/^    public void inAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node)$/;"	m	class:DepthFirstAdapter
inAClassdeclextendsClassdecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node)$/;"	m	class:ReversedDepthFirstAdapter
inAClassdeclsimpleClassdecl	minijava/analysis/DepthFirstAdapter.java	/^    public void inAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node)$/;"	m	class:DepthFirstAdapter
inAClassdeclsimpleClassdecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node)$/;"	m	class:ReversedDepthFirstAdapter
inAFalseExp	minijava/PrettyPrint.java	/^	public void inAFalseExp(AFalseExp node)$/;"	m	class:PrettyPrint
inAFalseExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAFalseExp(AFalseExp node)$/;"	m	class:DepthFirstAdapter
inAFalseExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAFalseExp(AFalseExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAFormal	minijava/analysis/DepthFirstAdapter.java	/^    public void inAFormal(AFormal node)$/;"	m	class:DepthFirstAdapter
inAFormal	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAFormal(AFormal node)$/;"	m	class:ReversedDepthFirstAdapter
inAIdentifierTypeType	minijava/PrettyPrint.java	/^    public void inAIdentifierTypeType(AIdentifierTypeType node)$/;"	m	class:PrettyPrint
inAIdentifierTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void inAIdentifierTypeType(AIdentifierTypeType node)$/;"	m	class:DepthFirstAdapter
inAIdentifierTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAIdentifierTypeType(AIdentifierTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
inAIdentifierexpExp	minijava/PrettyPrint.java	/^	public void inAIdentifierexpExp(AIdentifierexpExp node)$/;"	m	class:PrettyPrint
inAIdentifierexpExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAIdentifierexpExp(AIdentifierexpExp node)$/;"	m	class:DepthFirstAdapter
inAIdentifierexpExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAIdentifierexpExp(AIdentifierexpExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAIfStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void inAIfStatement(AIfStatement node)$/;"	m	class:DepthFirstAdapter
inAIfStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAIfStatement(AIfStatement node)$/;"	m	class:ReversedDepthFirstAdapter
inAIntArrayTypeType	minijava/PrettyPrint.java	/^    public void inAIntArrayTypeType(AIntArrayTypeType node)$/;"	m	class:PrettyPrint
inAIntArrayTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void inAIntArrayTypeType(AIntArrayTypeType node)$/;"	m	class:DepthFirstAdapter
inAIntArrayTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAIntArrayTypeType(AIntArrayTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
inAIntegerTypeType	minijava/PrettyPrint.java	/^    public void inAIntegerTypeType(AIntegerTypeType node)$/;"	m	class:PrettyPrint
inAIntegerTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void inAIntegerTypeType(AIntegerTypeType node)$/;"	m	class:DepthFirstAdapter
inAIntegerTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAIntegerTypeType(AIntegerTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
inAIntegerliteralExp	minijava/PrettyPrint.java	/^    public void inAIntegerliteralExp(AIntegerliteralExp node)$/;"	m	class:PrettyPrint
inAIntegerliteralExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAIntegerliteralExp(AIntegerliteralExp node)$/;"	m	class:DepthFirstAdapter
inAIntegerliteralExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAIntegerliteralExp(AIntegerliteralExp node)$/;"	m	class:ReversedDepthFirstAdapter
inALessthanExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inALessthanExp(ALessthanExp node)$/;"	m	class:DepthFirstAdapter
inALessthanExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inALessthanExp(ALessthanExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAMainclass	minijava/PrettyPrint.java	/^    public void inAMainclass(AMainclass node)$/;"	m	class:PrettyPrint
inAMainclass	minijava/analysis/DepthFirstAdapter.java	/^    public void inAMainclass(AMainclass node)$/;"	m	class:DepthFirstAdapter
inAMainclass	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAMainclass(AMainclass node)$/;"	m	class:ReversedDepthFirstAdapter
inAMethoddecl	minijava/analysis/DepthFirstAdapter.java	/^    public void inAMethoddecl(AMethoddecl node)$/;"	m	class:DepthFirstAdapter
inAMethoddecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAMethoddecl(AMethoddecl node)$/;"	m	class:ReversedDepthFirstAdapter
inAMinusExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAMinusExp(AMinusExp node)$/;"	m	class:DepthFirstAdapter
inAMinusExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAMinusExp(AMinusExp node)$/;"	m	class:ReversedDepthFirstAdapter
inANewarrayExp	minijava/PrettyPrint.java	/^    public void inANewarrayExp(ANewarrayExp node)$/;"	m	class:PrettyPrint
inANewarrayExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inANewarrayExp(ANewarrayExp node)$/;"	m	class:DepthFirstAdapter
inANewarrayExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inANewarrayExp(ANewarrayExp node)$/;"	m	class:ReversedDepthFirstAdapter
inANewobjectExp	minijava/PrettyPrint.java	/^    public void inANewobjectExp(ANewobjectExp node)$/;"	m	class:PrettyPrint
inANewobjectExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inANewobjectExp(ANewobjectExp node)$/;"	m	class:DepthFirstAdapter
inANewobjectExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inANewobjectExp(ANewobjectExp node)$/;"	m	class:ReversedDepthFirstAdapter
inANotExp	minijava/PrettyPrint.java	/^    public void inANotExp(ANotExp node)$/;"	m	class:PrettyPrint
inANotExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inANotExp(ANotExp node)$/;"	m	class:DepthFirstAdapter
inANotExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inANotExp(ANotExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAPlusExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAPlusExp(APlusExp node)$/;"	m	class:DepthFirstAdapter
inAPlusExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAPlusExp(APlusExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAPrintStatement	minijava/PrettyPrint.java	/^    public void inAPrintStatement(APrintStatement node)$/;"	m	class:PrettyPrint
inAPrintStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void inAPrintStatement(APrintStatement node)$/;"	m	class:DepthFirstAdapter
inAPrintStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAPrintStatement(APrintStatement node)$/;"	m	class:ReversedDepthFirstAdapter
inAProgram	minijava/analysis/DepthFirstAdapter.java	/^    public void inAProgram(AProgram node)$/;"	m	class:DepthFirstAdapter
inAProgram	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAProgram(AProgram node)$/;"	m	class:ReversedDepthFirstAdapter
inAThisExp	minijava/PrettyPrint.java	/^    public void inAThisExp(AThisExp node)$/;"	m	class:PrettyPrint
inAThisExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inAThisExp(AThisExp node)$/;"	m	class:DepthFirstAdapter
inAThisExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAThisExp(AThisExp node)$/;"	m	class:ReversedDepthFirstAdapter
inATimesExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inATimesExp(ATimesExp node)$/;"	m	class:DepthFirstAdapter
inATimesExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inATimesExp(ATimesExp node)$/;"	m	class:ReversedDepthFirstAdapter
inATrueExp	minijava/PrettyPrint.java	/^    public void inATrueExp(ATrueExp node)$/;"	m	class:PrettyPrint
inATrueExp	minijava/analysis/DepthFirstAdapter.java	/^    public void inATrueExp(ATrueExp node)$/;"	m	class:DepthFirstAdapter
inATrueExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inATrueExp(ATrueExp node)$/;"	m	class:ReversedDepthFirstAdapter
inAVardecl	minijava/analysis/DepthFirstAdapter.java	/^    public void inAVardecl(AVardecl node)$/;"	m	class:DepthFirstAdapter
inAVardecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAVardecl(AVardecl node)$/;"	m	class:ReversedDepthFirstAdapter
inAWhileStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void inAWhileStatement(AWhileStatement node)$/;"	m	class:DepthFirstAdapter
inAWhileStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inAWhileStatement(AWhileStatement node)$/;"	m	class:ReversedDepthFirstAdapter
inDegree	graph/Node.java	/^    public int inDegree()$/;"	m	class:Node
inList	graph/Graph.java	/^    static boolean inList(Node a, List<Node> l)$/;"	m	class:Graph
inStart	minijava/analysis/DepthFirstAdapter.java	/^    public void inStart(Start node)$/;"	m	class:DepthFirstAdapter
inStart	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void inStart(Start node)$/;"	m	class:ReversedDepthFirstAdapter
index	minijava/parser/Parser.java	/^    private int index(Switchable token)$/;"	m	class:Parser	file:
index	minijava/parser/TokenIndex.java	/^    int index;$/;"	f	class:TokenIndex
index	syntaxtree/ArrayAssign.java	/^	public Exp index;$/;"	f	class:ArrayAssign
index	syntaxtree/ArrayLookup.java	/^	public Exp index;$/;"	f	class:ArrayLookup
instr	flow_graph/AssemFlowGraph.java	/^    public Instr instr(Node node)$/;"	m	class:AssemFlowGraph
isComparable	syntaxtree/IdentifierType.java	/^    public boolean isComparable(Type t)$/;"	m	class:IdentifierType
isComparable	syntaxtree/Type.java	/^    public boolean isComparable(Type t)$/;"	m	class:Type
isMove	flow_graph/AssemFlowGraph.java	/^    public boolean isMove(Node node)$/;"	m	class:AssemFlowGraph
isMove	flow_graph/FlowGraph.java	/^    public abstract boolean isMove(Node node);$/;"	m	class:FlowGraph
isNop	canon/Canon.java	/^    static boolean isNop(tree.Stm a)$/;"	m	class:Canon
join	translate/IfThenElseExp.java	/^    Label join;$/;"	f	class:IfThenElseExp
jump	assem/OPER.java	/^    public Targets jump;$/;"	f	class:OPER
jumps	assem/Instr.java	/^    public abstract Targets jumps();$/;"	m	class:Instr
jumps	assem/LABEL.java	/^    public Targets jumps()$/;"	m	class:LABEL
jumps	assem/MOVE.java	/^    public Targets jumps()$/;"	m	class:MOVE
jumps	assem/OPER.java	/^    public Targets jumps()$/;"	m	class:OPER
keys	symbol/Table.java	/^	public Enumeration<Symbol> keys()$/;"	m	class:Table
kids	canon/Canon.java	/^    public List<tree.Exp> kids()$/;"	m	class:ExpCall
kids	canon/Canon.java	/^    public List<tree.Exp> kids()$/;"	m	class:MoveCall
kids	tree/BINOP.java	/^    public List<Exp> kids()$/;"	m	class:BINOP
kids	tree/CALL.java	/^    public List<Exp> kids()$/;"	m	class:CALL
kids	tree/CJUMP.java	/^    public List<Exp> kids()$/;"	m	class:CJUMP
kids	tree/CONST.java	/^    public List<Exp> kids()$/;"	m	class:CONST
kids	tree/ESEQ.java	/^    public List<Exp> kids()$/;"	m	class:ESEQ
kids	tree/EXPSTM.java	/^    public List<Exp> kids()$/;"	m	class:EXPSTM
kids	tree/Exp.java	/^    abstract public List<Exp> kids();$/;"	m	class:Exp
kids	tree/JUMP.java	/^    public List<Exp> kids()$/;"	m	class:JUMP
kids	tree/LABEL.java	/^    public List<Exp> kids()$/;"	m	class:LABEL
kids	tree/MEM.java	/^    public List<Exp> kids()$/;"	m	class:MEM
kids	tree/MOVE.java	/^    public List<Exp> kids()$/;"	m	class:MOVE
kids	tree/NAME.java	/^    public List<Exp> kids()$/;"	m	class:NAME
kids	tree/SEQ.java	/^    public List<Exp> kids()$/;"	m	class:SEQ
kids	tree/Stm.java	/^    abstract public List<Exp> kids();$/;"	m	class:Stm
kids	tree/TEMP.java	/^    public List<Exp> kids()$/;"	m	class:TEMP
label	assem/LABEL.java	/^    public Label label;$/;"	f	class:LABEL
label	tree/LABEL.java	/^    public Label label;$/;"	f	class:LABEL
label	tree/NAME.java	/^    public Label label;$/;"	f	class:NAME
labels	assem/Targets.java	/^    public List<Label> labels;$/;"	f	class:Targets
lastBlock	canon/BasicBlocks.java	/^    private List<List<tree.Stm>> lastBlock;$/;"	f	class:BasicBlocks	file:
lastStm	canon/BasicBlocks.java	/^    private List<tree.Stm> lastStm;$/;"	f	class:BasicBlocks	file:
last_line	minijava/parser/Parser.java	/^    private int last_line;$/;"	f	class:Parser	file:
last_pos	minijava/parser/Parser.java	/^    private int last_pos;$/;"	f	class:Parser	file:
last_token	minijava/parser/Parser.java	/^    private Token last_token;$/;"	f	class:Parser	file:
left	translate/RelCx.java	/^    private Exp left;$/;"	f	class:RelCx	file:
left	tree/BINOP.java	/^    public Exp left;$/;"	f	class:BINOP
left	tree/CJUMP.java	/^    public Exp left;$/;"	f	class:CJUMP
left	tree/SEQ.java	/^    public Stm left;$/;"	f	class:SEQ
len	graph/Node.java	/^    int len(List<Node> l)$/;"	m	class:Node
lexer	minijava/parser/Parser.java	/^    private final Lexer lexer;$/;"	f	class:Parser	file:
lhs	syntaxtree/And.java	/^	public Exp lhs;$/;"	f	class:And
lhs	syntaxtree/Equal.java	/^	public Exp lhs;$/;"	f	class:Equal
lhs	syntaxtree/LessThan.java	/^	public Exp lhs;$/;"	f	class:LessThan
lhs	syntaxtree/Minus.java	/^	public Exp lhs;$/;"	f	class:Minus
lhs	syntaxtree/Plus.java	/^	public Exp lhs;$/;"	f	class:Plus
lhs	syntaxtree/Times.java	/^	public Exp lhs;$/;"	f	class:Times
line	minijava/lexer/Lexer.java	/^    private int line;$/;"	f	class:Lexer	file:
line	minijava/node/Token.java	/^    private int line;$/;"	f	class:Token	file:
line	syntaxtree/Absyn.java	/^	public int line;$/;"	f	class:Absyn
linear	canon/Canon.java	/^    static List<tree.Stm> linear(tree.SEQ s, List<tree.Stm> l)$/;"	m	class:Canon
linear	canon/Canon.java	/^    static List<tree.Stm> linear(tree.Stm s, List<tree.Stm> l)$/;"	m	class:Canon
linearize	canon/Canon.java	/^    static public List<tree.Stm> linearize(tree.Stm s)$/;"	m	class:Canon
locals	symbol/MethodInfo.java	/^	public List<VarInfo> locals;$/;"	f	class:MethodInfo
locals	syntaxtree/MethodDecl.java	/^	public List<VarDecl> locals;$/;"	f	class:MethodDecl
localsNames	symbol/MethodInfo.java	/^	private HashSet<Symbol> localsNames;$/;"	f	class:MethodInfo	file:
localsTable	symbol/MethodInfo.java	/^    public Hashtable<Symbol, VarInfo> localsTable;$/;"	f	class:MethodInfo
localsTail	symbol/MethodInfo.java	/^    private List<VarInfo> localsTail;$/;"	f	class:MethodInfo	file:
main	main/Main.java	/^	public static void main(String[] args) $/;"	m	class:Main
main	main/Main.java	/^package main;$/;"	p
main	main/SimpleError.java	/^package main;$/;"	p
main	minijava/TestAst.java	/^  public static void main(String[] arguments) { $/;"	m	class:TestAst
main	minijava/TestLexer.java	/^  public static void main(String[] arguments){ $/;"	m	class:TestLexer
main	minijava/TestParser.java	/^  public static void main(String[] arguments) { $/;"	m	class:TestParser
mainArgName	syntaxtree/MainClass.java	/^    public Identifier mainArgName;$/;"	f	class:MainClass
mainClass	syntaxtree/Program.java	/^	public MainClass mainClass;$/;"	f	class:Program
map	flow_graph/AssemFlowGraph.java	/^    private Hashtable<Node, Instr> map;$/;"	f	class:AssemFlowGraph	file:
map1	temp/CombineMap.java	/^    TempMap map1;$/;"	f	class:CombineMap
map2	temp/CombineMap.java	/^    TempMap map2;$/;"	f	class:CombineMap
method	syntaxtree/Call.java	/^	public Identifier method;$/;"	f	class:Call
methodList	syntaxtree/ClassDecl.java	/^    public List<MethodDecl> methodList;$/;"	f	class:ClassDecl
methods	symbol/ClassInfo.java	/^	public Hashtable<Symbol, MethodInfo> methods;$/;"	f	class:ClassInfo
methodsNames	symbol/ClassInfo.java	/^	private HashSet<Symbol> methodsNames;$/;"	f	class:ClassInfo	file:
minfo	translate/ExpHandler.java	/^    private MethodInfo minfo;$/;"	f	class:ExpHandler	file:
minfo	translate/FrameBuilder.java	/^    private MethodInfo minfo;$/;"	f	class:FrameBuilder	file:
minfo	translate/IRBuilder.java	/^    private MethodInfo minfo;$/;"	f	class:IRBuilder	file:
minfo	translate/StatementHandler.java	/^    private MethodInfo minfo;$/;"	f	class:StatementHandler	file:
minijava	minijava/PrettyPrint.java	/^package minijava;$/;"	p
minijava	minijava/TestAst.java	/^package minijava;$/;"	p
minijava	minijava/TestLexer.java	/^package minijava;$/;"	p
minijava	minijava/TestParser.java	/^package minijava;$/;"	p
minijava	minijava/Translation.java	/^package minijava;$/;"	p
minijava	minijava/UglyPrint.java	/^package minijava;$/;"	p
minijava.analysis	minijava/analysis/Analysis.java	/^package minijava.analysis;$/;"	p
minijava.analysis	minijava/analysis/AnalysisAdapter.java	/^package minijava.analysis;$/;"	p
minijava.analysis	minijava/analysis/DepthFirstAdapter.java	/^package minijava.analysis;$/;"	p
minijava.analysis	minijava/analysis/ReversedDepthFirstAdapter.java	/^package minijava.analysis;$/;"	p
minijava.lexer	minijava/lexer/Lexer.java	/^package minijava.lexer;$/;"	p
minijava.lexer	minijava/lexer/LexerException.java	/^package minijava.lexer;$/;"	p
minijava.node	minijava/node/AAndExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AArrayAssignStatement.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AArraylengthExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AArraylookupExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AAssignStatement.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ABlockStatement.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ABooleanTypeType.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ACallExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AClassdeclextendsClassdecl.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AClassdeclsimpleClassdecl.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AFalseExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AFormal.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AIdentifierTypeType.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AIdentifierexpExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AIfStatement.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AIntArrayTypeType.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AIntegerTypeType.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AIntegerliteralExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ALessthanExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AMainclass.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AMethoddecl.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AMinusExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ANewarrayExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ANewobjectExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ANotExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/APlusExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/APrintStatement.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AProgram.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AThisExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ATimesExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/ATrueExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AVardecl.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/AWhileStatement.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/EOF.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/Node.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PClassdecl.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PExp.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PFormal.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PMainclass.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PMethoddecl.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PProgram.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PStatement.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PType.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/PVardecl.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/Start.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/Switch.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/Switchable.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TAnd.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TBlank.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TBooleanType.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TComma.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TComment.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TDot.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TElse.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TEqual.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TExtends.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TFalse.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TId.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TIf.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TIntType.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TInteger.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TLcurly.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TLength.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TLess.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TLparen.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TLsquare.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TMain.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TMinus.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TMul.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TNew.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TNot.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TPlus.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TPrint.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TPublic.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TRcurly.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TReturn.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TRparen.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TRsquare.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TSemicolon.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TStringType.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TTclass.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TThis.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TTrue.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/TWhile.java	/^package minijava.node;$/;"	p
minijava.node	minijava/node/Token.java	/^package minijava.node;$/;"	p
minijava.parser	minijava/parser/Parser.java	/^package minijava.parser;$/;"	p
minijava.parser	minijava/parser/ParserException.java	/^package minijava.parser;$/;"	p
minijava.parser	minijava/parser/State.java	/^package minijava.parser;$/;"	p
minijava.parser	minijava/parser/TokenIndex.java	/^package minijava.parser;$/;"	p
mkBlocks	canon/BasicBlocks.java	/^    void mkBlocks(List<tree.Stm> l)$/;"	m	class:BasicBlocks
myLabel	temp/Label.java	/^    private String myLabel;$/;"	f	class:Label	file:
myNumber	temp/Temp.java	/^    private long myNumber;$/;"	f	class:Temp	file:
mygraph	graph/Node.java	/^    Graph mygraph;$/;"	f	class:Node
mykey	graph/Node.java	/^    int mykey;$/;"	f	class:Node
mylast	graph/Graph.java	/^    List<Node> mynodes, mylast;$/;"	f	class:Graph
mynodes	graph/Graph.java	/^    List<Node> mynodes, mylast;$/;"	f	class:Graph
name	frame/Frame.java	/^    public Label name;$/;"	f	class:Frame
name	symbol/ClassInfo.java	/^	public Symbol name;$/;"	f	class:ClassInfo
name	symbol/MethodInfo.java	/^	public Symbol name;$/;"	f	class:MethodInfo
name	symbol/Symbol.java	/^	private String name;$/;"	f	class:Symbol	file:
name	symbol/VarInfo.java	/^	public Symbol name;$/;"	f	class:VarInfo
name	syntaxtree/ClassDecl.java	/^    public Identifier name;$/;"	f	class:ClassDecl
name	syntaxtree/Formal.java	/^	public Identifier name;$/;"	f	class:Formal
name	syntaxtree/IdentifierExp.java	/^	public Identifier name;$/;"	f	class:IdentifierExp
name	syntaxtree/IdentifierType.java	/^	public String name;$/;"	f	class:IdentifierType
name	syntaxtree/MethodDecl.java	/^	public Identifier name;$/;"	f	class:MethodDecl
name	syntaxtree/VarDecl.java	/^	public Identifier name;$/;"	f	class:VarDecl
name	translate/VtableFrag.java	/^    public Label name;$/;"	f	class:VtableFrag
new0	minijava/parser/Parser.java	/^    ArrayList new0() \/* reduce AAprogram1Program *\/$/;"	m	class:Parser
new1	minijava/parser/Parser.java	/^    ArrayList new1() \/* reduce AAprogram2Program *\/$/;"	m	class:Parser
new10	minijava/parser/Parser.java	/^    ArrayList new10() \/* reduce AAextendedclassclassdecl4Classdecl *\/$/;"	m	class:Parser
new11	minijava/parser/Parser.java	/^    ArrayList new11() \/* reduce AVardecl *\/$/;"	m	class:Parser
new12	minijava/parser/Parser.java	/^    ArrayList new12() \/* reduce AAmethoddecl1Methoddecl *\/$/;"	m	class:Parser
new13	minijava/parser/Parser.java	/^    ArrayList new13() \/* reduce AAmethoddecl2Methoddecl *\/$/;"	m	class:Parser
new14	minijava/parser/Parser.java	/^    ArrayList new14() \/* reduce AAmethoddecl3Methoddecl *\/$/;"	m	class:Parser
new15	minijava/parser/Parser.java	/^    ArrayList new15() \/* reduce AAmethoddecl4Methoddecl *\/$/;"	m	class:Parser
new16	minijava/parser/Parser.java	/^    ArrayList new16() \/* reduce AAnotemptyformallistformallist1Formallist *\/$/;"	m	class:Parser
new17	minijava/parser/Parser.java	/^    ArrayList new17() \/* reduce AAnotemptyformallistformallist2Formallist *\/$/;"	m	class:Parser
new18	minijava/parser/Parser.java	/^    ArrayList new18() \/* reduce AEmptyFormallistFormallist *\/$/;"	m	class:Parser
new19	minijava/parser/Parser.java	/^    ArrayList new19() \/* reduce AFormal *\/$/;"	m	class:Parser
new2	minijava/parser/Parser.java	/^    ArrayList new2() \/* reduce AMainclass *\/$/;"	m	class:Parser
new20	minijava/parser/Parser.java	/^    ArrayList new20() \/* reduce AFormaltail *\/$/;"	m	class:Parser
new21	minijava/parser/Parser.java	/^    ArrayList new21() \/* reduce AIntArrayTypeType *\/$/;"	m	class:Parser
new22	minijava/parser/Parser.java	/^    ArrayList new22() \/* reduce ABooleanTypeType *\/$/;"	m	class:Parser
new23	minijava/parser/Parser.java	/^    ArrayList new23() \/* reduce AIntTypeType *\/$/;"	m	class:Parser
new24	minijava/parser/Parser.java	/^    ArrayList new24() \/* reduce AIdTypeType *\/$/;"	m	class:Parser
new25	minijava/parser/Parser.java	/^    ArrayList new25() \/* reduce AAblockstatement1Statement *\/$/;"	m	class:Parser
new26	minijava/parser/Parser.java	/^    ArrayList new26() \/* reduce AAblockstatement2Statement *\/$/;"	m	class:Parser
new27	minijava/parser/Parser.java	/^    ArrayList new27() \/* reduce AIfStatement *\/$/;"	m	class:Parser
new28	minijava/parser/Parser.java	/^    ArrayList new28() \/* reduce AWhileStatement *\/$/;"	m	class:Parser
new29	minijava/parser/Parser.java	/^    ArrayList new29() \/* reduce APrintStatement *\/$/;"	m	class:Parser
new3	minijava/parser/Parser.java	/^    ArrayList new3() \/* reduce AAsimpleclassclassdecl1Classdecl *\/$/;"	m	class:Parser
new30	minijava/parser/Parser.java	/^    ArrayList new30() \/* reduce AAssignStatement *\/$/;"	m	class:Parser
new31	minijava/parser/Parser.java	/^    ArrayList new31() \/* reduce AArrayassignStatement *\/$/;"	m	class:Parser
new32	minijava/parser/Parser.java	/^    ArrayList new32() \/* reduce AAndExp *\/$/;"	m	class:Parser
new33	minijava/parser/Parser.java	/^    ArrayList new33() \/* reduce ALessExpExp *\/$/;"	m	class:Parser
new34	minijava/parser/Parser.java	/^    ArrayList new34() \/* reduce ALessLessExp *\/$/;"	m	class:Parser
new35	minijava/parser/Parser.java	/^    ArrayList new35() \/* reduce AAddsubExpLessExp *\/$/;"	m	class:Parser
new36	minijava/parser/Parser.java	/^    ArrayList new36() \/* reduce APlusAddsubExp *\/$/;"	m	class:Parser
new37	minijava/parser/Parser.java	/^    ArrayList new37() \/* reduce AMinusAddsubExp *\/$/;"	m	class:Parser
new38	minijava/parser/Parser.java	/^    ArrayList new38() \/* reduce AMulExpAddsubExp *\/$/;"	m	class:Parser
new39	minijava/parser/Parser.java	/^    ArrayList new39() \/* reduce ATimesMulExp *\/$/;"	m	class:Parser
new4	minijava/parser/Parser.java	/^    ArrayList new4() \/* reduce AAsimpleclassclassdecl2Classdecl *\/$/;"	m	class:Parser
new40	minijava/parser/Parser.java	/^    ArrayList new40() \/* reduce ANotExpMulExp *\/$/;"	m	class:Parser
new41	minijava/parser/Parser.java	/^    ArrayList new41() \/* reduce ANotExpNotExp *\/$/;"	m	class:Parser
new42	minijava/parser/Parser.java	/^    ArrayList new42() \/* reduce ADotExpNotExp *\/$/;"	m	class:Parser
new43	minijava/parser/Parser.java	/^    ArrayList new43() \/* reduce ALengthDotExp *\/$/;"	m	class:Parser
new44	minijava/parser/Parser.java	/^    ArrayList new44() \/* reduce ACallDotExp *\/$/;"	m	class:Parser
new45	minijava/parser/Parser.java	/^    ArrayList new45() \/* reduce AArrayExpDotExp *\/$/;"	m	class:Parser
new46	minijava/parser/Parser.java	/^    ArrayList new46() \/* reduce AArrayArrayExp *\/$/;"	m	class:Parser
new47	minijava/parser/Parser.java	/^    ArrayList new47() \/* reduce AFinalExpArrayExp *\/$/;"	m	class:Parser
new48	minijava/parser/Parser.java	/^    ArrayList new48() \/* reduce AIntegerLiteralFinalExp *\/$/;"	m	class:Parser
new49	minijava/parser/Parser.java	/^    ArrayList new49() \/* reduce ATrueFinalExp *\/$/;"	m	class:Parser
new5	minijava/parser/Parser.java	/^    ArrayList new5() \/* reduce AAsimpleclassclassdecl3Classdecl *\/$/;"	m	class:Parser
new50	minijava/parser/Parser.java	/^    ArrayList new50() \/* reduce AFalseFinalExp *\/$/;"	m	class:Parser
new51	minijava/parser/Parser.java	/^    ArrayList new51() \/* reduce AIdFinalExp *\/$/;"	m	class:Parser
new52	minijava/parser/Parser.java	/^    ArrayList new52() \/* reduce AThisFinalExp *\/$/;"	m	class:Parser
new53	minijava/parser/Parser.java	/^    ArrayList new53() \/* reduce ANewIntArrayFinalExp *\/$/;"	m	class:Parser
new54	minijava/parser/Parser.java	/^    ArrayList new54() \/* reduce ANewIdFinalExp *\/$/;"	m	class:Parser
new55	minijava/parser/Parser.java	/^    ArrayList new55() \/* reduce AParenExprFinalExp *\/$/;"	m	class:Parser
new56	minijava/parser/Parser.java	/^    ArrayList new56() \/* reduce AAexplistexplist1Explist *\/$/;"	m	class:Parser
new57	minijava/parser/Parser.java	/^    ArrayList new57() \/* reduce AAexplistexplist2Explist *\/$/;"	m	class:Parser
new58	minijava/parser/Parser.java	/^    ArrayList new58() \/* reduce ABlankExplistExplist *\/$/;"	m	class:Parser
new59	minijava/parser/Parser.java	/^    ArrayList new59() \/* reduce AExprest *\/$/;"	m	class:Parser
new6	minijava/parser/Parser.java	/^    ArrayList new6() \/* reduce AAsimpleclassclassdecl4Classdecl *\/$/;"	m	class:Parser
new60	minijava/parser/Parser.java	/^    ArrayList new60() \/* reduce ATerminal$Classdecl *\/$/;"	m	class:Parser
new61	minijava/parser/Parser.java	/^    ArrayList new61() \/* reduce ANonTerminal$Classdecl *\/$/;"	m	class:Parser
new62	minijava/parser/Parser.java	/^    ArrayList new62() \/* reduce ATerminal$Vardecl *\/$/;"	m	class:Parser
new63	minijava/parser/Parser.java	/^    ArrayList new63() \/* reduce ANonTerminal$Vardecl *\/$/;"	m	class:Parser
new64	minijava/parser/Parser.java	/^    ArrayList new64() \/* reduce ATerminal$Methoddecl *\/$/;"	m	class:Parser
new65	minijava/parser/Parser.java	/^    ArrayList new65() \/* reduce ANonTerminal$Methoddecl *\/$/;"	m	class:Parser
new66	minijava/parser/Parser.java	/^    ArrayList new66() \/* reduce ATerminal$Statement *\/$/;"	m	class:Parser
new67	minijava/parser/Parser.java	/^    ArrayList new67() \/* reduce ANonTerminal$Statement *\/$/;"	m	class:Parser
new68	minijava/parser/Parser.java	/^    ArrayList new68() \/* reduce ATerminal$Formaltail *\/$/;"	m	class:Parser
new69	minijava/parser/Parser.java	/^    ArrayList new69() \/* reduce ANonTerminal$Formaltail *\/$/;"	m	class:Parser
new7	minijava/parser/Parser.java	/^    ArrayList new7() \/* reduce AAextendedclassclassdecl1Classdecl *\/$/;"	m	class:Parser
new70	minijava/parser/Parser.java	/^    ArrayList new70() \/* reduce ATerminal$Exprest *\/$/;"	m	class:Parser
new71	minijava/parser/Parser.java	/^    ArrayList new71() \/* reduce ANonTerminal$Exprest *\/$/;"	m	class:Parser
new8	minijava/parser/Parser.java	/^    ArrayList new8() \/* reduce AAextendedclassclassdecl2Classdecl *\/$/;"	m	class:Parser
new9	minijava/parser/Parser.java	/^    ArrayList new9() \/* reduce AAextendedclassclassdecl3Classdecl *\/$/;"	m	class:Parser
newFrame	frame/Frame.java	/^    public abstract Frame newFrame(Label name, List<Boolean> formals);$/;"	m	class:Frame
newNode	graph/Graph.java	/^    public Node newNode()$/;"	m	class:Graph
next	frame/Proc.java	/^    public Proc next;$/;"	f	class:Proc
next	minijava/lexer/Lexer.java	/^    public Token next() throws LexerException, IOException$/;"	m	class:Lexer
next	translate/Frag.java	/^    public Frag next;$/;"	f	class:Frag
node	flow_graph/AssemFlowGraph.java	/^    public Node node(Instr instr)$/;"	m	class:AssemFlowGraph
nodeList	minijava/parser/Parser.java	/^    protected ArrayList nodeList;$/;"	f	class:Parser
nodecount	graph/Graph.java	/^    int nodecount=0;$/;"	f	class:Graph
nodes	graph/Graph.java	/^    public List<Node> nodes()$/;"	m	class:Graph
nodes	minijava/parser/State.java	/^    ArrayList nodes;$/;"	f	class:State
nopNull	canon/Canon.java	/^    static StmExpList nopNull = new StmExpList(new tree.EXPSTM(new tree.CONST(0)),null);$/;"	f	class:Canon
notRel	tree/CJUMP.java	/^    public static int notRel(int relop)$/;"	m	class:CJUMP
nthLabel	assem/Instr.java	/^    private Label nthLabel(List<Label> l, int i)$/;"	m	class:Instr	file:
nthTemp	assem/Instr.java	/^    private Temp nthTemp(List<Temp> l, int i)$/;"	m	class:Instr	file:
object	syntaxtree/Call.java	/^	public Exp object;$/;"	f	class:Call
op	translate/RelCx.java	/^    private int op;$/;"	f	class:RelCx	file:
op	tree/CJUMP.java	/^    public int op;$/;"	f	class:CJUMP
out	minijava/PrettyPrint.java	/^    PrintStream out;$/;"	f	class:PrettyPrint
out	minijava/analysis/AnalysisAdapter.java	/^    private Hashtable<Node,Object> out;$/;"	f	class:AnalysisAdapter	file:
out	syntaxtree/PrettyPrint.java	/^    PrintStream out;$/;"	f	class:PrettyPrint
out	tree/PrintIR.java	/^    private PrintStream out;$/;"	f	class:PrintIR	file:
outAAndExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAAndExp(AAndExp node)$/;"	m	class:DepthFirstAdapter
outAAndExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAAndExp(AAndExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAArrayAssignStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void outAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:DepthFirstAdapter
outAArrayAssignStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAArrayAssignStatement(AArrayAssignStatement node)$/;"	m	class:ReversedDepthFirstAdapter
outAArraylengthExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAArraylengthExp(AArraylengthExp node)$/;"	m	class:DepthFirstAdapter
outAArraylengthExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAArraylengthExp(AArraylengthExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAArraylookupExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAArraylookupExp(AArraylookupExp node)$/;"	m	class:DepthFirstAdapter
outAArraylookupExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAArraylookupExp(AArraylookupExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAAssignStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void outAAssignStatement(AAssignStatement node)$/;"	m	class:DepthFirstAdapter
outAAssignStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAAssignStatement(AAssignStatement node)$/;"	m	class:ReversedDepthFirstAdapter
outABlockStatement	minijava/PrettyPrint.java	/^    public void outABlockStatement(ABlockStatement node)$/;"	m	class:PrettyPrint
outABlockStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void outABlockStatement(ABlockStatement node)$/;"	m	class:DepthFirstAdapter
outABlockStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outABlockStatement(ABlockStatement node)$/;"	m	class:ReversedDepthFirstAdapter
outABooleanTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void outABooleanTypeType(ABooleanTypeType node)$/;"	m	class:DepthFirstAdapter
outABooleanTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outABooleanTypeType(ABooleanTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
outACallExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outACallExp(ACallExp node)$/;"	m	class:DepthFirstAdapter
outACallExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outACallExp(ACallExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAClassdeclextendsClassdecl	minijava/analysis/DepthFirstAdapter.java	/^    public void outAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node)$/;"	m	class:DepthFirstAdapter
outAClassdeclextendsClassdecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAClassdeclextendsClassdecl(AClassdeclextendsClassdecl node)$/;"	m	class:ReversedDepthFirstAdapter
outAClassdeclsimpleClassdecl	minijava/analysis/DepthFirstAdapter.java	/^    public void outAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node)$/;"	m	class:DepthFirstAdapter
outAClassdeclsimpleClassdecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAClassdeclsimpleClassdecl(AClassdeclsimpleClassdecl node)$/;"	m	class:ReversedDepthFirstAdapter
outADivFactor	minijava/Translation.java	/^  public void outADivFactor(ADivFactor node) {$/;"	m	class:Translation
outAFalseExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAFalseExp(AFalseExp node)$/;"	m	class:DepthFirstAdapter
outAFalseExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAFalseExp(AFalseExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAFormal	minijava/PrettyPrint.java	/^    public void outAFormal(AFormal node)$/;"	m	class:PrettyPrint
outAFormal	minijava/analysis/DepthFirstAdapter.java	/^    public void outAFormal(AFormal node)$/;"	m	class:DepthFirstAdapter
outAFormal	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAFormal(AFormal node)$/;"	m	class:ReversedDepthFirstAdapter
outAIdentifierTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void outAIdentifierTypeType(AIdentifierTypeType node)$/;"	m	class:DepthFirstAdapter
outAIdentifierTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAIdentifierTypeType(AIdentifierTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
outAIdentifierexpExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAIdentifierexpExp(AIdentifierexpExp node)$/;"	m	class:DepthFirstAdapter
outAIdentifierexpExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAIdentifierexpExp(AIdentifierexpExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAIfStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void outAIfStatement(AIfStatement node)$/;"	m	class:DepthFirstAdapter
outAIfStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAIfStatement(AIfStatement node)$/;"	m	class:ReversedDepthFirstAdapter
outAIntArrayTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void outAIntArrayTypeType(AIntArrayTypeType node)$/;"	m	class:DepthFirstAdapter
outAIntArrayTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAIntArrayTypeType(AIntArrayTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
outAIntegerTypeType	minijava/analysis/DepthFirstAdapter.java	/^    public void outAIntegerTypeType(AIntegerTypeType node)$/;"	m	class:DepthFirstAdapter
outAIntegerTypeType	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAIntegerTypeType(AIntegerTypeType node)$/;"	m	class:ReversedDepthFirstAdapter
outAIntegerliteralExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAIntegerliteralExp(AIntegerliteralExp node)$/;"	m	class:DepthFirstAdapter
outAIntegerliteralExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAIntegerliteralExp(AIntegerliteralExp node)$/;"	m	class:ReversedDepthFirstAdapter
outALessthanExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outALessthanExp(ALessthanExp node)$/;"	m	class:DepthFirstAdapter
outALessthanExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outALessthanExp(ALessthanExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAMainclass	minijava/PrettyPrint.java	/^	public void outAMainclass(AMainclass node)$/;"	m	class:PrettyPrint
outAMainclass	minijava/analysis/DepthFirstAdapter.java	/^    public void outAMainclass(AMainclass node)$/;"	m	class:DepthFirstAdapter
outAMainclass	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAMainclass(AMainclass node)$/;"	m	class:ReversedDepthFirstAdapter
outAMethoddecl	minijava/analysis/DepthFirstAdapter.java	/^    public void outAMethoddecl(AMethoddecl node)$/;"	m	class:DepthFirstAdapter
outAMethoddecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAMethoddecl(AMethoddecl node)$/;"	m	class:ReversedDepthFirstAdapter
outAMinusExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAMinusExp(AMinusExp node)$/;"	m	class:DepthFirstAdapter
outAMinusExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAMinusExp(AMinusExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAMinusExpr	minijava/Translation.java	/^  public void outAMinusExpr(AMinusExpr node) {$/;"	m	class:Translation
outAModFactor	minijava/Translation.java	/^  public void outAModFactor(AModFactor node) {$/;"	m	class:Translation
outAMultFactor	minijava/Translation.java	/^  public void outAMultFactor(AMultFactor node) {$/;"	m	class:Translation
outANewarrayExp	minijava/PrettyPrint.java	/^    public void outANewarrayExp(ANewarrayExp node)$/;"	m	class:PrettyPrint
outANewarrayExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outANewarrayExp(ANewarrayExp node)$/;"	m	class:DepthFirstAdapter
outANewarrayExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outANewarrayExp(ANewarrayExp node)$/;"	m	class:ReversedDepthFirstAdapter
outANewobjectExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outANewobjectExp(ANewobjectExp node)$/;"	m	class:DepthFirstAdapter
outANewobjectExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outANewobjectExp(ANewobjectExp node)$/;"	m	class:ReversedDepthFirstAdapter
outANotExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outANotExp(ANotExp node)$/;"	m	class:DepthFirstAdapter
outANotExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outANotExp(ANotExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAPlusExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAPlusExp(APlusExp node)$/;"	m	class:DepthFirstAdapter
outAPlusExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAPlusExp(APlusExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAPlusExpr	minijava/Translation.java	/^  public void outAPlusExpr(APlusExpr node) {$/;"	m	class:Translation
outAPrintStatement	minijava/PrettyPrint.java	/^    public void outAPrintStatement(APrintStatement node)$/;"	m	class:PrettyPrint
outAPrintStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void outAPrintStatement(APrintStatement node)$/;"	m	class:DepthFirstAdapter
outAPrintStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAPrintStatement(APrintStatement node)$/;"	m	class:ReversedDepthFirstAdapter
outAProgram	minijava/analysis/DepthFirstAdapter.java	/^    public void outAProgram(AProgram node)$/;"	m	class:DepthFirstAdapter
outAProgram	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAProgram(AProgram node)$/;"	m	class:ReversedDepthFirstAdapter
outAThisExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outAThisExp(AThisExp node)$/;"	m	class:DepthFirstAdapter
outAThisExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAThisExp(AThisExp node)$/;"	m	class:ReversedDepthFirstAdapter
outATimesExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outATimesExp(ATimesExp node)$/;"	m	class:DepthFirstAdapter
outATimesExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outATimesExp(ATimesExp node)$/;"	m	class:ReversedDepthFirstAdapter
outATrueExp	minijava/analysis/DepthFirstAdapter.java	/^    public void outATrueExp(ATrueExp node)$/;"	m	class:DepthFirstAdapter
outATrueExp	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outATrueExp(ATrueExp node)$/;"	m	class:ReversedDepthFirstAdapter
outAVardecl	minijava/PrettyPrint.java	/^    public void outAVardecl(AVardecl node)$/;"	m	class:PrettyPrint
outAVardecl	minijava/analysis/DepthFirstAdapter.java	/^    public void outAVardecl(AVardecl node)$/;"	m	class:DepthFirstAdapter
outAVardecl	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAVardecl(AVardecl node)$/;"	m	class:ReversedDepthFirstAdapter
outAWhileStatement	minijava/analysis/DepthFirstAdapter.java	/^    public void outAWhileStatement(AWhileStatement node)$/;"	m	class:DepthFirstAdapter
outAWhileStatement	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outAWhileStatement(AWhileStatement node)$/;"	m	class:ReversedDepthFirstAdapter
outDegree	graph/Node.java	/^    public int outDegree()$/;"	m	class:Node
outStart	minijava/analysis/DepthFirstAdapter.java	/^    public void outStart(Start node)$/;"	m	class:DepthFirstAdapter
outStart	minijava/analysis/ReversedDepthFirstAdapter.java	/^    public void outStart(Start node)$/;"	m	class:ReversedDepthFirstAdapter
parent	minijava/node/Node.java	/^    private Node parent;$/;"	f	class:Node	file:
parent	minijava/node/Node.java	/^    public Node parent()$/;"	m	class:Node
parent	symbol/MethodInfo.java	/^    public Symbol parent;$/;"	f	class:MethodInfo
parent	translate/FrameBuilder.java	/^    private Frame parent;$/;"	f	class:FrameBuilder	file:
parse	minijava/parser/Parser.java	/^    public Start parse() throws ParserException, LexerException, IOException$/;"	m	class:Parser
peek	minijava/lexer/Lexer.java	/^    public Token peek() throws LexerException, IOException$/;"	m	class:Lexer
pop	minijava/parser/Parser.java	/^    private ArrayList pop()$/;"	m	class:Parser	file:
pos	minijava/lexer/Lexer.java	/^    private int pos;$/;"	f	class:Lexer	file:
pos	minijava/node/Token.java	/^    private int pos;$/;"	f	class:Token	file:
pred	graph/Node.java	/^    public List<Node> pred()$/;"	m	class:Node
preds	graph/Node.java	/^    List<Node> preds;$/;"	f	class:Node
print	frame/Proc.java	/^    public abstract void print(PrintStream out, temp.TempMap t);$/;"	m	class:Proc
print	minijava/PrettyPrint.java	/^    private void print(String s)$/;"	m	class:PrettyPrint	file:
print	minijava/UglyPrint.java	/^    private void print(String s)$/;"	m	class:UglyPrint	file:
print	syntaxtree/PrettyPrint.java	/^	private void print(String s)$/;"	m	class:PrettyPrint	file:
print	tree/PrintIR.java	/^    private void print(Object o)$/;"	m	class:PrintIR	file:
printExp	tree/PrintIR.java	/^    private void printExp(BINOP e, int i)$/;"	m	class:PrintIR	file:
printExp	tree/PrintIR.java	/^    private void printExp(CALL e, int i)$/;"	m	class:PrintIR	file:
printExp	tree/PrintIR.java	/^    private void printExp(CONST e, int i)$/;"	m	class:PrintIR	file:
printExp	tree/PrintIR.java	/^    private void printExp(ESEQ e, int i)$/;"	m	class:PrintIR	file:
printExp	tree/PrintIR.java	/^    private void printExp(Exp e, int i)$/;"	m	class:PrintIR	file:
printExp	tree/PrintIR.java	/^    private void printExp(MEM e, int i)$/;"	m	class:PrintIR	file:
printExp	tree/PrintIR.java	/^    private void printExp(NAME e, int i)$/;"	m	class:PrintIR	file:
printExp	tree/PrintIR.java	/^    private void printExp(TEMP e, int i)$/;"	m	class:PrintIR	file:
printSpace	minijava/PrettyPrint.java	/^    private boolean printSpace;$/;"	f	class:PrettyPrint	file:
printSpace	minijava/UglyPrint.java	/^    private boolean printSpace;$/;"	f	class:UglyPrint	file:
printSpace	syntaxtree/PrettyPrint.java	/^	private boolean printSpace;$/;"	f	class:PrettyPrint	file:
printStatement	tree/PrintIR.java	/^    private void printStatement(CJUMP s, int i)$/;"	m	class:PrintIR	file:
printStatement	tree/PrintIR.java	/^    private void printStatement(EXPSTM s, int i)$/;"	m	class:PrintIR	file:
printStatement	tree/PrintIR.java	/^    private void printStatement(JUMP s, int i)$/;"	m	class:PrintIR	file:
printStatement	tree/PrintIR.java	/^    private void printStatement(LABEL s, int i)$/;"	m	class:PrintIR	file:
printStatement	tree/PrintIR.java	/^    private void printStatement(MOVE s, int i)$/;"	m	class:PrintIR	file:
printStatement	tree/PrintIR.java	/^    private void printStatement(SEQ s, int i)$/;"	m	class:PrintIR	file:
printStatement	tree/PrintIR.java	/^    private void printStatement(Stm s, int i)$/;"	m	class:PrintIR	file:
printStatement	tree/PrintIR.java	/^    public void printStatement(Stm s)$/;"	m	class:PrintIR
println	minijava/PrettyPrint.java	/^    private void println(String s)$/;"	m	class:PrettyPrint	file:
println	minijava/UglyPrint.java	/^    private void println(String s)$/;"	m	class:UglyPrint	file:
println	syntaxtree/PrettyPrint.java	/^	private void println(String s)$/;"	m	class:PrettyPrint	file:
println	tree/PrintIR.java	/^    private void println()$/;"	m	class:PrintIR	file:
procEntryExit1	frame/Frame.java	/^    public abstract Stm procEntryExit1(tree.Exp body);$/;"	m	class:Frame
procEntryExit2	frame/Frame.java	/^    public abstract List<Instr> procEntryExit2(List<Instr> body);$/;"	m	class:Frame
procEntryExit3	frame/Frame.java	/^    public abstract Proc procEntryExit3(List<Instr> body);$/;"	m	class:Frame
push	minijava/parser/Parser.java	/^    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException$/;"	m	class:Parser	file:
pushBack	minijava/lexer/Lexer.java	/^    private void pushBack(int acceptLength) throws IOException$/;"	m	class:Lexer	file:
put	symbol/Table.java	/^	public boolean put(Symbol key, B value)$/;"	m	class:Table
registers	frame/Frame.java	/^    public abstract List<Temp> registers();$/;"	m	class:Frame
removeChild	minijava/node/Node.java	/^    abstract void removeChild(Node child);$/;"	m	class:Node
removeChild	minijava/node/Start.java	/^    void removeChild(Node child)$/;"	m	class:Start
reorder	canon/Canon.java	/^    static StmExpList reorder(List<tree.Exp> exps)$/;"	m	class:Canon
reorder_exp	canon/Canon.java	/^    static tree.ESEQ reorder_exp (tree.Exp e)$/;"	m	class:Canon
reorder_stm	canon/Canon.java	/^    static tree.Stm reorder_stm(tree.Stm s)$/;"	m	class:Canon
replaceBy	minijava/node/Node.java	/^    public void replaceBy(Node node)$/;"	m	class:Node
replaceChild	minijava/node/Node.java	/^    abstract void replaceChild(Node oldChild, Node newChild);$/;"	m	class:Node
replaceChild	minijava/node/Start.java	/^    void replaceChild(Node oldChild, Node newChild)$/;"	m	class:Start
result	translate/ExpHandler.java	/^    private Exp result;$/;"	f	class:ExpHandler	file:
result	translate/IRBuilder.java	/^    private Frag result;$/;"	f	class:IRBuilder	file:
result	translate/StatementHandler.java	/^    private Exp result;$/;"	f	class:StatementHandler	file:
result	translate/VTableBuilder.java	/^    private Frag result;$/;"	f	class:VTableBuilder	file:
result	util/conversor/ClassHandler.java	/^	private ClassDecl result;$/;"	f	class:ClassHandler	file:
result	util/conversor/ExpHandler.java	/^	private Exp result;$/;"	f	class:ExpHandler	file:
result	util/conversor/FormalHandler.java	/^	private Formal result;$/;"	f	class:FormalHandler	file:
result	util/conversor/MainClassHandler.java	/^	private MainClass result;$/;"	f	class:MainClassHandler	file:
result	util/conversor/MethodHandler.java	/^	private MethodDecl result;$/;"	f	class:MethodHandler	file:
result	util/conversor/ProgramHandler.java	/^	private Program result;$/;"	f	class:ProgramHandler	file:
result	util/conversor/StatementHandler.java	/^	private Statement result;$/;"	f	class:StatementHandler	file:
result	util/conversor/TypeHandler.java	/^	private Type result;$/;"	f	class:TypeHandler	file:
result	util/conversor/VarHandler.java	/^	private VarDecl result;$/;"	f	class:VarHandler	file:
returnExp	syntaxtree/MethodDecl.java	/^	public Exp returnExp;$/;"	f	class:MethodDecl
returnType	syntaxtree/MethodDecl.java	/^	public Type returnType;$/;"	f	class:MethodDecl
revMap	flow_graph/AssemFlowGraph.java	/^    private Hashtable<Instr, Node> revMap;$/;"	f	class:AssemFlowGraph	file:
rhs	syntaxtree/And.java	/^	public Exp rhs;$/;"	f	class:And
rhs	syntaxtree/Equal.java	/^	public Exp rhs;$/;"	f	class:Equal
rhs	syntaxtree/LessThan.java	/^	public Exp rhs;$/;"	f	class:LessThan
rhs	syntaxtree/Minus.java	/^	public Exp rhs;$/;"	f	class:Minus
rhs	syntaxtree/Plus.java	/^	public Exp rhs;$/;"	f	class:Plus
rhs	syntaxtree/Times.java	/^	public Exp rhs;$/;"	f	class:Times
right	translate/RelCx.java	/^    private Exp right;$/;"	f	class:RelCx	file:
right	tree/BINOP.java	/^    public Exp right;$/;"	f	class:BINOP
right	tree/CJUMP.java	/^    public Exp right;$/;"	f	class:CJUMP
right	tree/SEQ.java	/^    public Stm right;$/;"	f	class:SEQ
rmEdge	graph/Graph.java	/^    public void rmEdge(Node from, Node to)$/;"	m	class:Graph
row	syntaxtree/Absyn.java	/^	public int row;$/;"	f	class:Absyn
s	syntaxtree/Identifier.java	/^    public String s;$/;"	f	class:Identifier
s	syntaxtree/MainClass.java	/^    public Statement s;$/;"	f	class:MainClass
semant	semant/Env.java	/^package semant;$/;"	p
semant	semant/TypeChecker.java	/^package semant;$/;"	p
seq	canon/Canon.java	/^    static tree.Stm seq(tree.Stm a, tree.Stm b)$/;"	m	class:Canon
setArgid	minijava/node/AMainclass.java	/^    public void setArgid(TId node)$/;"	m	class:AMainclass
setArgs	minijava/node/ACallExp.java	/^    public void setArgs(List<PExp> list)$/;"	m	class:ACallExp
setBase	symbol/ClassInfo.java	/^    public void setBase(ClassInfo base)$/;"	m	class:ClassInfo
setBody	minijava/node/AMethoddecl.java	/^    public void setBody(List<PStatement> list)$/;"	m	class:AMethoddecl
setClassdecl	minijava/node/AProgram.java	/^    public void setClassdecl(List<PClassdecl> list)$/;"	m	class:AProgram
setClassid	minijava/node/AMainclass.java	/^    public void setClassid(TId node)$/;"	m	class:AMainclass
setClassname	minijava/node/AClassdeclextendsClassdecl.java	/^    public void setClassname(TId node)$/;"	m	class:AClassdeclextendsClassdecl
setClassname	minijava/node/AClassdeclsimpleClassdecl.java	/^    public void setClassname(TId node)$/;"	m	class:AClassdeclsimpleClassdecl
setCondition	minijava/node/AIfStatement.java	/^    public void setCondition(PExp node)$/;"	m	class:AIfStatement
setEOF	minijava/node/Start.java	/^    public void setEOF(EOF node)$/;"	m	class:Start
setElsestm	minijava/node/AIfStatement.java	/^    public void setElsestm(PStatement node)$/;"	m	class:AIfStatement
setExp	minijava/node/AArraylengthExp.java	/^    public void setExp(PExp node)$/;"	m	class:AArraylengthExp
setExp	minijava/node/ANewarrayExp.java	/^    public void setExp(PExp node)$/;"	m	class:ANewarrayExp
setExp	minijava/node/ANotExp.java	/^    public void setExp(PExp node)$/;"	m	class:ANotExp
setExp	minijava/node/APrintStatement.java	/^    public void setExp(PExp node)$/;"	m	class:APrintStatement
setExp	minijava/node/AWhileStatement.java	/^    public void setExp(PExp node)$/;"	m	class:AWhileStatement
setFormals	minijava/node/AMethoddecl.java	/^    public void setFormals(List<PFormal> list)$/;"	m	class:AMethoddecl
setId	minijava/node/AArrayAssignStatement.java	/^    public void setId(TId node)$/;"	m	class:AArrayAssignStatement
setId	minijava/node/AAssignStatement.java	/^    public void setId(TId node)$/;"	m	class:AAssignStatement
setId	minijava/node/AFormal.java	/^    public void setId(TId node)$/;"	m	class:AFormal
setId	minijava/node/AIdentifierTypeType.java	/^    public void setId(TId node)$/;"	m	class:AIdentifierTypeType
setId	minijava/node/AIdentifierexpExp.java	/^    public void setId(TId node)$/;"	m	class:AIdentifierexpExp
setId	minijava/node/ANewobjectExp.java	/^    public void setId(TId node)$/;"	m	class:ANewobjectExp
setIfstm	minijava/node/AIfStatement.java	/^    public void setIfstm(PStatement node)$/;"	m	class:AIfStatement
setIn	minijava/analysis/Analysis.java	/^    void setIn(Node node, Object o);$/;"	m	interface:Analysis
setIn	minijava/analysis/AnalysisAdapter.java	/^    public void setIn(Node node, Object o)$/;"	m	class:AnalysisAdapter
setIndexexp	minijava/node/AArrayAssignStatement.java	/^    public void setIndexexp(PExp node)$/;"	m	class:AArrayAssignStatement
setInteger	minijava/node/AIntegerliteralExp.java	/^    public void setInteger(TInteger node)$/;"	m	class:AIntegerliteralExp
setLeft	minijava/node/AAndExp.java	/^    public void setLeft(PExp node)$/;"	m	class:AAndExp
setLeft	minijava/node/AArraylookupExp.java	/^    public void setLeft(PExp node)$/;"	m	class:AArraylookupExp
setLeft	minijava/node/ACallExp.java	/^    public void setLeft(PExp node)$/;"	m	class:ACallExp
setLeft	minijava/node/ALessthanExp.java	/^    public void setLeft(PExp node)$/;"	m	class:ALessthanExp
setLeft	minijava/node/AMinusExp.java	/^    public void setLeft(PExp node)$/;"	m	class:AMinusExp
setLeft	minijava/node/APlusExp.java	/^    public void setLeft(PExp node)$/;"	m	class:APlusExp
setLeft	minijava/node/ATimesExp.java	/^    public void setLeft(PExp node)$/;"	m	class:ATimesExp
setLocals	minijava/node/AMethoddecl.java	/^    public void setLocals(List<PVardecl> list)$/;"	m	class:AMethoddecl
setMainclass	minijava/node/AProgram.java	/^    public void setMainclass(PMainclass node)$/;"	m	class:AProgram
setMethodid	minijava/node/AMethoddecl.java	/^    public void setMethodid(TId node)$/;"	m	class:AMethoddecl
setMethods	minijava/node/AClassdeclextendsClassdecl.java	/^    public void setMethods(List<PMethoddecl> list)$/;"	m	class:AClassdeclextendsClassdecl
setMethods	minijava/node/AClassdeclsimpleClassdecl.java	/^    public void setMethods(List<PMethoddecl> list)$/;"	m	class:AClassdeclsimpleClassdecl
setName	minijava/node/ACallExp.java	/^    public void setName(TId node)$/;"	m	class:ACallExp
setOut	minijava/analysis/Analysis.java	/^    void setOut(Node node, Object o);$/;"	m	interface:Analysis
setOut	minijava/analysis/AnalysisAdapter.java	/^    public void setOut(Node node, Object o)$/;"	m	class:AnalysisAdapter
setPProgram	minijava/node/Start.java	/^    public void setPProgram(PProgram node)$/;"	m	class:Start
setReturnexp	minijava/node/AMethoddecl.java	/^    public void setReturnexp(PExp node)$/;"	m	class:AMethoddecl
setReturntype	minijava/node/AMethoddecl.java	/^    public void setReturntype(PType node)$/;"	m	class:AMethoddecl
setRight	minijava/node/AAndExp.java	/^    public void setRight(PExp node)$/;"	m	class:AAndExp
setRight	minijava/node/AArraylookupExp.java	/^    public void setRight(PExp node)$/;"	m	class:AArraylookupExp
setRight	minijava/node/ALessthanExp.java	/^    public void setRight(PExp node)$/;"	m	class:ALessthanExp
setRight	minijava/node/AMinusExp.java	/^    public void setRight(PExp node)$/;"	m	class:AMinusExp
setRight	minijava/node/APlusExp.java	/^    public void setRight(PExp node)$/;"	m	class:APlusExp
setRight	minijava/node/ATimesExp.java	/^    public void setRight(PExp node)$/;"	m	class:ATimesExp
setRightexp	minijava/node/AArrayAssignStatement.java	/^    public void setRightexp(PExp node)$/;"	m	class:AArrayAssignStatement
setRightexp	minijava/node/AAssignStatement.java	/^    public void setRightexp(PExp node)$/;"	m	class:AAssignStatement
setStatement	minijava/node/ABlockStatement.java	/^    public void setStatement(List<PStatement> list)$/;"	m	class:ABlockStatement
setStatement	minijava/node/AWhileStatement.java	/^    public void setStatement(PStatement node)$/;"	m	class:AWhileStatement
setStm	minijava/node/AMainclass.java	/^    public void setStm(PStatement node)$/;"	m	class:AMainclass
setSuper	minijava/node/AClassdeclextendsClassdecl.java	/^    public void setSuper(TId node)$/;"	m	class:AClassdeclextendsClassdecl
setType	minijava/node/AFormal.java	/^    public void setType(PType node)$/;"	m	class:AFormal
setVarid	minijava/node/AVardecl.java	/^    public void setVarid(TId node)$/;"	m	class:AVardecl
setVars	minijava/node/AClassdeclextendsClassdecl.java	/^    public void setVars(List<PVardecl> list)$/;"	m	class:AClassdeclextendsClassdecl
setVars	minijava/node/AClassdeclsimpleClassdecl.java	/^    public void setVars(List<PVardecl> list)$/;"	m	class:AClassdeclsimpleClassdecl
setVartype	minijava/node/AVardecl.java	/^    public void setVartype(PType node)$/;"	m	class:AVardecl
show	flow_graph/FlowGraph.java	/^    public void show(java.io.PrintStream out)$/;"	m	class:FlowGraph
show	graph/Graph.java	/^    public void show(java.io.PrintStream out)$/;"	m	class:Graph
size	syntaxtree/NewArray.java	/^	public Exp size;$/;"	f	class:NewArray
size	util/List.java	/^    public int size()$/;"	m	class:List
sourceName	main/SimpleError.java	/^    private String sourceName;$/;"	f	class:SimpleError	file:
src	assem/MOVE.java	/^    public List<Temp> src;$/;"	f	class:MOVE
src	assem/OPER.java	/^    public List<Temp> src;$/;"	f	class:OPER
src	canon/Canon.java	/^    tree.CALL src;$/;"	f	class:MoveCall
src	tree/MOVE.java	/^    public Exp src;$/;"	f	class:MOVE
stack	minijava/parser/Parser.java	/^    private final ListIterator stack = new LinkedList().listIterator();$/;"	f	class:Parser	file:
state	minijava/lexer/Lexer.java	/^    protected State state = State.INITIAL;$/;"	f	class:Lexer
state	minijava/parser/Parser.java	/^    private int state()$/;"	m	class:Parser	file:
state	minijava/parser/State.java	/^    int state;$/;"	f	class:State
stm	canon/Canon.java	/^    tree.Stm stm;$/;"	f	class:StmExpList
stm	translate/Nx.java	/^    Stm stm;$/;"	f	class:Nx
stm	tree/ESEQ.java	/^    public Stm stm;$/;"	f	class:ESEQ
stms	canon/TraceSchedule.java	/^    public List<tree.Stm> stms;$/;"	f	class:TraceSchedule
succ	graph/Node.java	/^    public List<Node> succ()$/;"	m	class:Node
succs	graph/Node.java	/^    List<Node> succs;$/;"	f	class:Node
superClass	syntaxtree/ClassDeclExtends.java	/^	public Identifier superClass;$/;"	f	class:ClassDeclExtends
symbol	symbol/ClassInfo.java	/^package symbol;$/;"	p
symbol	symbol/MethodInfo.java	/^package symbol;$/;"	p
symbol	symbol/Symbol.java	/^	public static Symbol symbol(String n)$/;"	m	class:Symbol
symbol	symbol/Symbol.java	/^package symbol;$/;"	p
symbol	symbol/Table.java	/^package symbol;$/;"	p
symbol	symbol/VarInfo.java	/^package symbol;$/;"	p
syntaxtree	syntaxtree/Absyn.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/And.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/ArrayAssign.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/ArrayLength.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/ArrayLookup.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Assign.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Block.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/BooleanType.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Call.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/ClassDecl.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/ClassDeclExtends.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/ClassDeclSimple.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Equal.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Exp.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/False.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Formal.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Identifier.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/IdentifierExp.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/IdentifierType.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/If.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/IntArrayType.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/IntegerLiteral.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/IntegerType.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/LessThan.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/MainClass.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/MethodDecl.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Minus.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/NewArray.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/NewObject.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Not.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Plus.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/PrettyPrint.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Print.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Program.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Statement.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/This.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Times.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/True.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/Type.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/TypeVisitorAdapter.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/VarDecl.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/VisitorAdapter.java	/^package syntaxtree;$/;"	p
syntaxtree	syntaxtree/While.java	/^package syntaxtree;$/;"	p
t	translate/IfThenElseExp.java	/^    Label t;$/;"	f	class:IfThenElseExp
table	canon/TraceSchedule.java	/^    java.util.Dictionary table = new java.util.Hashtable();$/;"	f	class:TraceSchedule
tail	translate/IRBuilder.java	/^    private Frag tail;$/;"	f	class:IRBuilder	file:
tail	translate/VTableBuilder.java	/^    private Frag tail;$/;"	f	class:VTableBuilder	file:
tail	util/List.java	/^	public List<E> tail;$/;"	f	class:List
targets	tree/JUMP.java	/^    public List<Label> targets;$/;"	f	class:JUMP
temp	temp/CombineMap.java	/^package temp;$/;"	p
temp	temp/DefaultMap.java	/^package temp;$/;"	p
temp	temp/Label.java	/^package temp;$/;"	p
temp	temp/Temp.java	/^package temp;$/;"	p
temp	temp/TempMap.java	/^package temp;$/;"	p
temp	tree/TEMP.java	/^    public Temp temp;$/;"	f	class:TEMP
tempMap	temp/CombineMap.java	/^    public String tempMap(Temp t)$/;"	m	class:CombineMap
tempMap	temp/DefaultMap.java	/^    public String tempMap(Temp t)$/;"	m	class:DefaultMap
tempMap	temp/TempMap.java	/^    public String tempMap(Temp t);$/;"	m	interface:TempMap
text	minijava/lexer/Lexer.java	/^    private final StringBuffer text = new StringBuffer();$/;"	f	class:Lexer	file:
text	minijava/node/Token.java	/^    private String text;$/;"	f	class:Token	file:
theBlocks	canon/TraceSchedule.java	/^    BasicBlocks theBlocks;$/;"	f	class:TraceSchedule
thenClause	syntaxtree/If.java	/^	public Statement thenClause;$/;"	f	class:If
thisPtr	symbol/MethodInfo.java	/^    public Access thisPtr;$/;"	f	class:MethodInfo
toString	graph/Node.java	/^    public String toString()$/;"	m	class:Node
toString	minijava/node/AAndExp.java	/^    public String toString()$/;"	m	class:AAndExp
toString	minijava/node/AArrayAssignStatement.java	/^    public String toString()$/;"	m	class:AArrayAssignStatement
toString	minijava/node/AArraylengthExp.java	/^    public String toString()$/;"	m	class:AArraylengthExp
toString	minijava/node/AArraylookupExp.java	/^    public String toString()$/;"	m	class:AArraylookupExp
toString	minijava/node/AAssignStatement.java	/^    public String toString()$/;"	m	class:AAssignStatement
toString	minijava/node/ABlockStatement.java	/^    public String toString()$/;"	m	class:ABlockStatement
toString	minijava/node/ABooleanTypeType.java	/^    public String toString()$/;"	m	class:ABooleanTypeType
toString	minijava/node/ACallExp.java	/^    public String toString()$/;"	m	class:ACallExp
toString	minijava/node/AClassdeclextendsClassdecl.java	/^    public String toString()$/;"	m	class:AClassdeclextendsClassdecl
toString	minijava/node/AClassdeclsimpleClassdecl.java	/^    public String toString()$/;"	m	class:AClassdeclsimpleClassdecl
toString	minijava/node/AFalseExp.java	/^    public String toString()$/;"	m	class:AFalseExp
toString	minijava/node/AFormal.java	/^    public String toString()$/;"	m	class:AFormal
toString	minijava/node/AIdentifierTypeType.java	/^    public String toString()$/;"	m	class:AIdentifierTypeType
toString	minijava/node/AIdentifierexpExp.java	/^    public String toString()$/;"	m	class:AIdentifierexpExp
toString	minijava/node/AIfStatement.java	/^    public String toString()$/;"	m	class:AIfStatement
toString	minijava/node/AIntArrayTypeType.java	/^    public String toString()$/;"	m	class:AIntArrayTypeType
toString	minijava/node/AIntegerTypeType.java	/^    public String toString()$/;"	m	class:AIntegerTypeType
toString	minijava/node/AIntegerliteralExp.java	/^    public String toString()$/;"	m	class:AIntegerliteralExp
toString	minijava/node/ALessthanExp.java	/^    public String toString()$/;"	m	class:ALessthanExp
toString	minijava/node/AMainclass.java	/^    public String toString()$/;"	m	class:AMainclass
toString	minijava/node/AMethoddecl.java	/^    public String toString()$/;"	m	class:AMethoddecl
toString	minijava/node/AMinusExp.java	/^    public String toString()$/;"	m	class:AMinusExp
toString	minijava/node/ANewarrayExp.java	/^    public String toString()$/;"	m	class:ANewarrayExp
toString	minijava/node/ANewobjectExp.java	/^    public String toString()$/;"	m	class:ANewobjectExp
toString	minijava/node/ANotExp.java	/^    public String toString()$/;"	m	class:ANotExp
toString	minijava/node/APlusExp.java	/^    public String toString()$/;"	m	class:APlusExp
toString	minijava/node/APrintStatement.java	/^    public String toString()$/;"	m	class:APrintStatement
toString	minijava/node/AProgram.java	/^    public String toString()$/;"	m	class:AProgram
toString	minijava/node/AThisExp.java	/^    public String toString()$/;"	m	class:AThisExp
toString	minijava/node/ATimesExp.java	/^    public String toString()$/;"	m	class:ATimesExp
toString	minijava/node/ATrueExp.java	/^    public String toString()$/;"	m	class:ATrueExp
toString	minijava/node/AVardecl.java	/^    public String toString()$/;"	m	class:AVardecl
toString	minijava/node/AWhileStatement.java	/^    public String toString()$/;"	m	class:AWhileStatement
toString	minijava/node/Node.java	/^    protected String toString(List list)$/;"	m	class:Node
toString	minijava/node/Node.java	/^    protected String toString(Node node)$/;"	m	class:Node
toString	minijava/node/Start.java	/^    public String toString()$/;"	m	class:Start
toString	minijava/node/Token.java	/^    public String toString()$/;"	m	class:Token
toString	symbol/Symbol.java	/^	public String toString()$/;"	m	class:Symbol
toString	syntaxtree/And.java	/^	public String toString()$/;"	m	class:And
toString	syntaxtree/ArrayAssign.java	/^	public String toString()$/;"	m	class:ArrayAssign
toString	syntaxtree/ArrayLength.java	/^	public String toString()$/;"	m	class:ArrayLength
toString	syntaxtree/ArrayLookup.java	/^	public String toString()$/;"	m	class:ArrayLookup
toString	syntaxtree/Assign.java	/^	public String toString()$/;"	m	class:Assign
toString	syntaxtree/Block.java	/^	public String toString()$/;"	m	class:Block
toString	syntaxtree/BooleanType.java	/^	public String toString()$/;"	m	class:BooleanType
toString	syntaxtree/Call.java	/^	public String toString()$/;"	m	class:Call
toString	syntaxtree/ClassDeclExtends.java	/^	public String toString()$/;"	m	class:ClassDeclExtends
toString	syntaxtree/ClassDeclSimple.java	/^	public String toString()$/;"	m	class:ClassDeclSimple
toString	syntaxtree/Equal.java	/^	public String toString()$/;"	m	class:Equal
toString	syntaxtree/False.java	/^	public String toString()$/;"	m	class:False
toString	syntaxtree/Formal.java	/^	public String toString()$/;"	m	class:Formal
toString	syntaxtree/Identifier.java	/^    public String toString()$/;"	m	class:Identifier
toString	syntaxtree/IdentifierExp.java	/^	public String toString()$/;"	m	class:IdentifierExp
toString	syntaxtree/IdentifierType.java	/^	public String toString()$/;"	m	class:IdentifierType
toString	syntaxtree/If.java	/^	public String toString()$/;"	m	class:If
toString	syntaxtree/IntArrayType.java	/^	public String toString()$/;"	m	class:IntArrayType
toString	syntaxtree/IntegerLiteral.java	/^	public String toString()$/;"	m	class:IntegerLiteral
toString	syntaxtree/IntegerType.java	/^	public String toString()$/;"	m	class:IntegerType
toString	syntaxtree/LessThan.java	/^	public String toString()$/;"	m	class:LessThan
toString	syntaxtree/MainClass.java	/^    public String toString()$/;"	m	class:MainClass
toString	syntaxtree/MethodDecl.java	/^	public String toString()$/;"	m	class:MethodDecl
toString	syntaxtree/Minus.java	/^	public String toString()$/;"	m	class:Minus
toString	syntaxtree/NewArray.java	/^	public String toString()$/;"	m	class:NewArray
toString	syntaxtree/NewObject.java	/^	public String toString()$/;"	m	class:NewObject
toString	syntaxtree/Not.java	/^	public String toString()$/;"	m	class:Not
toString	syntaxtree/Plus.java	/^	public String toString()$/;"	m	class:Plus
toString	syntaxtree/Print.java	/^	public String toString()$/;"	m	class:Print
toString	syntaxtree/Program.java	/^	public String toString()$/;"	m	class:Program
toString	syntaxtree/This.java	/^	public String toString()$/;"	m	class:This
toString	syntaxtree/Times.java	/^	public String toString()$/;"	m	class:Times
toString	syntaxtree/True.java	/^	public String toString()$/;"	m	class:True
toString	syntaxtree/VarDecl.java	/^	public String toString()$/;"	m	class:VarDecl
toString	syntaxtree/While.java	/^	public String toString()$/;"	m	class:While
toString	temp/Label.java	/^    public String toString()$/;"	m	class:Label
toString	temp/Temp.java	/^    public String toString()$/;"	m	class:Temp
toString	translate/ProcFrag.java	/^    public String toString()$/;"	m	class:ProcFrag
toString	translate/VtableFrag.java	/^    public String toString()$/;"	m	class:VtableFrag
token	minijava/lexer/Lexer.java	/^    protected Token token;$/;"	f	class:Lexer
token	minijava/parser/ParserException.java	/^    Token token;$/;"	f	class:ParserException
trace	canon/TraceSchedule.java	/^    void trace(List<tree.Stm> l)$/;"	m	class:TraceSchedule
translate	translate/Cx.java	/^package translate;$/;"	p
translate	translate/Ex.java	/^package translate;$/;"	p
translate	translate/Exp.java	/^package translate;$/;"	p
translate	translate/ExpHandler.java	/^    static Exp translate(Frame f, Env e, ClassInfo c, MethodInfo m, syntaxtree.Exp node)$/;"	m	class:ExpHandler
translate	translate/ExpHandler.java	/^package translate;$/;"	p
translate	translate/ExpListHandler.java	/^    static List<tree.Exp> translate(Frame f, Env e, ClassInfo c, MethodInfo m, List<syntaxtree.Exp> le)$/;"	m	class:ExpListHandler
translate	translate/ExpListHandler.java	/^package translate;$/;"	p
translate	translate/Frag.java	/^package translate;$/;"	p
translate	translate/FrameBuilder.java	/^    static void translate(Frame p, Env e, Program pp)$/;"	m	class:FrameBuilder
translate	translate/FrameBuilder.java	/^package translate;$/;"	p
translate	translate/IRBuilder.java	/^package translate;$/;"	p
translate	translate/IfThenElseExp.java	/^package translate;$/;"	p
translate	translate/MethodDeclHandler.java	/^    static public tree.Exp translate(Env e, ClassInfo c, MethodDecl m)$/;"	m	class:MethodDeclHandler
translate	translate/MethodDeclHandler.java	/^package translate;$/;"	p
translate	translate/Nx.java	/^package translate;$/;"	p
translate	translate/ProcFrag.java	/^package translate;$/;"	p
translate	translate/RelCx.java	/^package translate;$/;"	p
translate	translate/StatementHandler.java	/^    static Exp translate(Frame f, Env e, ClassInfo c, MethodInfo m, Statement stm)$/;"	m	class:StatementHandler
translate	translate/StatementHandler.java	/^package translate;$/;"	p
translate	translate/StatementListHandler.java	/^    static Exp translate(Frame f, Env e, ClassInfo c, MethodInfo m, List<Statement> ls)$/;"	m	class:StatementListHandler
translate	translate/StatementListHandler.java	/^package translate;$/;"	p
translate	translate/Translate.java	/^    public static Frag translate(Frame parentFrame, Env e, Program p)$/;"	m	class:Translate
translate	translate/Translate.java	/^package translate;$/;"	p
translate	translate/VTableBuilder.java	/^package translate;$/;"	p
translate	translate/VtableFrag.java	/^package translate;$/;"	p
tree	tree/BINOP.java	/^package tree;$/;"	p
tree	tree/CALL.java	/^package tree;$/;"	p
tree	tree/CJUMP.java	/^package tree;$/;"	p
tree	tree/CONST.java	/^package tree;$/;"	p
tree	tree/ESEQ.java	/^package tree;$/;"	p
tree	tree/EXPSTM.java	/^package tree;$/;"	p
tree	tree/Exp.java	/^package tree;$/;"	p
tree	tree/JUMP.java	/^package tree;$/;"	p
tree	tree/LABEL.java	/^package tree;$/;"	p
tree	tree/MEM.java	/^package tree;$/;"	p
tree	tree/MOVE.java	/^package tree;$/;"	p
tree	tree/NAME.java	/^package tree;$/;"	p
tree	tree/PrintIR.java	/^package tree;$/;"	p
tree	tree/SEQ.java	/^package tree;$/;"	p
tree	tree/Stm.java	/^package tree;$/;"	p
tree	tree/TEMP.java	/^package tree;$/;"	p
type	symbol/MethodInfo.java	/^	public Type type;$/;"	f	class:MethodInfo
type	symbol/VarInfo.java	/^	public Type type;$/;"	f	class:VarInfo
type	syntaxtree/Exp.java	/^    public Type type;$/;"	f	class:Exp
type	syntaxtree/Formal.java	/^	public Type type;$/;"	f	class:Formal
type	syntaxtree/VarDecl.java	/^	public Type type;$/;"	f	class:VarDecl
unCx	translate/Cx.java	/^    abstract Stm unCx(Label t, Label f);$/;"	m	class:Cx
unCx	translate/Ex.java	/^    Stm unCx(Label t, Label f)$/;"	m	class:Ex
unCx	translate/Exp.java	/^    abstract tree.Stm unCx(Label t, Label f);$/;"	m	class:Exp
unCx	translate/IfThenElseExp.java	/^    Stm unCx(Label tt, Label ff)$/;"	m	class:IfThenElseExp
unCx	translate/Nx.java	/^    Stm unCx(Label t, Label f)$/;"	m	class:Nx
unCx	translate/RelCx.java	/^    Stm unCx(Label t, Label f)$/;"	m	class:RelCx
unEx	translate/Cx.java	/^    tree.Exp unEx()$/;"	m	class:Cx
unEx	translate/Ex.java	/^    tree.Exp unEx()$/;"	m	class:Ex
unEx	translate/Exp.java	/^    abstract tree.Exp unEx();$/;"	m	class:Exp
unEx	translate/Nx.java	/^    tree.Exp unEx()$/;"	m	class:Nx
unNx	translate/Cx.java	/^    Stm unNx()$/;"	m	class:Cx
unNx	translate/Ex.java	/^    Stm unNx()$/;"	m	class:Ex
unNx	translate/Exp.java	/^    abstract tree.Stm unNx();$/;"	m	class:Exp
unNx	translate/Nx.java	/^    Stm unNx()$/;"	m	class:Nx
use	assem/Instr.java	/^    public abstract List<Temp> use();$/;"	m	class:Instr
use	assem/LABEL.java	/^    public List<Temp> use()$/;"	m	class:LABEL
use	assem/MOVE.java	/^    public List<Temp> use()$/;"	m	class:MOVE
use	assem/OPER.java	/^    public List<Temp> use()$/;"	m	class:OPER
use	flow_graph/AssemFlowGraph.java	/^    public List<Temp> use(Node node)$/;"	m	class:AssemFlowGraph
use	flow_graph/FlowGraph.java	/^    public abstract List<Temp> use(Node node);$/;"	m	class:FlowGraph
util	util/List.java	/^package util;$/;"	p
util.conversor	util/conversor/ClassHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/ClassListHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/ExpHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/ExpListHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/FormalHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/FormalListHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/MainClassHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/MethodHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/MethodListHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/ProgramHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/StatementHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/StatementListHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/SyntaxTreeGenerator.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/TypeHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/VarHandler.java	/^package util.conversor;$/;"	p
util.conversor	util/conversor/VarListHandler.java	/^package util.conversor;$/;"	p
value	syntaxtree/ArrayAssign.java	/^	public Exp value;$/;"	f	class:ArrayAssign
value	syntaxtree/IntegerLiteral.java	/^	public int value;$/;"	f	class:IntegerLiteral
value	tree/CONST.java	/^    public long value;$/;"	f	class:CONST
var	syntaxtree/ArrayAssign.java	/^	public Identifier var;$/;"	f	class:ArrayAssign
var	syntaxtree/Assign.java	/^	public Identifier var;$/;"	f	class:Assign
varList	syntaxtree/ClassDecl.java	/^    public List<VarDecl> varList;$/;"	f	class:ClassDecl
visit	syntaxtree/PrettyPrint.java	/^	public void visit(And node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(ArrayAssign node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(ArrayLength node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(ArrayLookup node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Assign node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Block node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(BooleanType node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Call node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(ClassDeclExtends node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(ClassDeclSimple node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Equal node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(False node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Formal node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Identifier node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(IdentifierExp node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(IdentifierType node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(If node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(IntArrayType node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(IntegerLiteral node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(IntegerType node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(LessThan node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(MainClass node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(MethodDecl node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Minus node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(NewArray node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(NewObject node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Not node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Plus node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Print node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Program node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(This node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(Times node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(True node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(VarDecl node)$/;"	m	class:PrettyPrint
visit	syntaxtree/PrettyPrint.java	/^	public void visit(While node)$/;"	m	class:PrettyPrint
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(And n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(ArrayAssign n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(ArrayLength n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(ArrayLookup n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Assign n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Block n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(BooleanType n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Call n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(ClassDeclExtends n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(ClassDeclSimple n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Equal n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(False n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Formal n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Identifier n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(IdentifierExp n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(IdentifierType n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(If n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(IntArrayType n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(IntegerLiteral n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(IntegerType n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(LessThan n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(MainClass n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(MethodDecl n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Minus n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(NewArray n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(NewObject n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Not n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Plus n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Print n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Program n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(This n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(Times n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(True n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(VarDecl n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/TypeVisitorAdapter.java	/^	public Type visit(While n)$/;"	m	class:TypeVisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(And node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(ArrayAssign node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(ArrayLength node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(ArrayLookup node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Assign node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Block node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(BooleanType node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Call node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(ClassDeclExtends node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(ClassDeclSimple node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Equal node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(False node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Formal node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Identifier node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(IdentifierExp node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(IdentifierType node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(If node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(IntArrayType node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(IntegerLiteral node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(IntegerType node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(LessThan node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(MainClass node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(MethodDecl node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Minus node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(NewArray node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(NewObject node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Not node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Plus node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Print node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Program node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(This node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(Times node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(True node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(VarDecl node)$/;"	m	class:VisitorAdapter
visit	syntaxtree/VisitorAdapter.java	/^	public void visit(While node)$/;"	m	class:VisitorAdapter
visit	translate/ExpHandler.java	/^    public void visit(And node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(ArrayLength node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(ArrayLookup node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(Call node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(Equal node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(False node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(IdentifierExp node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(IntegerLiteral node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(LessThan node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(Minus node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(NewArray node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(NewObject node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(Not node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(Plus node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(This node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(Times node)$/;"	m	class:ExpHandler
visit	translate/ExpHandler.java	/^    public void visit(True node)$/;"	m	class:ExpHandler
visit	translate/FrameBuilder.java	/^    public void visit(ClassDeclExtends node)$/;"	m	class:FrameBuilder
visit	translate/FrameBuilder.java	/^    public void visit(ClassDeclSimple node)$/;"	m	class:FrameBuilder
visit	translate/FrameBuilder.java	/^    public void visit(MethodDecl node)$/;"	m	class:FrameBuilder
visit	translate/FrameBuilder.java	/^    public void visit(Program node)$/;"	m	class:FrameBuilder
visit	translate/FrameBuilder.java	/^    public void visit(VarDecl node)$/;"	m	class:FrameBuilder
visit	translate/IRBuilder.java	/^    public void visit(ClassDeclExtends node)$/;"	m	class:IRBuilder
visit	translate/IRBuilder.java	/^    public void visit(ClassDeclSimple node)$/;"	m	class:IRBuilder
visit	translate/IRBuilder.java	/^    public void visit(MainClass node)$/;"	m	class:IRBuilder
visit	translate/IRBuilder.java	/^    public void visit(Program p)$/;"	m	class:IRBuilder
visit	translate/StatementHandler.java	/^    public void visit(ArrayAssign node)$/;"	m	class:StatementHandler
visit	translate/StatementHandler.java	/^    public void visit(Assign node)$/;"	m	class:StatementHandler
visit	translate/StatementHandler.java	/^    public void visit(Block node)$/;"	m	class:StatementHandler
visit	translate/StatementHandler.java	/^    public void visit(If node)$/;"	m	class:StatementHandler
visit	translate/StatementHandler.java	/^    public void visit(Print node)$/;"	m	class:StatementHandler
visit	translate/StatementHandler.java	/^    public void visit(While node)$/;"	m	class:StatementHandler
visit	translate/VTableBuilder.java	/^    public void visit(ClassDeclExtends node)$/;"	m	class:VTableBuilder
visit	translate/VTableBuilder.java	/^    public void visit(ClassDeclSimple node)$/;"	m	class:VTableBuilder
visit	translate/VTableBuilder.java	/^    public void visit(Program p)$/;"	m	class:VTableBuilder
visit	visitor/TypeVisitor.java	/^  public Type visit(And n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(ArrayAssign n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(ArrayLength n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(ArrayLookup n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Assign n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Block n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(BooleanType n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Call n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(ClassDeclExtends n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(ClassDeclSimple n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Equal n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(False n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Formal n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Identifier n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(IdentifierExp n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(IdentifierType n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(If n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(IntArrayType n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(IntegerLiteral n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(IntegerType n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(LessThan n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(MainClass n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(MethodDecl n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Minus n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(NewArray n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(NewObject n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Not n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Plus n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Print n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Program n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(This n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(Times n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(True n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(VarDecl n);$/;"	m	interface:TypeVisitor
visit	visitor/TypeVisitor.java	/^  public Type visit(While n);$/;"	m	interface:TypeVisitor
visit	visitor/Visitor.java	/^	public void visit(And node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(ArrayAssign node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(ArrayLength node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(ArrayLookup node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Assign node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Block node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(BooleanType node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Call node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(ClassDeclExtends node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(ClassDeclSimple node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Equal node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(False node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Formal node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Identifier node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(IdentifierExp node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(IdentifierType node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(If node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(IntArrayType node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(IntegerLiteral node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(IntegerType node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(LessThan node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(MainClass node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(MethodDecl node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Minus node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(NewArray node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(NewObject node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Not node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Plus node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Print node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Program node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(This node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(Times node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(True node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(VarDecl node);$/;"	m	interface:Visitor
visit	visitor/Visitor.java	/^	public void visit(While node);$/;"	m	interface:Visitor
visitor	visitor/TypeVisitor.java	/^package visitor;$/;"	p
visitor	visitor/Visitable.java	/^package visitor;$/;"	p
visitor	visitor/Visitor.java	/^package visitor;$/;"	p
vtable	symbol/ClassInfo.java	/^    public Label vtable;$/;"	f	class:ClassInfo
vtable	translate/VtableFrag.java	/^    public String[] vtable;$/;"	f	class:VtableFrag
vtableIndex	symbol/ClassInfo.java	/^    public Vector<Symbol> vtableIndex;$/;"	f	class:ClassInfo
wc	main/SimpleError.java	/^    private int wc;$/;"	f	class:SimpleError	file:
wordsize	frame/Frame.java	/^    public abstract int wordsize();$/;"	m	class:Frame
