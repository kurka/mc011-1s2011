/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AVarDecl extends PVarDecl
{
    private PType _vartype_;
    private TId _varid_;

    public AVarDecl()
    {
        // Constructor
    }

    public AVarDecl(
        @SuppressWarnings("hiding") PType _vartype_,
        @SuppressWarnings("hiding") TId _varid_)
    {
        // Constructor
        setVartype(_vartype_);

        setVarid(_varid_);

    }

    @Override
    public Object clone()
    {
        return new AVarDecl(
            cloneNode(this._vartype_),
            cloneNode(this._varid_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarDecl(this);
    }

    public PType getVartype()
    {
        return this._vartype_;
    }

    public void setVartype(PType node)
    {
        if(this._vartype_ != null)
        {
            this._vartype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vartype_ = node;
    }

    public TId getVarid()
    {
        return this._varid_;
    }

    public void setVarid(TId node)
    {
        if(this._varid_ != null)
        {
            this._varid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varid_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._vartype_)
            + toString(this._varid_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._vartype_ == child)
        {
            this._vartype_ = null;
            return;
        }

        if(this._varid_ == child)
        {
            this._varid_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._vartype_ == oldChild)
        {
            setVartype((PType) newChild);
            return;
        }

        if(this._varid_ == oldChild)
        {
            setVarid((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
