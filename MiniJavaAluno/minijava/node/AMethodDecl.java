/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AMethodDecl extends PMethodDecl
{
    private PType _returntype_;
    private TId _methodid_;
    private final LinkedList<PFormal> _formals_ = new LinkedList<PFormal>();
    private final LinkedList<PVarDecl> _locals_ = new LinkedList<PVarDecl>();
    private final LinkedList<PStatement> _body_ = new LinkedList<PStatement>();
    private PExp _returnexp_;

    public AMethodDecl()
    {
        // Constructor
    }

    public AMethodDecl(
        @SuppressWarnings("hiding") PType _returntype_,
        @SuppressWarnings("hiding") TId _methodid_,
        @SuppressWarnings("hiding") List<PFormal> _formals_,
        @SuppressWarnings("hiding") List<PVarDecl> _locals_,
        @SuppressWarnings("hiding") List<PStatement> _body_,
        @SuppressWarnings("hiding") PExp _returnexp_)
    {
        // Constructor
        setReturntype(_returntype_);

        setMethodid(_methodid_);

        setFormals(_formals_);

        setLocals(_locals_);

        setBody(_body_);

        setReturnexp(_returnexp_);

    }

    @Override
    public Object clone()
    {
        return new AMethodDecl(
            cloneNode(this._returntype_),
            cloneNode(this._methodid_),
            cloneList(this._formals_),
            cloneList(this._locals_),
            cloneList(this._body_),
            cloneNode(this._returnexp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodDecl(this);
    }

    public PType getReturntype()
    {
        return this._returntype_;
    }

    public void setReturntype(PType node)
    {
        if(this._returntype_ != null)
        {
            this._returntype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returntype_ = node;
    }

    public TId getMethodid()
    {
        return this._methodid_;
    }

    public void setMethodid(TId node)
    {
        if(this._methodid_ != null)
        {
            this._methodid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodid_ = node;
    }

    public LinkedList<PFormal> getFormals()
    {
        return this._formals_;
    }

    public void setFormals(List<PFormal> list)
    {
        this._formals_.clear();
        this._formals_.addAll(list);
        for(PFormal e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PVarDecl> getLocals()
    {
        return this._locals_;
    }

    public void setLocals(List<PVarDecl> list)
    {
        this._locals_.clear();
        this._locals_.addAll(list);
        for(PVarDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PStatement> getBody()
    {
        return this._body_;
    }

    public void setBody(List<PStatement> list)
    {
        this._body_.clear();
        this._body_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PExp getReturnexp()
    {
        return this._returnexp_;
    }

    public void setReturnexp(PExp node)
    {
        if(this._returnexp_ != null)
        {
            this._returnexp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnexp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._returntype_)
            + toString(this._methodid_)
            + toString(this._formals_)
            + toString(this._locals_)
            + toString(this._body_)
            + toString(this._returnexp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._returntype_ == child)
        {
            this._returntype_ = null;
            return;
        }

        if(this._methodid_ == child)
        {
            this._methodid_ = null;
            return;
        }

        if(this._formals_.remove(child))
        {
            return;
        }

        if(this._locals_.remove(child))
        {
            return;
        }

        if(this._body_.remove(child))
        {
            return;
        }

        if(this._returnexp_ == child)
        {
            this._returnexp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._returntype_ == oldChild)
        {
            setReturntype((PType) newChild);
            return;
        }

        if(this._methodid_ == oldChild)
        {
            setMethodid((TId) newChild);
            return;
        }

        for(ListIterator<PFormal> i = this._formals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFormal) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PVarDecl> i = this._locals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStatement> i = this._body_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._returnexp_ == oldChild)
        {
            setReturnexp((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
