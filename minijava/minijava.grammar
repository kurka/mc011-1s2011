Package minijava;

Helpers
  all = [1 .. 127];
  digit = [ '0' .. '9' ];
  idbegin = [['a' .. 'z'] + ['A' .. 'Z']];
  nondigit = ['_' + [['a' .. 'z'] + ['A' .. 'Z']]];
  not_newline = [all - 10];
  not_star = [all - '*'];
  not_star_slash =  [not_star - '/'];

Tokens
  tclass = 'class';
  main = 'static void main';
  extends = 'extends';
  public = 'public';
  return = 'return';
  this = 'this';
  new = 'new';

  string_type = 'String';
  int_type = 'int';
  boolean_type = 'boolean';

  if = 'if';
  else = 'else';
  while = 'while';
  print = 'System.out.println';
  lenght = 'lenght';
  semicolon = ';';
  comma = ',';
  equal = '=';

  true = 'true';
  false = 'false';

  lsquare = '[';
  rsquare = ']';
  lcurly = '{';
  rcurly = '}';
  lparen = '(';
  rparen = ')';
  

  id = nondigit (digit|nondigit)*;
  integer = digit*;
  less = '<';
  and = '&&';
  addsub = ('+' | '-');
  mul = '*';
  dot = '.';
  not = '!';

  comment = '//' not_newline* 10 |
            '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
  blank = (' ' | 13 | 9 | 10)+;

Ignored Tokens
  blank,
  comment;


Productions

/*
Como fazer AST:

producao {-> objeto_gerado} = 
 decl1 decl2 token {-> new objeto_gerado(decl1.objeto decl2.objeto, token)}

 casos especificos:

 1)quando decl tiver um label, usar label.objeto, ao inves de decl.objeto
 2)se decl tiver repeticoes (decl*), usar [decl.objeto]
 3)se a producao tiver mais de um subtipo, criar objeto desse subtipo:
  -> new objeto_gerado.objeto_subtipo(decl1.objeto decl2.objeto)
*/

  program {-> program} = 
    mainclass classdecl* 
	  {-> New program(mainclass.mainclass, [classdecllist.classdecl])};
  
  mainclass {-> mainclass} = 
    tclass [classid]:id 
	  [classlcurly]:lcurly 
	    public main lparen string_type lsquare rsquare [argid]:id rparen
	      [mainlcurly]:lcurly 
	        statement 
	      [mainrcurly]:rcurly 
      [classrcurly]:rcurly
      {-> New mainclass(classid, argid, statement.statement)};
  
  classdecl {-> classdecl} = 
    {simple_class} 
	tclass [classid]:id 
	  lcurly
        [vars]:vardecl* 
	    [methods]:methoddecl* 
      rcurly 
      {-> New classdecl.classdeclsimple(classid, [vars.vardecl], [methods.methoddecl])} |
    {extended_class} 
    tclass [classid]:id extends [superid]:id 
      lcurly
        [vars]:vardecl* [methods]:methoddecl* 
      rcurly;
      {-> New classdecl.classdeclextends(classid, superid, [vars.vardecl], [methods.methoddecl])}


  vardecl {-> vardecl} = 
    [vartype]:type [varid]:id semicolon
      {-> New vardecl(vartype.type, varid)};
  
  methoddecl {-> methoddecl} = 
    public [returntype]:type [methodid]:id lparen [formals]:formallist rparen 
      lcurly 
        [locals]:vardecl* 
        [body]:statement* 
        return [returnexp]:exp semicolon 
      rcurly
      {-> New methoddecl([returntype.type], methodid, [formals.formal], [locals.vardecl], [body.statement], [returnexp.exp])};
  
  formallist {-> formal*} =
    {notempty_formallist} formal formaltail*
      {-> [formal.formal, formaltail.formal]} |
    {empty_formallist}
      {-> []};
 
  formal {-> formal} =
    type id 
      {-> New formal(type.type, id)};

  formaltail {-> formal} =
    comma type id
      {-> New formal(type.type, id)};

  type {-> type} =
    {int_array_type} [int_array]:int_type lsquare rsquare {-> New type.int_array()} |
    {boolean_type} boolean_type {-> New type.boolean()} |
    {int_type} int_type {-> New type.int()} |
    {id_type} id {-> New type.id(id)};

  statement {-> statement} =
    {block} lcurly [statements]:statement* rcurly 
        {-> New statement.stmlist([statements.statement])} |
    {if} if lparen [condition]:exp rparen [ifstm]:statement else [elsestm]:statement 
        {-> New statement.ifstm(condition.exp, ifstm.statement, elsestm.statement)} |
    {while} while lparen exp rparen statement
        {-> New statement.while(exp.exp, statement.statement)} |
    {print} print lparen exp rparen semicolon
        {-> New statement.printstm(exp.exp)} |
    {assign} id equal [rightexp]:exp semicolon 
        {-> New statement.assign(id, rightexp.exp)} |
    {arrayassign} [id]:id lsquare [indexexp]:exp rsquare equal [rightexp]:exp semicolon
        {-> New statement.arrayassign(id, indexexp.exp, rightexp.exp)};


  /**
   * Expressions
   * See precedence list at
   * @link http://www.cs.uwf.edu/~eelsheik/cop2253/resources/op_precedence.html
   *  &&  <  +  -  *  !  .  []  ()
   */
  exp =
    less_exp and_sentence*;

  and_sentence =
    and less_exp;

  less_exp =
    addsub_exp less_sentence*;

  less_sentence = 
    less addsub_exp;

  addsub_exp =
    mul_exp addsub_sentence*;

  addsub_sentence =
    addsub mul_exp;

  mul_exp =
    not_exp mul_sentence*;

  mul_sentence =
    mul not_exp;

  not_exp = 
    {not_exp} not not_exp |
    {dot_exp} dot_exp;

  dot_exp =
    bracket_exp dot_sentence?;

  dot_sentence =
    {lenght} dot lenght |
    {method} dot id lparen explist rparen;
   
  bracket_exp =
    final_exp bracket_sentence?;

  bracket_sentence =
    lsquare exp rsquare;

  final_exp =
    {integer_literal} integer |
    {true} true |
    {false} false |
    {id} id |
    {this} this |
    {new_int_array} new int_type lsquare exp rsquare |
    {new_id} new id lparen rparen |
    {paren_expr} lparen exp rparen;

  explist =
    {explist} exp exprest* |
    {blank_explist} ;
    
  exprest =
    comma exp; 
    
Abstract Syntax Tree

  program =
    mainclass classdecl;
  

  mainclass =
    [classid]:id [argid]:id statement;

  classdecl =
    {classdeclsimple} [classname]:id [vars]:vardecl* [methods]:methoddecl*; 
    {classdeclextends} [classname]:id [super]:id [vars]:vardecl* [methods]:methoddecl*;

  vardecl =
    [vartype]:type [varid]:id;

  methoddecl =
    [returntype]:type [methodid]:id [formals]:formal* [locals]:vardecl* [body]:statement* [returnexp]:exp;

  type =
    {int_array} |
    {boolean} |
    {int_type} |
    {id_type} id;

  formal = 
    type id;

  statement = 
    [stmlist]:stmlist |
    [ifstm]:ifstm |
    [printstm]:printstm |
    [id_assignstm]:id_assignstm |
    [array_assignstm]:array_assignstm;

  {stmlist} statement* |
  {ifstm} [condition]:exp [ifstm]:statement [elsestm]:statement |
  {printstm} exp |
  {assign} id [rightexp]:exp |
  {arrayassign} id [indexexp]:exp [rightexp]:exp;

  /* Expressions */
  exp =
    [less_exp]:less_exp [and_sentence]:and_sentence*;

  and_sentence =
    [less_exp]:less_exp;

  less_exp =
    [addsub_exp]:addsub_exp [less_sentence]:less_sentence*;

  less_sentence =
    [addsub_exp]:addsub_exp;

  addsub_exp =
    [mul_exp]:mul_exp [addsub_sentence]:addsub_sentence*;

  addsub_sentence =
    [mul_exp]:mul_exp;

  /* TODO - needs review */
  /* A regra de producao do parser esta OK. Nao sei se esta certo a AST... Tem algum jeito melhor? */
  mul_exp =
    [not_exp]:not_exp [mul_sentence]:mul_sentence*;

  mul_sentence =
    [not_exp]:not_exp;

  not_exp = 
    [not_exp]:not_exp |
    [dot_exp]:dot_exp;

