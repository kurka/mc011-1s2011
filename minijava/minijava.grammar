Package minijava;

Helpers
  all = [1 .. 127];
  digit = [ '0' .. '9' ];
  idbegin = [['a' .. 'z'] + ['A' .. 'Z']];
  nondigit = ['_' + [['a' .. 'z'] + ['A' .. 'Z']]];
  not_newline = [all - 10];
  not_star = [all - '*'];
  not_star_slash =  [not_star - '/'];

Tokens
  tclass = 'class';
  main = 'static void main';
  extends = 'extends';
  public = 'public';
  return = 'return';
  this = 'this';
  new = 'new';

  string_type = 'String';
  int_type = 'int';
  boolean_type = 'boolean';

  if = 'if';
  else = 'else';
  while = 'while';
  print = 'System.out.println';
  lenght = 'lenght';
  semicolon = ';';
  comma = ',';
  dot = '.';
  not = '!';
  equal = '=';

  true = 'true';
  false = 'false';

  lsquare = '[';
  rsquare = ']';
  lcurly = '{';
  rcurly = '}';
  lparen = '(';
  rparen = ')';
  

  id = nondigit (digit|nondigit)*;
  integer = digit*;
  op = ('&&' | '<' | '+' | '-' | '*'); /* nao tem !=, >, / ? */

  comment = '//' not_newline* 10 |
            '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
  blank = (' ' | 13 | 9 | 10)+;

Ignored Tokens
 blank,
 comment;


Productions
  program = 
    mainclass classdecl*;
  
  mainclass = 
    tclass [classid]:id [classlcurly]:lcurly public main lparen string_type lsquare rsquare [argid]:id rparen [mainlcurly]:lcurly statement [mainrcurly]:rcurly [classrcurly]:rcurly;     
  
  classdecl = 
    {simple_class} tclass id lcurly vardecl* methoddecl* rcurly |
	{extended_class} tclass [classid]:id extends [superid]:id lcurly vardecl* methoddecl* rcurly;
  
  vardecl = 
    type id;
  
  methoddecl = 
    public type id lparen formallist rparen lcurly vardecl* statement* return exp semicolon rcurly;
  
  formallist = 
    flist?;
  
  flist = 
    type id formalrest*;
  
  formalrest = 
    comma type id;

  type =
    {int_array_type} int_type lsquare rsquare |
	{boolean_type} boolean_type |
	{int_type} int_type |
	{id_type} id;

  statement =
    {statements} lcurly statement* rcurly |
	{if} lparen exp rparen [ifstm]:statement else [elsestm]:statement |
    {print} print lparen exp rparen semicolon |
    {id_attribution} id equal exp semicolon |
    {array_attribution} id lsquare [indexexp]:exp rsquare equal [rightexp]:exp semicolon;

  exp =
	{integer_literal} integer exp_aux |
	{true} true exp_aux |
	{false} false exp_aux |
	{id} id exp_aux |
	{this} this exp_aux |
	{new_int_array} new int_type lsquare exp rsquare exp_aux |
	{new_id} new id lparen rparen exp_aux |
	{not_expr} not exp exp_aux |
	{paren_expr} lparen exp rparen exp_aux;

  exp_aux =
    {operation} op exp exp_aux |
	{array} lsquare exp rsquare exp_aux |
	{lenght} dot lenght exp_aux |
	{method} dot id lparen explist rparen exp_aux |
	;
	
  explist =
    elist?;

  elist =
    exp exprest*;
    
  exprest =
    comma exp; 
    
